{
    "pipes": [
        {
            "name": "DefaultifyPipe",
            "id": "pipe-DefaultifyPipe-b6cdd8d0351797bd7036c9e8744ecdf36b16e4456ba75b3b365c1635653645b7f20b7b55c1da8f43446a19b01fc537ba6482f5bc0e1dd54b314fc7a91110c6b9",
            "file": "lib/pipe/defaultify.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "type": "T | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T | string",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "T | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "defaultify",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n@Pipe({\r\n  name: 'defaultify'\r\n})\r\nexport class DefaultifyPipe implements PipeTransform {\r\n  transform<T = NzSafeAny>(value: T | undefined | null, defaultValue?: T | string): T | string {\r\n    return value == null ? defaultValue || '--' : value;\r\n  }\r\n}\r\n"
        },
        {
            "name": "FilterPipe",
            "id": "pipe-FilterPipe-00aa76acb42377f5762d51d52082c51a9662f184e3fbf93a54535c95c87c3dc9a77388cd01c9f6989f793336ed386c8ba867e1f6df945257db301d12b1053cd6",
            "file": "lib/pipe/filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matcher",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matcher",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matcher",
                            "type": "FilterMatcherFn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matcher",
                            "type": "FilterMatcherFn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matcher",
                            "type": "FilterMatcherFn<T> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter array\n\n过滤数组\n",
                    "description": "<p>Filter array</p>\n<p>过滤数组</p>\n",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matcher",
                            "type": "FilterMatcherFn<T> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\n\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n  transform<T = NzSafeAny>(array: T[], matcher: string, searchText?: string): T[];\r\n  transform<T = NzSafeAny>(array: T[], matcher: FilterMatcherFn<T>): T[];\r\n\r\n  /**\r\n   * Filter array\r\n   *\r\n   * 过滤数组\r\n   */\r\n  transform<T = NzSafeAny>(array: T[], matcher: FilterMatcherFn<T> | string, searchText?: string): T[] {\r\n    if (typeof matcher === 'string') {\r\n      if (Utils.isEmpty(searchText)) {\r\n        return array;\r\n      }\r\n\r\n      // @ts-ignore\r\n      const text = searchText.toLowerCase();\r\n      return (array || []).filter(v => Utils.get(v, matcher, '').toLowerCase().indexOf(text) !== -1);\r\n    }\r\n    return (array || []).filter(v => matcher(v));\r\n  }\r\n}\r\n\r\nexport type FilterMatcherFn<T> = (item: T) => boolean;\r\n"
        },
        {
            "name": "MathPipe",
            "id": "pipe-MathPipe-e630c08dfe8ec38560675d0e5de92193aaca193e8e26f46c4d5160f0f95e7b82d2fa2d0b8702fc60ee03d0faa9c77b8c8a607fc74d893fb2df40a23b74443170",
            "file": "lib/pipe/math.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>调用数学函数 如{{ 5.1 | math: &#39;ceil&#39; }} =&gt; 6</p>\n",
            "rawdescription": "\n\n调用数学函数 如{{ 5.1 | math: 'ceil' }} => 6\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fixed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "math",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * 调用数学函数 如{{ 5.1 | math: 'ceil' }} => 6\r\n */\r\n@Pipe({\r\n  name: 'math'\r\n})\r\nexport class MathPipe implements PipeTransform {\r\n  transform(value: string | number, fnName: keyof Math, fixed?: number): string | null {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n    const n: number = typeof value === 'string' ? Number(value) : value;\r\n    // @ts-ignore\r\n    const result = Math[fnName](n);\r\n    return fixed == null ? result : n.toFixed(fixed);\r\n  }\r\n}\r\n"
        },
        {
            "name": "TimeUnitPipe",
            "id": "pipe-TimeUnitPipe-5b4a309155977d3375e8aaa20a52646528a523180642098a5aed0b16e6e3217063f85c270625154c8e3aa6ccde46927f50d837b7f8501b64636d79f9c45b33d2",
            "file": "lib/pipe/time-unit.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "\"s\" | \"ms\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "\"s\" | \"ms\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "timeUnit",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'timeUnit'\r\n})\r\nexport class TimeUnitPipe implements PipeTransform {\r\n  transform(value: number | undefined | null, unit: 's' | 'ms'): string | null {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    const second = unit === 's' ? value : Math.floor(value / 1000);\r\n    const days = Math.floor(second / 86400);\r\n    const hours = Math.floor((second % 86400) / 3600);\r\n    const minutes = Math.floor(((second % 86400) % 3600) / 60);\r\n    const seconds = Math.floor(((second % 86400) % 3600) % 60);\r\n\r\n    const units = ['天', '小时', '分', '秒'];\r\n    const format = [days, hours, minutes, seconds].reduce((str, v, i) => (v ? str + v + units[i] : str), '');\r\n    return format || '0秒';\r\n  }\r\n}\r\n"
        },
        {
            "name": "ToAsyncPipe",
            "id": "pipe-ToAsyncPipe-38893630de2148bcaf76e6f3f7f45135a90f42cbd35182574c96789d693d38dc0b7c2b033d8e3ec60e4966a8b242ad67ad75377d2352e30b0b7bc733612d00c2",
            "file": "lib/pipe/to-async.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>把请求信息转换为异步对象</p>\n",
            "rawdescription": "\n\n把请求信息转换为异步对象\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | Observable<T> | Promise<T> | T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "AsyncOption<T | U>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | null",
                    "typeParameters": [
                        "T",
                        "U"
                    ],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n转换为Observable\n",
                    "description": "<p>转换为Observable</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 488,
                                "end": 493,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | Observable<T> | Promise<T> | T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 482,
                                "end": 487,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>可以是url或者Observable, Promise</p>\n"
                        },
                        {
                            "name": {
                                "pos": 535,
                                "end": 541,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "option"
                            },
                            "type": "AsyncOption<T | U>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 529,
                                "end": 534,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>配置项</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "toAsync",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { from, map, Observable, of } from 'rxjs';\r\nimport { FetcherService, FetchOptions } from '@xmagic/nzx-antd/service';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n/**\r\n * 把请求信息转换为异步对象\r\n */\r\n@Pipe({\r\n  name: 'toAsync'\r\n})\r\nexport class ToAsyncPipe implements PipeTransform {\r\n  constructor(private fetcher: FetcherService) {}\r\n\r\n  /**\r\n   * 转换为Observable\r\n   * @param value 可以是url或者Observable, Promise\r\n   * @param option 配置项\r\n   */\r\n  transform<T = NzSafeAny, U = NzSafeAny>(\r\n    value: string | Observable<T> | Promise<T> | T,\r\n    option?: AsyncOption<T, U>\r\n  ): Observable<U> | null {\r\n    if (value == null) {\r\n      return of(option?.defaultValue as U);\r\n    }\r\n\r\n    const opt = option || ({} as AsyncOption<T, U>);\r\n    const mapFn = Utils.isFunction(opt.map) ? opt.map : (data: T) => data as unknown as U;\r\n    if (typeof value === 'string') {\r\n      return this.fetcher.fetch<T>({ ...opt, url: value }).pipe(\r\n        map(v => Utils.defaultIfy(v, option?.defaultValue)),\r\n        map<T, U>(mapFn)\r\n      );\r\n    }\r\n\r\n    if (Utils.isPromise(value) || Utils.isObservable(value)) {\r\n      return from(value).pipe(\r\n        map(v => Utils.defaultIfy(v, option?.defaultValue)),\r\n        map<T, U>(mapFn)\r\n      );\r\n    }\r\n\r\n    return of(value as T).pipe(map<T, U>(mapFn));\r\n  }\r\n}\r\n\r\n/**\r\n * 异步请求信息\r\n */\r\nexport type AsyncOption<T = NzSafeAny, U = NzSafeAny> = Omit<FetchOptions, 'url'> & {\r\n  /**\r\n   * 映射数据\r\n   * @param data\r\n   * @param index\r\n   */\r\n  map?: (data: T) => U;\r\n  /**\r\n   * 默认值\r\n   */\r\n  defaultValue?: U;\r\n};\r\n"
        },
        {
            "name": "TrustHtmlPipe",
            "id": "pipe-TrustHtmlPipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87",
            "file": "lib/pipe/trust-resource.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>非安全加载HTML</p>\n",
            "rawdescription": "\n\n非安全加载HTML\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enabled",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enabled",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "trustHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\r\n\r\n/**\r\n * 非安全加载URL,比如加载iframe url\r\n */\r\n@Pipe({\r\n  name: 'trustUrl'\r\n})\r\nexport class TrustUrlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url: string): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全加载HTML\r\n */\r\n@Pipe({\r\n  name: 'trustHtml'\r\n})\r\nexport class TrustHtmlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(html: string, enabled = true): SafeHtml {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Script\r\n */\r\n@Pipe({\r\n  name: 'trustScript'\r\n})\r\nexport class TrustScriptPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(script: string, enabled = true): SafeScript {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Style\r\n */\r\n@Pipe({\r\n  name: 'trustStyle'\r\n})\r\nexport class TrustStylePipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(style: string, enabled = true): SafeStyle {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\r\n  }\r\n}\r\n"
        },
        {
            "name": "TrustScriptPipe",
            "id": "pipe-TrustScriptPipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87",
            "file": "lib/pipe/trust-resource.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>非安全调用Script</p>\n",
            "rawdescription": "\n\n非安全调用Script\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "script",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enabled",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeScript",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "script",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enabled",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "trustScript",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\r\n\r\n/**\r\n * 非安全加载URL,比如加载iframe url\r\n */\r\n@Pipe({\r\n  name: 'trustUrl'\r\n})\r\nexport class TrustUrlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url: string): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全加载HTML\r\n */\r\n@Pipe({\r\n  name: 'trustHtml'\r\n})\r\nexport class TrustHtmlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(html: string, enabled = true): SafeHtml {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Script\r\n */\r\n@Pipe({\r\n  name: 'trustScript'\r\n})\r\nexport class TrustScriptPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(script: string, enabled = true): SafeScript {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Style\r\n */\r\n@Pipe({\r\n  name: 'trustStyle'\r\n})\r\nexport class TrustStylePipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(style: string, enabled = true): SafeStyle {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\r\n  }\r\n}\r\n"
        },
        {
            "name": "TrustStylePipe",
            "id": "pipe-TrustStylePipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87",
            "file": "lib/pipe/trust-resource.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>非安全调用Style</p>\n",
            "rawdescription": "\n\n非安全调用Style\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enabled",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeStyle",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enabled",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "trustStyle",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\r\n\r\n/**\r\n * 非安全加载URL,比如加载iframe url\r\n */\r\n@Pipe({\r\n  name: 'trustUrl'\r\n})\r\nexport class TrustUrlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url: string): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全加载HTML\r\n */\r\n@Pipe({\r\n  name: 'trustHtml'\r\n})\r\nexport class TrustHtmlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(html: string, enabled = true): SafeHtml {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Script\r\n */\r\n@Pipe({\r\n  name: 'trustScript'\r\n})\r\nexport class TrustScriptPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(script: string, enabled = true): SafeScript {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Style\r\n */\r\n@Pipe({\r\n  name: 'trustStyle'\r\n})\r\nexport class TrustStylePipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(style: string, enabled = true): SafeStyle {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\r\n  }\r\n}\r\n"
        },
        {
            "name": "TrustUrlPipe",
            "id": "pipe-TrustUrlPipe-37678dcf3f360c63b8f086adf879a6c1f574701849f8b0366907941aade33c4667710ba3369c22a4eb6c753ee9fafdbd0c50a8b6aaf12da3f691c49a7f2cdf87",
            "file": "lib/pipe/trust-resource.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>非安全加载URL,比如加载iframe url</p>\n",
            "rawdescription": "\n\n非安全加载URL,比如加载iframe url\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeResourceUrl",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "trustUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\r\n\r\n/**\r\n * 非安全加载URL,比如加载iframe url\r\n */\r\n@Pipe({\r\n  name: 'trustUrl'\r\n})\r\nexport class TrustUrlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(url: string): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全加载HTML\r\n */\r\n@Pipe({\r\n  name: 'trustHtml'\r\n})\r\nexport class TrustHtmlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(html: string, enabled = true): SafeHtml {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustHtml(html) : html;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Script\r\n */\r\n@Pipe({\r\n  name: 'trustScript'\r\n})\r\nexport class TrustScriptPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(script: string, enabled = true): SafeScript {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustScript(script) : script;\r\n  }\r\n}\r\n\r\n/**\r\n * 非安全调用Style\r\n */\r\n@Pipe({\r\n  name: 'trustStyle'\r\n})\r\nexport class TrustStylePipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  transform(style: string, enabled = true): SafeStyle {\r\n    return enabled ? this.sanitizer.bypassSecurityTrustStyle(style) : style;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "CellEventArg",
            "id": "interface-CellEventArg-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "columnIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IndexAttr",
                    "optional": false,
                    "description": "",
                    "line": 141
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "RowEventArg"
        },
        {
            "name": "FetchOptions",
            "id": "interface-FetchOptions-22e12300f3d945599a135b7a9609c0ca5212a863548b35c0c77561cf8e04b4ef5c079c5c6c0618324794b5344566ae697bf081b165155bc61c40c19af3dc5878",
            "file": "lib/service/fetcher.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpContext, HttpContextToken } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\n/**\r\n * 模板字符串函数, 构造同步请求URL\r\n * @example\r\n * let value!: string;\r\n * this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\r\n * console.log(value);\r\n */\r\nexport function synced(url: TemplateStringsArray, ...keys: string[]): string {\r\n  const strings = [];\r\n  for (let i = 0; i < url.length; i++) {\r\n    strings.push(url.raw[i], keys[i] == null ? '' : keys[i]);\r\n  }\r\n  const result = strings.join('');\r\n  return result + (result.indexOf('?') === -1 ? '?' : '&') + 'synced=true';\r\n}\r\n\r\n/**\r\n * 启用同步请求\r\n * @example\r\n * let value!: string;\r\n * this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\r\n * console.log(value);\r\n */\r\nexport const SYNCED_ENABLED = new HttpContextToken<boolean>(() => false);\r\n\r\n/**\r\n * 是否启用loading\r\n * @example\r\n * this.http.get<string>('url', { context: new HttpContext().set(LOADING_ENABLED, false).set(...)});\r\n */\r\nexport const LOADING_ENABLED = new HttpContextToken<boolean>(() => true);\r\n\r\n@Injectable()\r\nexport class FetcherService {\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  /**\r\n   * 处理异步参数\r\n   * @param data 参数\r\n   */\r\n  static resolveParams<T>(data?: FetchParams<T>): Observable<T | undefined> {\r\n    if (Utils.isFunction(data)) {\r\n      const result = data();\r\n      if (result instanceof Observable) {\r\n        return result;\r\n      }\r\n      return of(result as T);\r\n    }\r\n\r\n    if (data instanceof Observable) {\r\n      return data;\r\n    }\r\n    return of(data as T);\r\n  }\r\n\r\n  /**\r\n   * 发起请求, 参数可以是异步对象或函数\r\n   * @param option 请求配置\r\n   */\r\n  fetch<T>(option: FetchOptions): Observable<T> {\r\n    return FetcherService.resolveParams(option.data).pipe(\r\n      switchMap(value => {\r\n        const data = option.beforeSend ? option.beforeSend(value || {}) : value;\r\n        return this.doFetch<T>({ ...option, data });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 同步请求, 参数可以是异步对象或函数\r\n   * @param option 请求配置\r\n   */\r\n  fetchSync<T>(option: Omit<FetchOptions, 'async'>): T {\r\n    return Utils.getAjaxValue<T>(this.fetch({ ...option, async: false }));\r\n  }\r\n\r\n  /**\r\n   * 送请求\r\n   * @param options 参数不包含函数不进行二次处理\r\n   */\r\n  public doFetch<T>(options: FetchOptions): Observable<T> {\r\n    const option: Record<string, NzSafeAny> = {};\r\n    if (options.responseType) {\r\n      option.responseType = options.responseType;\r\n    }\r\n    if (options.observe) {\r\n      option.observe = options.observe;\r\n    }\r\n\r\n    option.context ||= new HttpContext();\r\n    if (options.async === false) {\r\n      option.context.set(SYNCED_ENABLED, true);\r\n    }\r\n\r\n    if (options.loading === false) {\r\n      option.context.set(LOADING_ENABLED, false);\r\n    }\r\n\r\n    const data = Utils.isFunction(options.data) ? options.data() : options.data;\r\n    if (/^post|put$/i.test(options.method!)) {\r\n      option.body = data;\r\n    } else {\r\n      option.params = data;\r\n    }\r\n\r\n    return this.http.request<T>(options.method || 'get', options.url, option);\r\n  }\r\n\r\n  /**\r\n   * 同步请求, 参数不包含函数不进行二次处理\r\n   * @param options\r\n   */\r\n  doFetchSync<T>(options: Omit<FetchOptions, 'async'>): T {\r\n    return Utils.getAjaxValue<T>(this.doFetch({ ...options, async: false }));\r\n  }\r\n\r\n  /**\r\n   * 使用同步方式进行远程校验\r\n   * @param options\r\n   */\r\n  remoteValidate<T = NzSafeAny>(options: ValidatorOption<T>): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (control.value == null || !control.value.length) {\r\n        return null;\r\n      }\r\n      if (options.beforeSend) {\r\n        const beforeSend = options.beforeSend;\r\n        options.beforeSend = data => {\r\n          return beforeSend(data, control);\r\n        };\r\n      }\r\n\r\n      if (options.data && Utils.isFunction(options.data)) {\r\n        const dataFn = options.data;\r\n        options.data = () => {\r\n          return dataFn(control);\r\n        };\r\n      }\r\n\r\n      // @ts-ignore\r\n      const data = this.doFetchSync<T>(options);\r\n      if (options.afterFetch) {\r\n        return options.afterFetch(data);\r\n      }\r\n\r\n      if (data == null) {\r\n        return null;\r\n      }\r\n\r\n      if (Utils.isBoolean(data)) {\r\n        return data ? null : { remote: { message: options.message || '格式不正确' } };\r\n      }\r\n      return data;\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 请求参数\r\n */\r\nexport type FetchParams<T = NzSafeAny> = (() => Promise<T> | T) | Promise<T> | T;\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchOptions {\r\n  url: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   * 请求参数\r\n   */\r\n  data?: FetchParams;\r\n  /**\r\n   * 发送之前的回调函数,仅URL 时有效\r\n   * @param params\r\n   */\r\n  beforeSend?: (params: NzSafeAny) => NzSafeAny;\r\n  /**\r\n   * 响应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 订阅响应数据类型\r\n   */\r\n  observe?: 'body' | 'events' | 'response';\r\n  /**\r\n   * http上下文\r\n   */\r\n  context?: HttpContext;\r\n  /**\r\n   * 是否异步, 默认true\r\n   */\r\n  async?: boolean;\r\n  /**\r\n   * 是否显示loading\r\n   */\r\n  loading?: boolean;\r\n}\r\n\r\n/**\r\n * 验证器请求参数\r\n */\r\nexport type FetchValidatorParams<T = NzSafeAny> = ((control: AbstractControl) => Promise<T> | T) | Promise<T> | T;\r\n/**\r\n * 远程验证器配置\r\n */\r\nexport type ValidatorOption<T = NzSafeAny> = Omit<FetchOptions, 'beforeSend' | 'async' | 'data'> & {\r\n  /**\r\n   * 错误信息描述\r\n   */\r\n  message: string;\r\n  /**\r\n   * 请求参数\r\n   */\r\n  data?: FetchValidatorParams;\r\n  /**\r\n   * 响应数据后的回调\r\n   * @param data\r\n   */\r\n  afterFetch?(data: T): ValidationErrors | null;\r\n  /**\r\n   * 请求之前的回调\r\n   * @param params\r\n   * @param control\r\n   */\r\n  beforeSend?(params: NzSafeAny, control: AbstractControl): NzSafeAny;\r\n};\r\n\r\n\r\nexport type Method =\r\n  | 'get'\r\n  | 'GET'\r\n  | 'delete'\r\n  | 'DELETE'\r\n  | 'head'\r\n  | 'HEAD'\r\n  | 'options'\r\n  | 'OPTIONS'\r\n  | 'post'\r\n  | 'POST'\r\n  | 'put'\r\n  | 'PUT'\r\n  | 'patch'\r\n  | 'PATCH'\r\n  | 'purge'\r\n  | 'PURGE'\r\n  | 'link'\r\n  | 'LINK'\r\n  | 'unlink'\r\n  | 'UNLINK';",
            "properties": [
                {
                    "name": "async",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否异步, 默认true</p>\n",
                    "line": 204,
                    "rawdescription": "\n\n是否异步, 默认true\n"
                },
                {
                    "name": "beforeSend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>发送之前的回调函数,仅URL 时有效</p>\n",
                    "line": 188,
                    "rawdescription": "\n\n发送之前的回调函数,仅URL 时有效\n",
                    "jsdoctags": [
                        {
                            "pos": 4955,
                            "end": 4973,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 4956,
                                "end": 4961,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 4962,
                                "end": 4968,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "params"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpContext",
                    "optional": true,
                    "description": "<p>http上下文</p>\n",
                    "line": 200,
                    "rawdescription": "\n\nhttp上下文\n"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FetchParams",
                    "optional": true,
                    "description": "<p>请求参数</p>\n",
                    "line": 183,
                    "rawdescription": "\n\n请求参数\n"
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否显示loading</p>\n",
                    "line": 208,
                    "rawdescription": "\n\n是否显示loading\n"
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求方式</p>\n",
                    "line": 179,
                    "rawdescription": "\n\n请求方式\n"
                },
                {
                    "name": "observe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"body\" | \"events\" | \"response\"",
                    "optional": true,
                    "description": "<p>订阅响应数据类型</p>\n",
                    "line": 196,
                    "rawdescription": "\n\n订阅响应数据类型\n"
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "optional": true,
                    "description": "<p>响应类型</p>\n",
                    "line": 192,
                    "rawdescription": "\n\n响应类型\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 175
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>请求配置</p>\n",
            "rawdescription": "\n\n请求配置\n",
            "methods": []
        },
        {
            "name": "FetchSetting",
            "id": "interface-FetchSetting-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "listField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求结果列表字段  支持 a.b.c</p>\n",
                    "line": 164,
                    "rawdescription": "\n\n请求结果列表字段  支持 a.b.c\n"
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求方式</p>\n",
                    "line": 172,
                    "rawdescription": "\n\n请求方式\n"
                },
                {
                    "name": "pageIndexField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求接口当前页数</p>\n",
                    "line": 156,
                    "rawdescription": "\n\n请求接口当前页数\n"
                },
                {
                    "name": "pageSizeField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>每页显示多少条</p>\n",
                    "line": 160,
                    "rawdescription": "\n\n每页显示多少条\n"
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "optional": true,
                    "description": "<p> 相应类型</p>\n",
                    "line": 176,
                    "rawdescription": "\n\n 相应类型\n"
                },
                {
                    "name": "totalField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求结果总数字段  支持 a.b.c</p>\n",
                    "line": 168,
                    "rawdescription": "\n\n请求结果总数字段  支持 a.b.c\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>请求配置</p>\n",
            "rawdescription": "\n\n请求配置\n",
            "methods": []
        },
        {
            "name": "FileValidateError",
            "id": "interface-FileValidateError-bb065b118c924988dd307037ebe56e062c070b0cdbd8f1d93576f3bcddbfe36f556da25857af9d81efb32f8eb7f8decb454f403f19daa3d431009119e2bfeddc",
            "file": "lib/upload/upload.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport {\r\n  NzIconRenderTemplate,\r\n  NzUploadChangeParam,\r\n  NzUploadFile,\r\n  NzUploadListType,\r\n  NzUploadTransformFileType,\r\n  NzUploadType,\r\n  NzUploadXHRArgs,\r\n  UploadFilter,\r\n  NzShowUploadList\r\n} from 'ng-zorro-antd/upload';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControl } from '@xmagic/nzx-antd/util';\r\nimport { NzMessageService } from 'ng-zorro-antd/message';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { NzBytesPipe } from 'ng-zorro-antd/pipes';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\nexport enum ErrorType {\r\n  /**\r\n   * 单文件大小限制,单位KB\r\n   */\r\n  FILE_SIZE = 'FILE_SIZE',\r\n  /**\r\n   * 总文件大小限制\r\n   */\r\n  FILE_TOTAL_SIZE = 'FILE_TOTAL_SIZE',\r\n  FILE_TYPE = 'FILE_TYPE',\r\n  FILE_LIMIT = 'FILE_LIMIT',\r\n  FILE_NAME_LENGTH = 'FILE_NAME_LENGTH',\r\n  FILE_NAME_DUPLICATE = 'FILE_NAME_DUPLICATE'\r\n}\r\n\r\n@Component({\r\n  selector: 'nzx-upload',\r\n  templateUrl: './upload.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NzxUploadComponent),\r\n      multi: true\r\n    },\r\n    NzBytesPipe\r\n  ]\r\n})\r\nexport class NzxUploadComponent extends BaseControl<NzUploadFile[]> implements ControlValueAccessor, OnInit, OnChanges {\r\n  nzFileList: NzUploadFile[] = [];\r\n  /**\r\n   * 自定义按钮或显示内容\r\n   */\r\n  @Input() nzxUploadButton?: string | TemplateRef<NzSafeAny>;\r\n  /**\r\n   * 上传的提示信息\r\n   */\r\n  @Input() nzxHint?: string;\r\n  /**\r\n   * 是否显示上传按钮, 如果是nzType=\"drag\" 隐藏按钮\r\n   */\r\n  @Input() nzxShowUploadButtonIcon?: boolean;\r\n  /**\r\n   * 上传按钮的图标\r\n   */\r\n  @Input() nzxUploadButtonIcon = 'cloud-upload';\r\n  /**\r\n   * 错误信息映射\r\n   */\r\n  @Input() nzxValidateMessage?: { [validateKey: string]: string };\r\n  @Input() nzType: NzUploadType = 'select';\r\n  /**\r\n   * 上传的文件个数限制\r\n   */\r\n  @Input() nzLimit = 0;\r\n  /**\r\n   * 文件名重复验证\r\n   */\r\n  @Input() nzxFileNameDuplicate?: boolean;\r\n  /**\r\n   * 文件名长度\r\n   */\r\n  @Input() nzxFileNameLength?: number;\r\n  /**\r\n   * 文件大小,单位kb\r\n   */\r\n  @Input() nzSize = 0;\r\n  /**\r\n   * 总文件大小,单位kb\r\n   */\r\n  @Input() nzTotalSize?: number;\r\n  @Input() nzFileType?: string | string[];\r\n  @Input() nzAccept?: string | string[];\r\n  @Input() nzAction?: string | ((file: NzUploadFile) => string | Observable<string>);\r\n  @Input() nzDirectory = false;\r\n  @Input() nzOpenFileDialogOnClick = true;\r\n  /**\r\n   * 是否显示验证错误提示信息\r\n   */\r\n  @Input() nzxShowValidateMessage?: boolean;\r\n  @Input() nzBeforeUpload?: (\r\n    file: NzUploadFile,\r\n    fileList: NzUploadFile[],\r\n    error: FileValidateError | null\r\n  ) => boolean | Observable<boolean>;\r\n  _nzBeforeUpload?: (file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>;\r\n  @Input() nzCustomRequest?: (item: NzUploadXHRArgs) => Subscription;\r\n  @Input() nzData?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\r\n  @Input() nzFilter: UploadFilter[] = [];\r\n  @Input() nzDisabled?: boolean;\r\n  @Input() nzHeaders?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\r\n  @Input() nzListType: NzUploadListType = 'text';\r\n  @Input() nzMultiple?: boolean;\r\n  @Input() nzName = 'file';\r\n  @Input() nzShowUploadList: boolean | NzShowUploadList = true;\r\n  @Input() nzShowButton = true;\r\n  @Input() nzWithCredentials?: boolean;\r\n  @Input() nzRemove?: (file: NzUploadFile) => boolean | Observable<boolean>;\r\n  @Input() nzPreview?: (file: NzUploadFile) => void;\r\n  @Input() nzPreviewFile?: (file: NzUploadFile) => Observable<string>;\r\n  @Input() nzPreviewIsImage?: (file: NzUploadFile) => boolean;\r\n  @Input() nzTransformFile?: (file: NzUploadFile) => NzUploadTransformFileType;\r\n  @Input() nzDownload?: (file: NzUploadFile) => void;\r\n  @Input() nzIconRender!: NzIconRenderTemplate | null;\r\n  @Input() nzFileListRender?: TemplateRef<void>;\r\n\r\n  @Output() readonly nzChange = new EventEmitter<NzUploadChangeParam>();\r\n  @Output() readonly nzFileListChange = new EventEmitter<NzUploadFile[]>();\r\n\r\n  readonly defaultValidateMessage: { [K: string]: string } = {\r\n    FILE_SIZE: '文件 \"{fileName}\" 大小不能超过{fileSize}',\r\n    FILE_TOTAL_SIZE: '总上传文件大小不能超过{totalSize}',\r\n    FILE_TYPE: '上传的文件格式只能是 \"{fileType}',\r\n    FILE_LIMIT: '最多允许上传{fileLimit}个文件',\r\n    FILE_NAME_LENGTH: '文件 \"{fileName}\" 名称长度不能大于{fileNameLength}个字符',\r\n    FILE_NAME_DUPLICATE: '已上传名称 \"{fileName}\" 相同的文件，不能重复上传'\r\n  };\r\n\r\n  get isTemplateUploadButton() {\r\n    return this.nzxUploadButton instanceof TemplateRef;\r\n  }\r\n\r\n  constructor(protected messageService: NzMessageService, protected bytesPipe: NzBytesPipe) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setDefaultFileFilter();\r\n    this.setNzBeforeUpload();\r\n  }\r\n\r\n  protected setDefaultFileFilter() {\r\n    const defaultFilter: UploadFilter = {\r\n      name: 'defaultFilter',\r\n      fn: (fileList: NzUploadFile[]) => {\r\n        let error: FileValidateError | null = null;\r\n        const allFiles = (this.nzFileList || []).concat(fileList);\r\n        const list = [];\r\n\r\n        for (const file of fileList) {\r\n          const err = this.beforeUploadValidator(file, allFiles);\r\n          if (!err) {\r\n            list.push(file);\r\n          } else if (!error || err.errorType === ErrorType.FILE_TOTAL_SIZE) {\r\n            error = err;\r\n          }\r\n        }\r\n\r\n        if (error && this.nzxShowValidateMessage !== false) {\r\n          this.messageService.error(error.message || '文件不合法，请重新选择');\r\n        }\r\n        return list;\r\n      }\r\n    };\r\n\r\n    if (!this.nzFilter) {\r\n      this.nzFilter = [defaultFilter];\r\n    }\r\n\r\n    if (!this.nzFilter.find(f => f.name === 'defaultFilter')) {\r\n      this.nzFilter.push(defaultFilter);\r\n    }\r\n  }\r\n\r\n  setNzBeforeUpload() {\r\n    this._nzBeforeUpload = this.getNzBeforeUpload();\r\n  }\r\n\r\n  onNzChange(evt: NzUploadChangeParam) {\r\n    this.onTouched();\r\n    if (evt.type === 'error') {\r\n      this.nzFileList = this.nzFileList.filter(f => !f.error);\r\n    }\r\n\r\n    if (evt.type === 'success' || evt.type === 'removed') {\r\n      this.onChange(evt.fileList);\r\n    }\r\n    this.nzChange.emit(evt);\r\n  }\r\n\r\n  writeValue(value: NzUploadFile[]): void {\r\n    this.nzFileList = value || [];\r\n  }\r\n\r\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (changes.nzFilter && !changes.nzFilter.isFirstChange()) {\r\n      this.setDefaultFileFilter();\r\n    }\r\n\r\n    if (changes.nzBeforeUpload && !changes.nzBeforeUpload.isFirstChange()) {\r\n      this.setNzBeforeUpload();\r\n    }\r\n  }\r\n\r\n  override setDisabledState(isDisabled: boolean) {\r\n    this.nzDisabled = isDisabled;\r\n  }\r\n\r\n  /**\r\n   * 重新包装zBeforeUpload\r\n   */\r\n  protected getNzBeforeUpload():\r\n    | ((file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>)\r\n    | undefined {\r\n    if (this.nzBeforeUpload) {\r\n      return (file, fileList) => this.nzBeforeUpload!(file, fileList, this.beforeUploadValidator(file, fileList));\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 文件验证\r\n   * @param file 当前文件\r\n   * @param fileList 文件列表\r\n   * @protected\r\n   */\r\n  protected beforeUploadValidator(file: NzUploadFile, fileList: NzUploadFile[]): FileValidateError | null {\r\n    const messages = Object.assign({}, this.defaultValidateMessage, this.nzxValidateMessage);\r\n\r\n    // 文件类型\r\n    if (this.nzFileType != null) {\r\n      const nzFileTypes = typeof this.nzFileType === 'string' ? [this.nzFileType] : this.nzFileType;\r\n      if (nzFileTypes.length > 0 && !nzFileTypes.includes(file.type!)) {\r\n        return this.getError(ErrorType.FILE_TYPE, file, messages, { fileType: this.nzFileType });\r\n      }\r\n    }\r\n\r\n    // 单个文件大小\r\n    if (this.nzSize != null && this.nzSize > 0 && (file.size || 0) / 1024 > this.nzSize) {\r\n      return this.getError(ErrorType.FILE_SIZE, file, messages, {\r\n        fileSize: this.bytesPipe.transform(this.nzSize, 2, 'kB'),\r\n        fileName: file.name\r\n      });\r\n    }\r\n\r\n    // 文件名长度\r\n    if (this.nzxFileNameLength && file.name.length > this.nzxFileNameLength) {\r\n      return this.getError(ErrorType.FILE_NAME_LENGTH, file, messages, {\r\n        fileNameLength: this.nzxFileNameLength,\r\n        fileName: file.name\r\n      });\r\n    }\r\n\r\n    // 文件名重复\r\n    if (this.nzxFileNameDuplicate === false && fileList.filter(f => f !== file).find(it => it.name === file.name)) {\r\n      return this.getError(ErrorType.FILE_NAME_DUPLICATE, file, messages, { fileName: file.name });\r\n    }\r\n\r\n    // 最大上传个数\r\n    if (this.nzLimit && fileList.length > this.nzLimit) {\r\n      return this.getError(ErrorType.FILE_LIMIT, file, messages, { fileLimit: this.nzLimit });\r\n    }\r\n\r\n    // 总文件大小\r\n    if (this.nzTotalSize && fileList.reduce((prev, curr) => (prev += curr.size || 0), 0) / 1024 > this.nzTotalSize) {\r\n      return this.getError(ErrorType.FILE_TOTAL_SIZE, file, messages, {\r\n        totalSize: this.bytesPipe.transform(this.nzTotalSize, 2, 'kB')\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 显示文件验证错误\r\n   * @param file 当前文件\r\n   * @param fileList 文件列表\r\n   * @param showValidateMessage 是否显示\r\n   * @private\r\n   */\r\n  private showFileErrorMessage(\r\n    file: NzUploadFile,\r\n    fileList: NzUploadFile[],\r\n    showValidateMessage?: boolean\r\n  ): FileValidateError | null {\r\n    const error = this.beforeUploadValidator(file, fileList);\r\n    if (error && showValidateMessage !== false) {\r\n      this.messageService.error(error.message || '文件不合法');\r\n    }\r\n    return error;\r\n  }\r\n\r\n  private getError(\r\n    errorType: ErrorType,\r\n    file: NzUploadFile,\r\n    messages: { [K: string]: string },\r\n    fmtData?: Record<string, NzSafeAny>\r\n  ): FileValidateError {\r\n    return {\r\n      errorType,\r\n      file,\r\n      message: Utils.format(messages[errorType], fmtData)\r\n    };\r\n  }\r\n}\r\n\r\nexport interface FileValidateError {\r\n  /**\r\n   * 验证错误类型\r\n   */\r\n  errorType: ErrorType;\r\n  /**\r\n   * 错误信息\r\n   */\r\n  message: string;\r\n  /**\r\n   * 错误的文件\r\n   */\r\n  file: NzUploadFile;\r\n}\r\n",
            "properties": [
                {
                    "name": "errorType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorType",
                    "optional": false,
                    "description": "<p>验证错误类型</p>\n",
                    "line": 333,
                    "rawdescription": "\n\n验证错误类型\n"
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzUploadFile",
                    "optional": false,
                    "description": "<p>错误的文件</p>\n",
                    "line": 341,
                    "rawdescription": "\n\n错误的文件\n"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>错误信息</p>\n",
                    "line": 337,
                    "rawdescription": "\n\n错误信息\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HeaderEventArg",
            "id": "interface-HeaderEventArg-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": false,
                    "description": "",
                    "line": 146
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HttpErrorBean",
            "id": "interface-HttpErrorBean-bf07863577c78bf61eddbd69ddf04ec445963ab2c47b8167ba90dd3f81f103f8cce184d59416fc42efda64c75d17e6ff2e5ec4aa531b43e9a04262d153680cce",
            "file": "lib/nzx-antd.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpContext, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NzxAntdService {\r\n  /**\r\n   * 默认请求数据类型, 默认 json\r\n   */\r\n  contentType?: 'form' | 'json';\r\n  /**\r\n   * 请求的根路径,例如/context\r\n   */\r\n  basePath?: string;\r\n  /**\r\n   * 响应的数据配置\r\n   */\r\n  response?: ResponseSetting;\r\n  /**\r\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\r\n   */\r\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\r\n\r\n  /**\r\n   * 是否有权限\r\n   */\r\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\r\n  /**\r\n   * 权限变更, 通常切换用户时需要\r\n   */\r\n  authChange?: () => Observable<void>;\r\n\r\n  /**\r\n   * 无权限时跳转路径\r\n   */\r\n  noAuthUrl?: string;\r\n\r\n  /**\r\n   * 表格分页配置\r\n   */\r\n  table?: TableSetting;\r\n  constructor() {}\r\n}\r\n\r\n/**\r\n * 默认配置\r\n */\r\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n};\r\n\r\n/**\r\n * 响应配置\r\n */\r\nexport interface ResponseSetting {\r\n  /**\r\n   * code字段名称, 支持路径属性\r\n   */\r\n  code?: string;\r\n  /**\r\n   * message字段名称, 支持路径属性\r\n   */\r\n  message?: string;\r\n  /**\r\n   * data字段名称, 支持路径属性\r\n   */\r\n  data?: string;\r\n  /**\r\n   * 是否请求成功\r\n   * @param body 响应对象\r\n   */\r\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\r\n  /**\r\n   * 是否需要默认错误的错误\r\n   * @param error 错误信息\r\n   */\r\n  defaultError?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否登录超时\r\n   * @param error 错误信息\r\n   */\r\n  timeout?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否强制退出登录, 比如强制下线\r\n   * @param error 错误信息\r\n   */\r\n  forceLogout?: (error: HttpErrorBean) => boolean;\r\n}\r\n\r\n/**\r\n * 表格配置\r\n */\r\nexport interface TableSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 分页大小\r\n   */\r\n  nzPageSize?: number;\r\n}\r\n\r\n/**\r\n * 请求公共配置\r\n */\r\nexport interface HttpRequestOptions {\r\n  context?: HttpContext;\r\n  reportProgress?: boolean;\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  withCredentials?: boolean;\r\n  body?: NzSafeAny | null;\r\n  method?: string;\r\n  url?: string;\r\n  setHeaders?: Record<string, NzSafeAny>;\r\n  setParams?: Record<string, NzSafeAny>;\r\n}\r\n\r\nexport interface HttpErrorBean<T = NzSafeAny> {\r\n  httpError: boolean;\r\n  code: number;\r\n  message: string;\r\n  body: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "httpError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 153
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HttpRequestOptions",
            "id": "interface-HttpRequestOptions-bf07863577c78bf61eddbd69ddf04ec445963ab2c47b8167ba90dd3f81f103f8cce184d59416fc42efda64c75d17e6ff2e5ec4aa531b43e9a04262d153680cce",
            "file": "lib/nzx-antd.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpContext, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NzxAntdService {\r\n  /**\r\n   * 默认请求数据类型, 默认 json\r\n   */\r\n  contentType?: 'form' | 'json';\r\n  /**\r\n   * 请求的根路径,例如/context\r\n   */\r\n  basePath?: string;\r\n  /**\r\n   * 响应的数据配置\r\n   */\r\n  response?: ResponseSetting;\r\n  /**\r\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\r\n   */\r\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\r\n\r\n  /**\r\n   * 是否有权限\r\n   */\r\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\r\n  /**\r\n   * 权限变更, 通常切换用户时需要\r\n   */\r\n  authChange?: () => Observable<void>;\r\n\r\n  /**\r\n   * 无权限时跳转路径\r\n   */\r\n  noAuthUrl?: string;\r\n\r\n  /**\r\n   * 表格分页配置\r\n   */\r\n  table?: TableSetting;\r\n  constructor() {}\r\n}\r\n\r\n/**\r\n * 默认配置\r\n */\r\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n};\r\n\r\n/**\r\n * 响应配置\r\n */\r\nexport interface ResponseSetting {\r\n  /**\r\n   * code字段名称, 支持路径属性\r\n   */\r\n  code?: string;\r\n  /**\r\n   * message字段名称, 支持路径属性\r\n   */\r\n  message?: string;\r\n  /**\r\n   * data字段名称, 支持路径属性\r\n   */\r\n  data?: string;\r\n  /**\r\n   * 是否请求成功\r\n   * @param body 响应对象\r\n   */\r\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\r\n  /**\r\n   * 是否需要默认错误的错误\r\n   * @param error 错误信息\r\n   */\r\n  defaultError?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否登录超时\r\n   * @param error 错误信息\r\n   */\r\n  timeout?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否强制退出登录, 比如强制下线\r\n   * @param error 错误信息\r\n   */\r\n  forceLogout?: (error: HttpErrorBean) => boolean;\r\n}\r\n\r\n/**\r\n * 表格配置\r\n */\r\nexport interface TableSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 分页大小\r\n   */\r\n  nzPageSize?: number;\r\n}\r\n\r\n/**\r\n * 请求公共配置\r\n */\r\nexport interface HttpRequestOptions {\r\n  context?: HttpContext;\r\n  reportProgress?: boolean;\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  withCredentials?: boolean;\r\n  body?: NzSafeAny | null;\r\n  method?: string;\r\n  url?: string;\r\n  setHeaders?: Record<string, NzSafeAny>;\r\n  setParams?: Record<string, NzSafeAny>;\r\n}\r\n\r\nexport interface HttpErrorBean<T = NzSafeAny> {\r\n  httpError: boolean;\r\n  code: number;\r\n  message: string;\r\n  body: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzSafeAny | null",
                    "optional": true,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpContext",
                    "optional": true,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "reportProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "optional": true,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "setHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | NzSafeAny>",
                    "optional": true,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "setParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | NzSafeAny>",
                    "optional": true,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 142
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>请求公共配置</p>\n",
            "rawdescription": "\n\n请求公共配置\n",
            "methods": []
        },
        {
            "name": "IndexAttr",
            "id": "interface-IndexAttr-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "even",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>索引是否为偶数</p>\n",
                    "line": 123,
                    "rawdescription": "\n\n索引是否为偶数\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>是否为第一条</p>\n",
                    "line": 115,
                    "rawdescription": "\n\n是否为第一条\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>当前条目的索引</p>\n",
                    "line": 111,
                    "rawdescription": "\n\n当前条目的索引\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>是否最后一条</p>\n",
                    "line": 119,
                    "rawdescription": "\n\n是否最后一条\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "odd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>索引是否为奇数</p>\n",
                    "line": 127,
                    "rawdescription": "\n\n索引是否为奇数\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LogoutType",
            "id": "interface-LogoutType-8de81c75a07c69a24cebd9c55c2cb0562dbee6e602ac1195725d1e5095ba6be2f8dc6dc3e6d6cf849c25390880b6baf3d820195f2fe60465eb6f611b40ef625a",
            "file": "lib/http-interceptor/logout.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpError, ResponseModel } from './http.model';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NzModalWrapService } from '@xmagic/nzx-antd/modal';\r\nimport { throttleTime } from 'rxjs/operators';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from '@xmagic/nzx-antd'\r\n\r\n/**\r\n * 退出通知\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class LogoutService {\r\n  protected readonly timeoutFn: (error: HttpError) => boolean;\r\n  private loginNotify$ = new Subject<LogoutType>();\r\n\r\n  constructor(protected modal: NzModalWrapService, protected antdService: NzxAntdService) {\r\n    this.timeoutFn = Utils.extend<ResponseSetting>({}, DEFAULT_RESPONSE_SETTING, this.antdService.response).timeout!;\r\n  }\r\n\r\n  notifyLogin(error: HttpError<ResponseModel>): void {\r\n    this.loginNotify$.next({\r\n      message: error.message,\r\n      url: (error.body as { url?: string })?.url,\r\n      timeout: this.timeoutFn(error)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 静默通知退出\r\n   * @param message 提示消息\r\n   * @param code 错误码 -1 不显示提示信息\r\n   */\r\n  notifyLogout(message: string = '', code = 0): void {\r\n    this.notifyLogin(new HttpError(false, code, message, {}));\r\n  }\r\n\r\n  /**\r\n   * 执行退出登录Observable\r\n   * @param logoutType\r\n   */\r\n  logout(logoutType: LogoutType): void {\r\n    this.loginNotify$.next(logoutType);\r\n  }\r\n\r\n  onLogout(fn: (logoutType: LogoutType) => void): Subscription {\r\n    return this.loginNotify$.asObservable().pipe(throttleTime(2000)).subscribe(fn);\r\n  }\r\n}\r\n\r\nexport interface LogoutType {\r\n  /**\r\n   * url\r\n   */\r\n  url?: string;\r\n  /**\r\n   * 是否超时\r\n   */\r\n  timeout?: boolean;\r\n  /**\r\n   * 错误信息\r\n   */\r\n  message?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>错误信息</p>\n",
                    "line": 63,
                    "rawdescription": "\n\n错误信息\n"
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否超时</p>\n",
                    "line": 59,
                    "rawdescription": "\n\n是否超时\n"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>url</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nurl\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NzxCheckboxOption",
            "id": "interface-NzxCheckboxOption-bc7c8cf14794485fe9090e81b5d3f6612a8123ee1fcbf09d16e453e20f5aa974f34d4cf848629d8c399995780b55401ebd9b7e3faca0702d0c43abe888f8ecf8",
            "file": "lib/checkbox/checkbox.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControl } from '@xmagic/nzx-antd/util';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n@Component({\r\n  selector: 'nzx-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NzxCheckboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class NzxCheckboxComponent<T> extends BaseControl<T[]> implements ControlValueAccessor, OnInit, OnChanges {\r\n  @Input() nzxOptions: NzxCheckboxOption<T>[] = [];\r\n  @Input() override nzxDisabled = false;\r\n  @Output() nzxFocus = new EventEmitter<NzxCheckboxOption<T>>();\r\n  @Output() nzxBlur = new EventEmitter<NzxCheckboxOption<T>>();\r\n  nzxValue: T[] = [];\r\n  constructor(protected cdr: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.nzxValue = this.nzxOptions.filter(v => v.checked).map(v => v.value);\r\n  }\r\n\r\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (changes.nzxOptions && !changes.nzxOptions.isFirstChange()) {\r\n      this.writeValue(this.nzxValue);\r\n    }\r\n  }\r\n\r\n  ngModelChange(values: T[]) {\r\n    this.nzxValue = values;\r\n    this.onTouched();\r\n    this.onChange(this.nzxValue);\r\n  }\r\n\r\n  writeValue(value: T[] | null): void {\r\n    this.nzxValue = value == null ? [] : Array.isArray(value) ? value : [value];\r\n    if (this.nzxOptions && this.nzxOptions.length) {\r\n      this.nzxOptions.forEach(v => (v.checked = this.nzxValue.indexOf(v.value) !== -1));\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n\r\n/**\r\n * 数据配置项\r\n */\r\nexport interface NzxCheckboxOption<T =  NzSafeAny> {\r\n  /**\r\n   *\r\n   */\r\n  label: string;\r\n  /**\r\n   * 值\r\n   */\r\n  value: T;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * 是否隐藏\r\n   */\r\n  hide?: boolean;\r\n  /**\r\n   * 是否半选\r\n   */\r\n  indeterminate?: boolean;\r\n  /**\r\n   * 值变化的回调函数\r\n   * @param checked\r\n   */\r\n  ngModelChange?: (checked: boolean) => void;\r\n\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport type OptionItem = Omit<NzxCheckboxOption, 'indeterminate' | 'ngModelChange'>;\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否禁用</p>\n",
                    "line": 83,
                    "rawdescription": "\n\n是否禁用\n"
                },
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否隐藏</p>\n",
                    "line": 87,
                    "rawdescription": "\n\n是否隐藏\n"
                },
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否半选</p>\n",
                    "line": 91,
                    "rawdescription": "\n\n是否半选\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "ngModelChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>值变化的回调函数</p>\n",
                    "line": 96,
                    "rawdescription": "\n\n值变化的回调函数\n",
                    "jsdoctags": [
                        {
                            "pos": 2297,
                            "end": 2316,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 2298,
                                "end": 2303,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 2304,
                                "end": 2311,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "checked"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>值</p>\n",
                    "line": 79,
                    "rawdescription": "\n\n值\n"
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-bc7c8cf14794485fe9090e81b5d3f6612a8123ee1fcbf09d16e453e20f5aa974f34d4cf848629d8c399995780b55401ebd9b7e3faca0702d0c43abe888f8ecf8",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "NzSafeAny",
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "description": "<p>数据配置项</p>\n",
            "rawdescription": "\n\n数据配置项\n",
            "methods": []
        },
        {
            "name": "NzxColumn",
            "id": "interface-NzxColumn-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn<T>[]",
                    "optional": true,
                    "description": "<p>用于分组表头</p>\n",
                    "line": 42,
                    "rawdescription": "\n\n用于分组表头\n"
                },
                {
                    "name": "enableCheckAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>nzShowCheckbox为true, 默认启用enableCheckAll</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nnzShowCheckbox为true, 默认启用enableCheckAll\n"
                },
                {
                    "name": "fixed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\"",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>格式化列数据</p>\n",
                    "line": 31,
                    "rawdescription": "\n\n格式化列数据\n",
                    "jsdoctags": [
                        {
                            "pos": 586,
                            "end": 611,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 587,
                                "end": 592,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前字段数据</p>\n",
                            "name": {
                                "pos": 593,
                                "end": 597,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 611,
                            "end": 632,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 612,
                                "end": 617,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>行数据</p>\n",
                            "name": {
                                "pos": 618,
                                "end": 621,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "row"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 632,
                            "end": 653,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 633,
                                "end": 638,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>行索引</p>\n",
                            "name": {
                                "pos": 639,
                                "end": 644,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "isIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>是否为序号</p>\n",
                    "line": 24,
                    "rawdescription": "\n\n是否为序号\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>字段名称</p>\n",
                    "line": 16,
                    "rawdescription": "\n\n字段名称\n"
                },
                {
                    "name": "nzAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\" | \"center\"",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "nzBreakWord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "nzColumnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "nzCustomFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "nzDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "nzEllipsis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "nzExpandChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "nzFilterChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T | []>",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "nzFilterFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzTableFilterFn<T> | boolean",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "nzFilterMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "nzFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "nzIndentSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "nzIndeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "nzSelections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "nzShowCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "nzShowFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "nzShowRowSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "nzShowSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "nzSortDirections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzTableSortOrder[]",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "nzSortFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzTableSortFn<T> | boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "nzSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzTableSortOrder",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "nzSortOrderChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "nzSortPriority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "nzWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "settingDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "<p>是否禁用</p>\n",
                    "line": 103,
                    "rawdescription": "\n\n是否禁用\n"
                },
                {
                    "name": "settingText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>在设置中列显示的文本,如果为空 则使用thText</p>\n",
                    "line": 95,
                    "rawdescription": "\n\n在设置中列显示的文本,如果为空 则使用thText\n"
                },
                {
                    "name": "settingVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "<p> 在设置中是否显示该列</p>\n",
                    "line": 99,
                    "rawdescription": "\n\n 在设置中是否显示该列\n"
                },
                {
                    "name": "showExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "<p>是否显示展开</p>\n",
                    "line": 86,
                    "rawdescription": "\n\n是否显示展开\n"
                },
                {
                    "name": "tdAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\" | \"center\"",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "tdCheckedChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "tdClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxClassType | ",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tdNgClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxClassType | ",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tdNgStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxStyleType | ",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tdStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxStyleType | ",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tdTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<T>",
                    "optional": true,
                    "description": "<p>td自定义渲染模版, string</p>\n",
                    "line": 20,
                    "rawdescription": "\n\ntd自定义渲染模版, string\n"
                },
                {
                    "name": "thCheckedChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "thNgClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxClassType | ",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "thNgStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxStyleType | ",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "thTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<T>",
                    "optional": true,
                    "description": "<p>th内容自定义, 不包含th标签本身</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nth内容自定义, 不包含th标签本身\n"
                },
                {
                    "name": "thText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "<p>是否显示列</p>\n",
                    "line": 90,
                    "rawdescription": "\n\n是否显示列\n"
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "NzSafeAny",
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "PageInfo",
            "id": "interface-PageInfo-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 205
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>修正后的当前页码</p>\n",
                    "line": 209,
                    "rawdescription": "\n\n修正后的当前页码\n"
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 204
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>分页信息</p>\n",
            "rawdescription": "\n\n分页信息\n",
            "methods": []
        },
        {
            "name": "ResponseModel",
            "id": "interface-ResponseModel-680ab031012390456d98af9e7f62a6723cdacbb90ac05f8995f40f11f7f0bbdc25005d25e8c57d52b0bc3b3583e7f75687404fb658612495c239bae271de3004",
            "file": "lib/http-interceptor/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n/**\r\n * 服务端响应实体, 可以通过设置 http请求参数\r\n * {observe: 'response'} 拿到完整数据\r\n */\r\nexport interface ResponseModel<T = NzSafeAny> {\r\n  /**\r\n   * 服务端返回编码\r\n   */\r\n  code?: number;\r\n  message?: string;\r\n  data?: T;\r\n}\r\n\r\n/**\r\n * http 请求出错后，在中间件中封闭为统一的格式。\r\n */\r\nexport class HttpError<T = NzSafeAny> {\r\n  /**\r\n   *\r\n   * @param httpError 是否是HTTP原始异常\r\n   * @param code 错误码, 如果是HTTP原始异常,则为status code\r\n   * @param message 错误消息\r\n   * @param body 返回数据\r\n   */\r\n  constructor(public httpError: boolean, public code: number, public message: string, public body: T) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>服务端返回编码</p>\n",
                    "line": 11,
                    "rawdescription": "\n\n服务端返回编码\n"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>服务端响应实体, 可以通过设置 http请求参数\n{observe: &#39;response&#39;} 拿到完整数据</p>\n",
            "rawdescription": "\n\n服务端响应实体, 可以通过设置 http请求参数\n{observe: 'response'} 拿到完整数据\n",
            "methods": []
        },
        {
            "name": "ResponseSetting",
            "id": "interface-ResponseSetting-bf07863577c78bf61eddbd69ddf04ec445963ab2c47b8167ba90dd3f81f103f8cce184d59416fc42efda64c75d17e6ff2e5ec4aa531b43e9a04262d153680cce",
            "file": "lib/nzx-antd.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpContext, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NzxAntdService {\r\n  /**\r\n   * 默认请求数据类型, 默认 json\r\n   */\r\n  contentType?: 'form' | 'json';\r\n  /**\r\n   * 请求的根路径,例如/context\r\n   */\r\n  basePath?: string;\r\n  /**\r\n   * 响应的数据配置\r\n   */\r\n  response?: ResponseSetting;\r\n  /**\r\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\r\n   */\r\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\r\n\r\n  /**\r\n   * 是否有权限\r\n   */\r\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\r\n  /**\r\n   * 权限变更, 通常切换用户时需要\r\n   */\r\n  authChange?: () => Observable<void>;\r\n\r\n  /**\r\n   * 无权限时跳转路径\r\n   */\r\n  noAuthUrl?: string;\r\n\r\n  /**\r\n   * 表格分页配置\r\n   */\r\n  table?: TableSetting;\r\n  constructor() {}\r\n}\r\n\r\n/**\r\n * 默认配置\r\n */\r\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n};\r\n\r\n/**\r\n * 响应配置\r\n */\r\nexport interface ResponseSetting {\r\n  /**\r\n   * code字段名称, 支持路径属性\r\n   */\r\n  code?: string;\r\n  /**\r\n   * message字段名称, 支持路径属性\r\n   */\r\n  message?: string;\r\n  /**\r\n   * data字段名称, 支持路径属性\r\n   */\r\n  data?: string;\r\n  /**\r\n   * 是否请求成功\r\n   * @param body 响应对象\r\n   */\r\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\r\n  /**\r\n   * 是否需要默认错误的错误\r\n   * @param error 错误信息\r\n   */\r\n  defaultError?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否登录超时\r\n   * @param error 错误信息\r\n   */\r\n  timeout?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否强制退出登录, 比如强制下线\r\n   * @param error 错误信息\r\n   */\r\n  forceLogout?: (error: HttpErrorBean) => boolean;\r\n}\r\n\r\n/**\r\n * 表格配置\r\n */\r\nexport interface TableSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 分页大小\r\n   */\r\n  nzPageSize?: number;\r\n}\r\n\r\n/**\r\n * 请求公共配置\r\n */\r\nexport interface HttpRequestOptions {\r\n  context?: HttpContext;\r\n  reportProgress?: boolean;\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  withCredentials?: boolean;\r\n  body?: NzSafeAny | null;\r\n  method?: string;\r\n  url?: string;\r\n  setHeaders?: Record<string, NzSafeAny>;\r\n  setParams?: Record<string, NzSafeAny>;\r\n}\r\n\r\nexport interface HttpErrorBean<T = NzSafeAny> {\r\n  httpError: boolean;\r\n  code: number;\r\n  message: string;\r\n  body: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>code字段名称, 支持路径属性</p>\n",
                    "line": 70,
                    "rawdescription": "\n\ncode字段名称, 支持路径属性\n"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>data字段名称, 支持路径属性</p>\n",
                    "line": 78,
                    "rawdescription": "\n\ndata字段名称, 支持路径属性\n"
                },
                {
                    "name": "defaultError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>是否需要默认错误的错误</p>\n",
                    "line": 88,
                    "rawdescription": "\n\n是否需要默认错误的错误\n",
                    "jsdoctags": [
                        {
                            "pos": 1714,
                            "end": 1736,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1715,
                                "end": 1720,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n",
                            "name": {
                                "pos": 1721,
                                "end": 1726,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "forceLogout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>是否强制退出登录, 比如强制下线</p>\n",
                    "line": 98,
                    "rawdescription": "\n\n是否强制退出登录, 比如强制下线\n",
                    "jsdoctags": [
                        {
                            "pos": 1927,
                            "end": 1949,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1928,
                                "end": 1933,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n",
                            "name": {
                                "pos": 1934,
                                "end": 1939,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>message字段名称, 支持路径属性</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nmessage字段名称, 支持路径属性\n"
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>是否请求成功</p>\n",
                    "line": 83,
                    "rawdescription": "\n\n是否请求成功\n",
                    "jsdoctags": [
                        {
                            "pos": 1598,
                            "end": 1619,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1599,
                                "end": 1604,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>响应对象</p>\n",
                            "name": {
                                "pos": 1605,
                                "end": 1609,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "body"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>是否登录超时</p>\n",
                    "line": 93,
                    "rawdescription": "\n\n是否登录超时\n",
                    "jsdoctags": [
                        {
                            "pos": 1818,
                            "end": 1840,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1819,
                                "end": 1824,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n",
                            "name": {
                                "pos": 1825,
                                "end": 1830,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>响应配置</p>\n",
            "rawdescription": "\n\n响应配置\n",
            "methods": []
        },
        {
            "name": "RowEventArg",
            "id": "interface-RowEventArg-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "rowIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IndexAttr",
                    "optional": false,
                    "description": "",
                    "line": 136
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterResult",
            "id": "interface-SorterResult-1830359e6ae3eba468b4a8fd4cc437876cd969932a74498a614373e54fa8a768173fd156cb01717911215622d3437053756ad7fed0a2a9e03b1eabeaedcc6c42",
            "file": "lib/table/table.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTableFilterFn, NzTableSortFn, NzTableSortOrder } from 'ng-zorro-antd/table';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NzxColumn<T = Record<string, NzSafeAny>> {\r\n  thText?: string;\r\n  /**\r\n   * th内容自定义, 不包含th标签本身\r\n   */\r\n  thTemplate?: string | TemplateRef<T>;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  name?: string;\r\n  /**\r\n   * td自定义渲染模版, string\r\n   */\r\n  tdTemplate?: string | TemplateRef<T>;\r\n  /**\r\n   * 是否为序号\r\n   */\r\n  isIndex?: boolean;\r\n  /**\r\n   * 格式化列数据\r\n   * @param data 当前字段数据\r\n   * @param row 行数据\r\n   * @param index 行索引\r\n   */\r\n  format?: (data: NzSafeAny, row: T, index: number) => Observable<NzSafeAny> | Promise<NzSafeAny> | NzSafeAny;\r\n  thNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  thNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdNgClass?: NzxClassType | ((col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdNgStyle?: NzxStyleType | ((col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n  tdClassName?: NzxClassType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxClassType);\r\n  tdStyle?: NzxStyleType | ((row: T, rowIndex: number, col: NzxColumn<T>, colIndex: number) => NzxStyleType);\r\n\r\n  /**\r\n   * 用于分组表头\r\n   */\r\n  children?: NzxColumn<T>[];\r\n\r\n  /**\r\n   * nzShowCheckbox为true, 默认启用enableCheckAll\r\n   */\r\n  enableCheckAll?: boolean;\r\n  nzShowCheckbox?: boolean;\r\n  nzDisabled?: boolean;\r\n  nzIndeterminate?: boolean;\r\n  checked?: boolean;\r\n  thCheckedChange?: (value: boolean, col: NzxColumn<T>) => void;\r\n  tdCheckedChange?: (value: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzShowRowSelection?: boolean;\r\n  nzSelections?: Array<{\r\n    text: string;\r\n    onSelect(...args: NzSafeAny[]): NzSafeAny;\r\n  }>;\r\n  nzShowSort?: boolean;\r\n  nzSortPriority?: boolean;\r\n  nzSortFn?: NzTableSortFn<T> | boolean | null;\r\n  nzSortDirections?: NzTableSortOrder[];\r\n  nzSortOrder?: NzTableSortOrder;\r\n  nzSortOrderChange?: (value: NzTableSortOrder, col: NzxColumn<T>) => void;\r\n  nzColumnKey?: string;\r\n\r\n  nzShowFilter?: boolean;\r\n  nzCustomFilter?: boolean;\r\n  nzFilterFn?: NzTableFilterFn<T> | boolean;\r\n  nzFilterMultiple?: boolean;\r\n  nzFilters?: Array<{ text: string; value: NzSafeAny; byDefault?: boolean }>;\r\n  nzFilterChange?: Array<T | T[]>;\r\n\r\n  nzWidth?: string | null;\r\n  nzAlign?: 'left' | 'right' | 'center';\r\n  tdAlign?: 'left' | 'right' | 'center';\r\n  nzBreakWord?: boolean;\r\n  nzEllipsis?: boolean;\r\n  nzExpandChange?: (expand: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) => void;\r\n  nzIndentSize?: number;\r\n\r\n  fixed?: 'left' | 'right';\r\n  /**\r\n   * 是否显示展开\r\n   */\r\n  showExpand?: boolean | null;\r\n  /**\r\n   * 是否显示列\r\n   */\r\n  visible?: boolean | null;\r\n  // column setting\r\n  /**\r\n   * 在设置中列显示的文本,如果为空 则使用thText\r\n   */\r\n  settingText?: string;\r\n  /**\r\n   *  在设置中是否显示该列\r\n   */\r\n  settingVisible?: boolean | null;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  settingDisabled?: boolean | null;\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport interface IndexAttr {\r\n  /**\r\n   * 当前条目的索引\r\n   */\r\n  readonly index: number;\r\n  /**\r\n   * 是否为第一条\r\n   */\r\n  readonly first: boolean;\r\n  /**\r\n   * 是否最后一条\r\n   */\r\n  readonly last: boolean;\r\n  /**\r\n   * 索引是否为偶数\r\n   */\r\n  readonly even: boolean;\r\n  /**\r\n   * 索引是否为奇数\r\n   */\r\n  readonly odd: boolean;\r\n}\r\n\r\nexport type NzxStyleType = { [klass: string]: NzSafeAny } | null;\r\nexport type NzxClassType = string | string[] | Set<string> | { [klass: string]: NzSafeAny };\r\n\r\nexport interface RowEventArg<T> {\r\n  row: T;\r\n  event: MouseEvent;\r\n  rowIndex: IndexAttr;\r\n}\r\n\r\nexport interface CellEventArg<T> extends RowEventArg<T> {\r\n  column: NzxColumn;\r\n  columnIndex: IndexAttr;\r\n}\r\n\r\nexport interface HeaderEventArg {\r\n  column: NzxColumn;\r\n  event: MouseEvent;\r\n}\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n}\r\n\r\n/**\r\n * 排序\r\n */\r\nexport interface SorterResult {\r\n  column?: NzxColumn;\r\n  order: NzTableSortOrder;\r\n  field: string;\r\n}\r\n\r\n/**\r\n * 合并单元格参数类型\r\n */\r\nexport type CellSpanType<T> = (arg: CellSpanArgType<T>) => { rowspan: number; colspan: number } | null | void;\r\n\r\nexport type CellSpanArgType<T> = {\r\n  row: T;\r\n  column: NzxColumn<T>;\r\n  rowIndex: number;\r\n  columnIndex: number;\r\n};\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface PageInfo<T> {\r\n  total: number;\r\n  list: T[];\r\n  /**\r\n   * 修正后的当前页码\r\n   */\r\n  pageIndex?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn",
                    "optional": true,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzTableSortOrder",
                    "optional": false,
                    "description": "",
                    "line": 184
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>排序</p>\n",
            "rawdescription": "\n\n排序\n",
            "methods": []
        },
        {
            "name": "TableSetting",
            "id": "interface-TableSetting-bf07863577c78bf61eddbd69ddf04ec445963ab2c47b8167ba90dd3f81f103f8cce184d59416fc42efda64c75d17e6ff2e5ec4aa531b43e9a04262d153680cce",
            "file": "lib/nzx-antd.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpContext, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NzxAntdService {\r\n  /**\r\n   * 默认请求数据类型, 默认 json\r\n   */\r\n  contentType?: 'form' | 'json';\r\n  /**\r\n   * 请求的根路径,例如/context\r\n   */\r\n  basePath?: string;\r\n  /**\r\n   * 响应的数据配置\r\n   */\r\n  response?: ResponseSetting;\r\n  /**\r\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\r\n   */\r\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\r\n\r\n  /**\r\n   * 是否有权限\r\n   */\r\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\r\n  /**\r\n   * 权限变更, 通常切换用户时需要\r\n   */\r\n  authChange?: () => Observable<void>;\r\n\r\n  /**\r\n   * 无权限时跳转路径\r\n   */\r\n  noAuthUrl?: string;\r\n\r\n  /**\r\n   * 表格分页配置\r\n   */\r\n  table?: TableSetting;\r\n  constructor() {}\r\n}\r\n\r\n/**\r\n * 默认配置\r\n */\r\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n};\r\n\r\n/**\r\n * 响应配置\r\n */\r\nexport interface ResponseSetting {\r\n  /**\r\n   * code字段名称, 支持路径属性\r\n   */\r\n  code?: string;\r\n  /**\r\n   * message字段名称, 支持路径属性\r\n   */\r\n  message?: string;\r\n  /**\r\n   * data字段名称, 支持路径属性\r\n   */\r\n  data?: string;\r\n  /**\r\n   * 是否请求成功\r\n   * @param body 响应对象\r\n   */\r\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\r\n  /**\r\n   * 是否需要默认错误的错误\r\n   * @param error 错误信息\r\n   */\r\n  defaultError?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否登录超时\r\n   * @param error 错误信息\r\n   */\r\n  timeout?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否强制退出登录, 比如强制下线\r\n   * @param error 错误信息\r\n   */\r\n  forceLogout?: (error: HttpErrorBean) => boolean;\r\n}\r\n\r\n/**\r\n * 表格配置\r\n */\r\nexport interface TableSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 分页大小\r\n   */\r\n  nzPageSize?: number;\r\n}\r\n\r\n/**\r\n * 请求公共配置\r\n */\r\nexport interface HttpRequestOptions {\r\n  context?: HttpContext;\r\n  reportProgress?: boolean;\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  withCredentials?: boolean;\r\n  body?: NzSafeAny | null;\r\n  method?: string;\r\n  url?: string;\r\n  setHeaders?: Record<string, NzSafeAny>;\r\n  setParams?: Record<string, NzSafeAny>;\r\n}\r\n\r\nexport interface HttpErrorBean<T = NzSafeAny> {\r\n  httpError: boolean;\r\n  code: number;\r\n  message: string;\r\n  body: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "listField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求结果列表字段  支持 a.b.c</p>\n",
                    "line": 116,
                    "rawdescription": "\n\n请求结果列表字段  支持 a.b.c\n"
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求方式</p>\n",
                    "line": 124,
                    "rawdescription": "\n\n请求方式\n"
                },
                {
                    "name": "nzPageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>分页大小</p>\n",
                    "line": 132,
                    "rawdescription": "\n\n分页大小\n"
                },
                {
                    "name": "pageIndexField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求接口当前页数</p>\n",
                    "line": 108,
                    "rawdescription": "\n\n请求接口当前页数\n"
                },
                {
                    "name": "pageSizeField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>每页显示多少条</p>\n",
                    "line": 112,
                    "rawdescription": "\n\n每页显示多少条\n"
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "optional": true,
                    "description": "<p> 相应类型</p>\n",
                    "line": 128,
                    "rawdescription": "\n\n 相应类型\n"
                },
                {
                    "name": "totalField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求结果总数字段  支持 a.b.c</p>\n",
                    "line": 120,
                    "rawdescription": "\n\n请求结果总数字段  支持 a.b.c\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>表格配置</p>\n",
            "rawdescription": "\n\n表格配置\n",
            "methods": []
        },
        {
            "name": "TreeNode",
            "id": "interface-TreeNode-dd93b9b6c9544ce52da04cd7d9cf61b9924f5d8b77b9b228de9130dae7dee91dd931d6f825d18f99f938d217db23f5fa9b3f2c8dd7628abbb0d22e8e5fcb9f23",
            "file": "lib/util/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { isNil } from 'ng-zorro-antd/core/util';\r\nimport { Observable } from 'rxjs';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\nconst toStr = Object.prototype.toString;\r\nconst hasOwn = Object.prototype.hasOwnProperty;\r\nconst defineProperty = Object.defineProperty;\r\nconst gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nclass UtilsClass {\r\n  assign = this.extend;\r\n\r\n  defaultIfy<T = NzSafeAny>(obj: T, defaultValue: NzSafeAny) {\r\n    return isNil(obj) ? defaultValue : obj;\r\n  }\r\n\r\n  /**\r\n   * 根据属性路径获取对象的属性值\r\n   * @param obj 原始对象\r\n   * @param path 属性路径\r\n   * @param defaultValue 当属性不存在或为undefined返回defaultValue\r\n   */\r\n  get(obj: NzSafeAny, path?: string | string[], defaultValue?: NzSafeAny) {\r\n    if (!obj || path == null || path.length === 0) {\r\n      return defaultValue;\r\n    }\r\n    if (!Array.isArray(path)) {\r\n      path = path.indexOf('.') ? path.split('.') : [path];\r\n    }\r\n    if (path.length === 1) {\r\n      const checkObj = obj[path[0]];\r\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\r\n    }\r\n    return path.reduce((o, k) => (o || {})[k], obj) || defaultValue;\r\n  }\r\n\r\n  trim(string: string) {\r\n    return (string || '').replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '');\r\n  }\r\n\r\n  /**\r\n   * 获取唯一Id号\r\n   */\r\n  getUUID() {\r\n    return Date.now() + Math.random().toString().replace('0.', '');\r\n  }\r\n\r\n  /**\r\n   * 深度clone\r\n   * @param target\r\n   */\r\n  clone<T = NzSafeAny>(target: T): T {\r\n    const _target = Utils.isArray(target) ? [] : {};\r\n    return this.extend(_target as T, target);\r\n  }\r\n\r\n  // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\r\n  private setProperty<T = NzSafeAny>(target: T, options: { name: string; newValue: NzSafeAny }) {\r\n    if (defineProperty && options.name === '__proto__') {\r\n      defineProperty(target, options.name, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        value: options.newValue,\r\n        writable: true\r\n      });\r\n    } else {\r\n      // @ts-ignore\r\n      target[options.name] = options.newValue;\r\n    }\r\n  }\r\n\r\n  // Return undefined instead of __proto__ if '__proto__' is not an own property\r\n  private getProperty<T = NzSafeAny>(obj: T, name: string) {\r\n    if (name === '__proto__') {\r\n      if (!hasOwn.call(obj, name)) {\r\n        return void 0;\r\n      } else if (gOPD) {\r\n        // @ts-ignore\r\n        return gOPD(obj, name).value;\r\n      }\r\n    }\r\n    // @ts-ignore\r\n    return obj[name];\r\n  }\r\n\r\n  /**\r\n   * 继承\r\n   * @param target\r\n   * @param args\r\n   */\r\n  extend<T = NzSafeAny>(target: T, ...args: NzSafeAny[]): T {\r\n    let copyIsArray, clone;\r\n\r\n    for (const options of args) {\r\n      if (options == null) {\r\n        continue;\r\n      }\r\n\r\n      for (const name in options) {\r\n        const src = this.getProperty(target, name);\r\n        const copy = this.getProperty(options, name);\r\n        if (target === copy || copy === undefined) {\r\n          continue;\r\n        }\r\n\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (Utils.isPlainObject(copy) || (copyIsArray = Utils.isArray(copy))) {\r\n          if (copyIsArray) {\r\n            copyIsArray = false;\r\n            clone = src && Utils.isArray(src) ? src : [];\r\n          } else {\r\n            clone = src && Utils.isPlainObject(src) ? src : {};\r\n          }\r\n\r\n          this.setProperty(target, { name, newValue: this.extend(clone, copy) });\r\n        } else {\r\n          this.setProperty(target, { name, newValue: copy });\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 根据开始和结束数字返回一个数组\r\n   * @param start 起始数字\r\n   * @param end 结束数字\r\n   * @param fill 填充内容,默认\r\n   */\r\n  range<T = NzSafeAny>(start: number, end: number, fill?: ((num: number, index: number) => T) | T): T[] {\r\n    const list: T[] = [];\r\n    const fn = fill == null ? (i: number) => i as unknown as T : this.isFunction(fill) ? fill : () => fill;\r\n    let index = 0;\r\n    for (let i = start; i < end; i++) {\r\n      list.push(fn(i, index++));\r\n    }\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * 遍历树结构\r\n   * @param treeNodes TreeNode[]\r\n   * @param accept 函数返回false即结束遍历, true或者undefined将继续遍历\r\n   * @param childrenName 子节点字段名称\r\n   */\r\n  forEachTree<T extends TreeNode>(\r\n    treeNodes: T[],\r\n    accept: (node: T, parentNode: T | undefined, level: number) => boolean | void,\r\n    childrenName: keyof T | TreeChildren<T> = 'children'\r\n  ): void {\r\n    if (!treeNodes || !treeNodes.length) {\r\n      return;\r\n    }\r\n\r\n    const getChildren =\r\n      typeof childrenName === 'string' ? (node: T) => node[childrenName] : (childrenName as TreeChildren<T>);\r\n\r\n    let stack: T[] = [];\r\n    const parents: T[] = [];\r\n    let level = 0;\r\n    let count = 0;\r\n\r\n    for (const t of treeNodes) {\r\n      stack = [t];\r\n      parents.length = 0;\r\n      level = 0;\r\n      count = 0;\r\n\r\n      while (stack.length) {\r\n        const item = stack.shift()!;\r\n        if (item == null) {\r\n          continue;\r\n        }\r\n\r\n        const parent = parents[level - 1];\r\n        if (accept(item, parent, level) === false) {\r\n          return;\r\n        }\r\n\r\n        const children = getChildren(item, parent, level);\r\n        if (children && children.length) {\r\n          stack = stack.concat(children);\r\n          parents.push(item);\r\n          count = children.length;\r\n          level++;\r\n        } else if (!--count) {\r\n          level--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 过滤树, 生成新的树结构\r\n   * @param treeNodes 树结构\r\n   * @param predicate 过滤函数\r\n   * @param childrenName 子节点名称,默认 'children'\r\n   */\r\n  filterTree<T extends TreeNode>(\r\n    treeNodes: T[],\r\n    predicate: (node: T) => boolean,\r\n    childrenName: keyof T = 'children'\r\n  ): T[] {\r\n    const filter = (list: T[], children: T[]) => {\r\n      for (const node of list) {\r\n        const newNode: T = { ...node, [childrenName]: [] };\r\n        if (node[childrenName]?.length) {\r\n          filter(node[childrenName], newNode[childrenName]);\r\n        }\r\n\r\n        if (predicate(newNode)) {\r\n          children.push(newNode);\r\n        }\r\n      }\r\n    };\r\n    const result: T[] = [];\r\n    filter(treeNodes, result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 列表转树结构\r\n   * @param list 列表数据\r\n   * @param idName id的属性名\r\n   * @param pidName parentId属性名\r\n   * @param childrenName children属性名\r\n   */\r\n  listToTree<T extends { pid?: string; id?: string; [key: string]: NzSafeAny }>(\r\n    list: T[],\r\n    idName: keyof T = 'id',\r\n    pidName: keyof T = 'pid',\r\n    childrenName: string = 'children'\r\n  ): T[] {\r\n    if (!list || !list.length) {\r\n      return [];\r\n    }\r\n    const nodeMap: { [key: string]: NzSafeAny } = {};\r\n    for (const node of list) {\r\n      nodeMap[node[idName]] = node;\r\n      // @ts-ignore\r\n      node[childrenName] = [];\r\n    }\r\n\r\n    const treeNodes: T[] = [];\r\n    for (const node of list) {\r\n      const pid = node[pidName];\r\n      const parent = nodeMap[node[pidName]];\r\n      if (pid && parent) {\r\n        parent[childrenName].push(node);\r\n      } else {\r\n        treeNodes.push(node);\r\n      }\r\n    }\r\n    return treeNodes;\r\n  }\r\n\r\n  /**\r\n   * 获取同步请求的响应结果\r\n   * @param observable\r\n   * @example\r\n   * const myObservable = this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)});\r\n   * const value = getAjaxValue(myObservable); // value为string类型\r\n   */\r\n  getAjaxValue<T = NzSafeAny>(observable: Observable<T>) {\r\n    let value!: T;\r\n    observable.subscribe(result => (value = result)).unsubscribe();\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 根据不同的参数类型 获取dom元素\r\n   * @param target\r\n   */\r\n  getElement(target: ElementRef | HTMLElement | string): HTMLElement | null {\r\n    if (!target) {\r\n      return null;\r\n    }\r\n\r\n    if (target instanceof HTMLElement) {\r\n      return target;\r\n    }\r\n\r\n    const eleRef = target as ElementRef;\r\n    if (eleRef.nativeElement) {\r\n      return eleRef.nativeElement;\r\n    }\r\n\r\n    if (typeof target === 'string') {\r\n      return document.querySelector(target);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 字符串模版函数\r\n   * @param template 模版\r\n   * @param data 数据\r\n   * @return 返回渲染后的Html\r\n   * @example\r\n   * Utils.format('{s.0.name}', { s: [{name: 111}] }) => 111\r\n   */\r\n  format(template: string | null, data?: Record<string, NzSafeAny>): string {\r\n    if (template == null || !data) {\r\n      return template || '';\r\n    }\r\n    return template.replace(/\\{([\\w\\.]*)\\}/g, (str, key) => {\r\n      const path = key.split('.');\r\n      let v = data[path.shift()];\r\n      for (let i = 0, size = path.length; i < size && v !== null; i++) {\r\n        v = v[path[i]];\r\n      }\r\n      return v == null ? '' : v.toString();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 对Date的扩展，将 Date 转化为指定格式的String\r\n   * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\r\n   * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\r\n   * eg:\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss.S') ==> 2006-07-02 08:09:04.423\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd 星期E HH:mm:ss') ==> 2009-03-10 星期二 20:09:04\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd 星期e hh:mm:ss') ==> 2009-03-10 星期2 08:09:04\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd 第w周 hh:mm:ss') ==> 2009-03-10 第2周 08:09:04\r\n   * NeKit.formatDate(new Date(), 'yyyy-M-d h:m:s.S') ==> 2006-7-2 8:9:4.18\r\n   */\r\n  formatDate(srcDate: Date, fmt: string) {\r\n    if (!srcDate) {\r\n      return '';\r\n    }\r\n    const week = {\r\n      0: '\\u65e5',\r\n      1: '\\u4e00',\r\n      2: '\\u4e8c',\r\n      3: '\\u4e09',\r\n      4: '\\u56db',\r\n      5: '\\u4e94',\r\n      6: '\\u516d'\r\n    };\r\n\r\n    const o = {\r\n      'M+': srcDate.getMonth() + 1,\r\n      'd+': srcDate.getDate(),\r\n      'h+': srcDate.getHours() % 12 === 0 ? 12 : srcDate.getHours() % 12,\r\n      'H+': srcDate.getHours(),\r\n      'm+': srcDate.getMinutes(),\r\n      's+': srcDate.getSeconds(),\r\n      'q+': Math.floor((srcDate.getMonth() + 3) / 3),\r\n      'S+': srcDate.getMilliseconds(),\r\n      'e+': srcDate.getDay(),\r\n      // @ts-ignore\r\n      E: week[srcDate.getDay()],\r\n      'w+': (date => {\r\n        const date2 = new Date(date.getFullYear(), 0, 1);\r\n        const day = (date2.getDay() ? date2.getDay() : 7) - (date.getDay() ? date.getDay() : 7);\r\n        return Math.ceil(Math.round((date.getTime() - date2.getTime() + day * (24 * 3600000)) / 86400000) / 7) + 1;\r\n      })(srcDate)\r\n    };\r\n    if (/(y+)/.test(fmt)) {\r\n      fmt = fmt.replace(RegExp.$1, (srcDate.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n    }\r\n    for (const k in o) {\r\n      if (new RegExp('(' + k + ')').test(fmt)) {\r\n        // @ts-ignore\r\n        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\r\n      }\r\n    }\r\n    return fmt;\r\n  }\r\n\r\n  is(val: unknown, type: string) {\r\n    return toStr.call(val) === `[object ${type}]`;\r\n  }\r\n\r\n  isDef<T = unknown>(val?: T): val is T {\r\n    return typeof val !== 'undefined';\r\n  }\r\n\r\n  isUnDef<T = unknown>(val?: T): val is T {\r\n    return !this.isDef(val);\r\n  }\r\n\r\n  isObject(val: NzSafeAny): val is Record<NzSafeAny, NzSafeAny> {\r\n    return val !== null && this.is(val, 'Object');\r\n  }\r\n\r\n  isEmpty<T = unknown>(val: T): val is T {\r\n    // @ts-ignore\r\n    return val == null || val.length === 0;\r\n  }\r\n\r\n  isDate(val: unknown): val is Date {\r\n    return this.is(val, 'Date');\r\n  }\r\n\r\n  isNull(val: unknown): val is null {\r\n    return val === null;\r\n  }\r\n\r\n  isNil(val: unknown): val is null | undefined {\r\n    return this.isUnDef(val) && this.isNull(val);\r\n  }\r\n\r\n  isNotNil(val: unknown): val is null | undefined {\r\n    return !this.isNil(val);\r\n  }\r\n\r\n  isNumber(val: unknown): val is number {\r\n    return this.is(val, 'Number');\r\n  }\r\n\r\n  isPromise<T = NzSafeAny>(val: unknown): val is Promise<T> {\r\n    return this.is(val, 'Promise') || (this.isObject(val) && this.isFunction(val.then) && this.isFunction(val.catch));\r\n  }\r\n\r\n  isObservable(obj: NzSafeAny): obj is Observable<NzSafeAny> {\r\n    return obj instanceof Observable || (obj && typeof obj.subscribe === 'function');\r\n  }\r\n\r\n  isString(val: unknown): val is string {\r\n    return this.is(val, 'String');\r\n  }\r\n\r\n  isFunction(val: unknown): val is Function {\r\n    return typeof val === 'function';\r\n  }\r\n\r\n  isBoolean(val: unknown): val is boolean {\r\n    return this.is(val, 'Boolean');\r\n  }\r\n\r\n  isRegExp(val: unknown): val is RegExp {\r\n    return this.is(val, 'RegExp');\r\n  }\r\n\r\n  isArray(val: NzSafeAny): val is Array<NzSafeAny> {\r\n    if (typeof Array.isArray === 'function') {\r\n      return Array.isArray(val);\r\n    }\r\n    return toStr.call(val) === '[object Array]';\r\n  }\r\n\r\n  isWindow(val: NzSafeAny): val is Window {\r\n    return typeof window !== 'undefined' && this.is(val, 'Window');\r\n  }\r\n\r\n  isElement(val: unknown): val is Element {\r\n    return this.isObject(val) && !!val.tagName;\r\n  }\r\n\r\n  isMap(val: unknown): val is Map<NzSafeAny, NzSafeAny> {\r\n    return this.is(val, 'Map');\r\n  }\r\n\r\n  /**\r\n   * 是否为手机号（中国）\r\n   * @param value\r\n   */\r\n  isMobile(value: string): boolean {\r\n    return /^(0|\\\\+?86|17951)?1[0-9]{10}$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否IP4地址（支持v4、v6）\r\n   * @param ip\r\n   */\r\n  isIp(ip: string) {\r\n    return /^(?:^(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}$)|(?:^(?:(?:[a-fA-F\\\\d]{1,4}:){7}(?:[a-fA-F\\\\d]{1,4}|:)|(?:[a-fA-F\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|:[a-fA-F\\\\d]{1,4}|:)|(?:[a-fA-F\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)$/.test(\r\n      ip\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否是url\r\n   * @param path\r\n   */\r\n  isUrl(path: string): boolean {\r\n    return /(((^https?:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/.test(\r\n      path\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否中文\r\n   * @param value 测试字符串\r\n   */\r\n  isChinese(value: string): boolean {\r\n    return /^[\\u4e00-\\u9fa5]+$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否为数值\r\n   * @param value\r\n   * @param minus 是否允许负数\r\n   * @param fraction 最大保留小数位数\r\n   */\r\n  isNum(value: string, minus?: boolean, fraction?: number): boolean {\r\n    const regex =\r\n      (minus ? '^-?' : '^') +\r\n      `(([1-9]{1}\\\\d*)|(0{1}))` +\r\n      (fraction && fraction > 0 ? `(\\\\.\\\\d{1,${fraction}})?$` : '$');\r\n    return new RegExp(regex).test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否为邮箱\r\n   * @param value\r\n   */\r\n  isEmail(value: string) {\r\n    return /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否是纯对象值\r\n   * @param obj\r\n   */\r\n  isPlainObject<T = NzSafeAny>(obj: T) {\r\n    if (!obj || toStr.call(obj) !== '[object Object]') {\r\n      return false;\r\n    }\r\n\r\n    const hasOwnConstructor = hasOwn.call(obj, 'constructor');\r\n    const hasIsPrototypeOf =\r\n      // @ts-ignore\r\n      obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\r\n    // @ts-ignore\r\n    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n      return false;\r\n    }\r\n\r\n    let key;\r\n    for (key in obj) {\r\n      /**/\r\n    }\r\n\r\n    return typeof key === 'undefined' || hasOwn.call(obj, key);\r\n  }\r\n\r\n  /**\r\n   * 转换为日期\r\n   * @param date 待转换的值\r\n   */\r\n  toDate(date?: Date | string | number): Date | null {\r\n    if (date == null) {\r\n      return null;\r\n    }\r\n    if (this.isDate(date)) {\r\n      return date;\r\n    }\r\n    if (this.isNumber(date)) {\r\n      return new Date(date);\r\n    }\r\n    if (this.isString(date)) {\r\n      const value = Date.parse(date);\r\n      if (isNaN(value)) {\r\n        const match = date.match(/\\d+/g);\r\n        if (match) {\r\n          // @ts-ignore\r\n          return new Date(...match);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 合并对象到FormData\r\n   * @param obj 要合并的对象\r\n   * @param {FormData} form 表单\r\n   */\r\n  mergeFormData<T>(form: FormData, obj: T): void {\r\n    const list = this.serializeParams(obj);\r\n    for (const it of list) {\r\n      form.append(it.key, it.value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 把js对象序列化对请求数据,格式为 a=av&b=bv...&n=nv\r\n   * @param obj\r\n   * @returns\r\n   */\r\n  serialize<T>(obj: T): string {\r\n    const list = this.serializeParams<T>(obj);\r\n    let query = '';\r\n    for (const it of list) {\r\n      query += encodeURIComponent(it.key) + '=' + encodeURIComponent(it.value) + '&';\r\n    }\r\n    return query === '' ? query : query.substr(0, query.length - 1);\r\n  }\r\n\r\n  /**\r\n   * 把js对象序列化对请求数据\r\n   * @param obj\r\n   * @returns\r\n   */\r\n  serializeParams<T>(obj: T): Record<string, NzSafeAny>[] {\r\n    if (!obj) {\r\n      return [];\r\n    }\r\n\r\n    const query: Record<string, NzSafeAny>[] = [];\r\n    this.buildParam(obj, query);\r\n    return query;\r\n  }\r\n\r\n  private buildParam<T extends Record<string, NzSafeAny>>(inObj: T, list: Record<string, NzSafeAny>[]) {\r\n    let value: NzSafeAny;\r\n    let subName: string;\r\n    let innerObj: Record<string, string>;\r\n    for (const name in inObj) {\r\n      value = inObj[name];\r\n      if (value instanceof Array) {\r\n        for (let i = 0; i < value.length; ++i) {\r\n          if (value[i] instanceof Array || value[i] instanceof Object) {\r\n            if (value[i].toJSON) {\r\n              list.push({ key: name, value: value[i].toJSON() });\r\n              continue;\r\n            }\r\n            innerObj = {};\r\n            innerObj[name + '[' + i + ']'] = value[i];\r\n            this.buildParam(innerObj, list);\r\n          } else if (value[i] !== undefined && value[i] !== null) {\r\n            list.push({ key: name, value: value[i] });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      if (value instanceof Object) {\r\n        if (value.toJSON) {\r\n          list.push({ key: name, value: value.toJSON() });\r\n          continue;\r\n        }\r\n\r\n        for (subName of Object.keys(value)) {\r\n          innerObj = {};\r\n          innerObj[name + '.' + subName] = value[subName];\r\n          this.buildParam(innerObj, list);\r\n        }\r\n        continue;\r\n      }\r\n      if (value !== undefined && value !== null) {\r\n        list.push({ key: name, value });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const Utils = new UtilsClass();\r\nexport interface TreeNode {\r\n  [key: string]: NzSafeAny;\r\n  children?: TreeNode[];\r\n}\r\n\r\nexport type TreeChildren<T = NzSafeAny> = (node: T, parentNode: T | null, level: number) => T[] | null;\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeNode[]",
                    "optional": true,
                    "description": "",
                    "line": 654
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-dd93b9b6c9544ce52da04cd7d9cf61b9924f5d8b77b9b228de9130dae7dee91dd931d6f825d18f99f938d217db23f5fa9b3f2c8dd7628abbb0d22e8e5fcb9f23",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "NzSafeAny",
                    "line": 652,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AsyncHttpXhrBackend",
            "id": "injectable-AsyncHttpXhrBackend-a636d8fb7eb47614b81128aa2676d365ef5db5782731392464ad0d55baf962453a4419afb52659ead87f338bf67c1d05e14d63ea3ca3a7852a5c72e850d3f06a",
            "file": "lib/http-interceptor/xhr.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handle",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<NzSafeAny>>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProcesses a request and returns a stream of response events.\n",
                    "description": "<p>Processes a request and returns a stream of response events.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1346,
                                "end": 1349,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "req"
                            },
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1340,
                                "end": 1345,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1377,
                                "end": 1384,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable of the response events.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>使用 <code>XMLHttpRequest</code> 发送请求和接收响应,支持同步/异步\nSee <code>HttpHandler</code>\nSee <code>JsonpClientBackend</code>\nSee synced\nSee SYNCED_ENABLED</p>\n",
            "rawdescription": "\n\n使用 `XMLHttpRequest` 发送请求和接收响应,支持同步/异步\nSee `HttpHandler`\nSee `JsonpClientBackend`\nSee synced\nSee SYNCED_ENABLED\n",
            "sourceCode": "import {\r\n  HttpBackend,\r\n  HttpDownloadProgressEvent,\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpEventType,\r\n  HttpHeaderResponse,\r\n  HttpHeaders,\r\n  HttpRequest,\r\n  HttpResponse,\r\n  HttpStatusCode,\r\n  HttpUploadProgressEvent\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { XhrFactory } from '@angular/common';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { SYNCED_ENABLED } from '@xmagic/nzx-antd/service';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\nconst XSSI_PREFIX = /^\\)]}',?\\n/;\r\n\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr: NzSafeAny): string | null {\r\n  if ('responseURL' in xhr && xhr.responseURL) {\r\n    return xhr.responseURL;\r\n  }\r\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n    return xhr.getResponseHeader('X-Request-URL');\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * 使用 `XMLHttpRequest` 发送请求和接收响应,支持同步/异步\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n * @see synced\r\n * @see SYNCED_ENABLED\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class AsyncHttpXhrBackend implements HttpBackend {\r\n  constructor(private xhrFactory: XhrFactory) {}\r\n\r\n  /**\r\n   * Processes a request and returns a stream of response events.\r\n   * @param req The request object.\r\n   * @returns An observable of the response events.\r\n   */\r\n  handle(req: HttpRequest<NzSafeAny>): Observable<HttpEvent<NzSafeAny>> {\r\n    // Quick check to give a better error message when a user attempts to use\r\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n    if (req.method === 'JSONP') {\r\n      throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\r\n    }\r\n\r\n    // Everything happens on Observable subscription.\r\n    return new Observable((observer: Observer<HttpEvent<NzSafeAny>>) => {\r\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n      const xhr = this.xhrFactory.build();\r\n      // 是否同步 添加同步/异步请求支持\r\n      let synced = req.context.get(SYNCED_ENABLED);\r\n      if (!synced) {\r\n        synced = req.urlWithParams.indexOf('synced=true') !== -1;\r\n      }\r\n      xhr.open(req.method, req.urlWithParams, !synced);\r\n      if (req.withCredentials) {\r\n        xhr.withCredentials = true;\r\n      }\r\n\r\n      // Add all the requested headers.\r\n      req.headers.keys().forEach(name => xhr.setRequestHeader(name, <string>req.headers.getAll(name)?.join?.(',')));\r\n\r\n      // Add an Accept header if one isn't present already.\r\n      if (!req.headers.has('Accept')) {\r\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n      }\r\n\r\n      // Auto-detect the Content-Type header if one isn't present already.\r\n      if (!req.headers.has('Content-Type')) {\r\n        const detectedType = req.detectContentTypeHeader();\r\n        // Sometimes Content-Type detection fails.\r\n        if (detectedType !== null) {\r\n          xhr.setRequestHeader('Content-Type', detectedType);\r\n        }\r\n      }\r\n\r\n      // Set the responseType if one was requested.\r\n      if (req.responseType && !synced) {\r\n        const responseType = req.responseType.toLowerCase();\r\n\r\n        // JSON responses need to be processed as text. This is because if the server\r\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n        // is parsed by first requesting text and then applying JSON.parse.\r\n        xhr.responseType = (responseType !== 'json' ? responseType : 'text') as NzSafeAny;\r\n      }\r\n\r\n      // Serialize the request body if one is present. If not, this will be set to null.\r\n      const reqBody = req.serializeBody();\r\n\r\n      // If progress events are enabled, response headers will be delivered\r\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n      // event. However, since response headers don't change in between these\r\n      // two events, it doesn't make sense to parse them twice. So headerResponse\r\n      // caches the data extracted from the response whenever it's first parsed,\r\n      // to ensure parsing isn't duplicated.\r\n      let headerResponse: HttpHeaderResponse | null = null;\r\n\r\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n      // state, and memoizes it into headerResponse.\r\n      const partialFromXhr = (): HttpHeaderResponse => {\r\n        if (headerResponse !== null) {\r\n          return headerResponse;\r\n        }\r\n\r\n        const statusText = xhr.statusText || 'OK';\r\n\r\n        // Parse headers from XMLHttpRequest - this step is lazy.\r\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n\r\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n        // request URL.\r\n        const url = getResponseUrl(xhr) || req.url;\r\n\r\n        // Construct the HttpHeaderResponse and memoize it.\r\n        headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\r\n        return headerResponse;\r\n      };\r\n\r\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n      // emit. This allows them to be unregistered as event listeners later.\r\n\r\n      // First up is the load event, which represents a response being fully available.\r\n      const onLoad = () => {\r\n        // Read response state from the memoized partial data.\r\n        const partXhr = partialFromXhr();\r\n        const { headers, statusText, url } = partXhr;\r\n        let status = partXhr.status;\r\n\r\n        // The body will be read out if present.\r\n        let body: NzSafeAny | null = null;\r\n\r\n        if (status !== HttpStatusCode.NoContent) {\r\n          // Use XMLHttpRequest.response if set, responseText otherwise.\r\n          body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\r\n        }\r\n\r\n        // Normalize another potential bug (this one comes from CORS).\r\n        if (status === 0) {\r\n          status = !!body ? HttpStatusCode.Ok : 0;\r\n        }\r\n\r\n        // ok determines whether the response will be transmitted on the event or\r\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n        // but a successful status code can still result in an error if the user\r\n        // asked for JSON data and the body cannot be parsed as such.\r\n        let ok = status >= 200 && status < 300;\r\n\r\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n        // will have done that already).\r\n        if (req.responseType === 'json' && typeof body === 'string') {\r\n          // Save the original body, before attempting XSSI prefix stripping.\r\n          const originalBody = body;\r\n          body = body.replace(XSSI_PREFIX, '');\r\n          try {\r\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n            body = body !== '' ? JSON.parse(body) : null;\r\n          } catch (error) {\r\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n            // a better error response.\r\n            body = originalBody;\r\n\r\n            // If this was an error request to begin with, leave it as a string, it probably\r\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n            if (ok) {\r\n              // Even though the response status was 2xx, this is still an error.\r\n              ok = false;\r\n              // The parse error contains the text of the body that failed to parse.\r\n              body = { error, text: body };\r\n            }\r\n          }\r\n        }\r\n\r\n        if (ok) {\r\n          // A successful response is delivered on the event stream.\r\n          observer.next(\r\n            new HttpResponse({\r\n              body,\r\n              headers,\r\n              status,\r\n              statusText,\r\n              url: url || undefined\r\n            })\r\n          );\r\n          // The full body has been received and delivered, no further events\r\n          // are possible. This request is complete.\r\n          observer.complete();\r\n        } else {\r\n          // An unsuccessful request is delivered on the error channel.\r\n          observer.error(\r\n            new HttpErrorResponse({\r\n              // The error in this case is the response body (error from the server).\r\n              error: body,\r\n              headers,\r\n              status,\r\n              statusText,\r\n              url: url || undefined\r\n            })\r\n          );\r\n        }\r\n      };\r\n\r\n      // The onError callback is called when something goes wrong at the network level.\r\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n      // transmitted on the error channel.\r\n      const onError = (error: ProgressEvent) => {\r\n        const { url } = partialFromXhr();\r\n        const res = new HttpErrorResponse({\r\n          error,\r\n          status: xhr.status || 0,\r\n          statusText: xhr.statusText || 'Unknown Error',\r\n          url: url || undefined\r\n        });\r\n        observer.error(res);\r\n      };\r\n\r\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n      // has been sent on the stream. This is necessary to track if progress\r\n      // is enabled since the event will be sent on only the first download\r\n      // progerss event.\r\n      let sentHeaders = false;\r\n\r\n      // The download progress event handler, which is only registered if\r\n      // progress events are enabled.\r\n      const onDownProgress = (event: ProgressEvent) => {\r\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n        if (!sentHeaders) {\r\n          observer.next(partialFromXhr());\r\n          sentHeaders = true;\r\n        }\r\n\r\n        // Start building the download progress event to deliver on the response\r\n        // event stream.\r\n        const progressEvent: HttpDownloadProgressEvent = {\r\n          type: HttpEventType.DownloadProgress,\r\n          loaded: event.loaded\r\n        };\r\n\r\n        // Set the total number of bytes in the event if it's available.\r\n        if (event.lengthComputable) {\r\n          progressEvent.total = event.total;\r\n        }\r\n\r\n        // If the request was for text content and a partial response is\r\n        // available on XMLHttpRequest, include it in the progress event\r\n        // to allow for streaming reads.\r\n        if (req.responseType === 'text' && !!xhr.responseText) {\r\n          progressEvent.partialText = xhr.responseText;\r\n        }\r\n\r\n        // Finally, fire the event.\r\n        observer.next(progressEvent);\r\n      };\r\n\r\n      // The upload progress event handler, which is only registered if\r\n      // progress events are enabled.\r\n      const onUpProgress = (event: ProgressEvent) => {\r\n        // Upload progress events are simpler. Begin building the progress\r\n        // event.\r\n        const progress: HttpUploadProgressEvent = {\r\n          type: HttpEventType.UploadProgress,\r\n          loaded: event.loaded\r\n        };\r\n\r\n        // If the total number of bytes being uploaded is available, include\r\n        // it.\r\n        if (event.lengthComputable) {\r\n          progress.total = event.total;\r\n        }\r\n\r\n        // Send the event.\r\n        observer.next(progress);\r\n      };\r\n\r\n      // By default, register for load and error events.\r\n      xhr.addEventListener('load', onLoad);\r\n      xhr.addEventListener('error', onError);\r\n      xhr.addEventListener('timeout', onError);\r\n      xhr.addEventListener('abort', onError);\r\n\r\n      // Progress events are only enabled if requested.\r\n      if (req.reportProgress) {\r\n        // Download progress is always enabled if requested.\r\n        xhr.addEventListener('progress', onDownProgress);\r\n\r\n        // Upload progress depends on whether there is a body to upload.\r\n        if (reqBody !== null && xhr.upload) {\r\n          xhr.upload.addEventListener('progress', onUpProgress);\r\n        }\r\n      }\r\n\r\n      // Fire the request, and notify the event stream that it was fired.\r\n      xhr.send(reqBody!);\r\n      observer.next({ type: HttpEventType.Sent });\r\n\r\n      // This is the return from the Observable function, which is the\r\n      // request cancellation handler.\r\n      return () => {\r\n        // On a cancellation, remove all registered event listeners.\r\n        xhr.removeEventListener('error', onError);\r\n        xhr.removeEventListener('abort', onError);\r\n        xhr.removeEventListener('load', onLoad);\r\n        xhr.removeEventListener('timeout', onError);\r\n        if (req.reportProgress) {\r\n          xhr.removeEventListener('progress', onDownProgress);\r\n          if (reqBody !== null && xhr.upload) {\r\n            xhr.upload.removeEventListener('progress', onUpProgress);\r\n          }\r\n        }\r\n\r\n        // Finally, abort the in-flight request.\r\n        if (xhr.readyState !== xhr.DONE) {\r\n          xhr.abort();\r\n        }\r\n      };\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "xhrFactory",
                        "type": "XhrFactory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "xhrFactory",
                        "type": "XhrFactory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DownloadService",
            "id": "injectable-DownloadService-2b0f83a6c10d09438c910de95b0010e164ff87d386615ab19e8f72b009d9385ff9e7b8b35708cf974793b2c88684465c64e5693f5573f152cc4c621ca65230cc",
            "file": "lib/service/download.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "download",
                    "args": [
                        {
                            "name": "options",
                            "type": "DownloadOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n下载文件\n",
                    "description": "<p>下载文件</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 367,
                                "end": 374,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "DownloadOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 361,
                                "end": 366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>下载文件配置信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFilename",
                    "args": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取文件名称\n",
                    "description": "<p>获取文件名称</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1749,
                                "end": 1756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "headers"
                            },
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1743,
                                "end": 1748,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1770,
                                "end": 1773,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1764,
                                "end": 1769,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "saveAs",
                    "args": [
                        {
                            "name": "body",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n文件另存为\n",
                    "description": "<p>文件另存为</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 978,
                                "end": 982,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "body"
                            },
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 972,
                                "end": 977,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>二进制内容</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1002,
                                "end": 1010,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "filename"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 996,
                                "end": 1001,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>文件名</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { FetcherService, FetchOptions } from './fetcher.service';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n@Injectable()\r\nexport class DownloadService {\r\n  constructor(protected fetcher: FetcherService) {}\r\n\r\n  /**\r\n   * 下载文件\r\n   * @param options 下载文件配置信息\r\n   */\r\n  download(options: DownloadOption) {\r\n    this.fetcher\r\n      .fetch<HttpResponse<Blob>>({ ...options, responseType: 'blob', observe: 'response' })\r\n      .subscribe(resp => {\r\n        const url = options.url;\r\n        const filename = this.getFilename(resp.headers, url);\r\n        if (options.afterDownload && options.afterDownload(resp, filename) === false) {\r\n          return;\r\n        }\r\n\r\n        this.saveAs(resp.body!, filename);\r\n        if (options.downloadDone) {\r\n          options.downloadDone(resp, filename);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 文件另存为\r\n   * @param body 二进制内容\r\n   * @param filename 文件名\r\n   */\r\n  saveAs(body: Blob, filename: string) {\r\n    if (typeof (window.navigator as NzSafeAny).msSaveBlob !== 'undefined') {\r\n      (window.navigator as NzSafeAny).msSaveBlob(body, filename);\r\n    }\r\n\r\n    const blobURL = window.URL.createObjectURL(body as Blob);\r\n    const tempLink = document.createElement('a');\r\n    tempLink.style.display = 'none';\r\n    tempLink.href = blobURL;\r\n    tempLink.setAttribute('download', filename);\r\n    if (typeof tempLink.download === 'undefined') {\r\n      tempLink.setAttribute('target', '_blank');\r\n    }\r\n    document.body.appendChild(tempLink);\r\n    tempLink.click();\r\n    document.body.removeChild(tempLink);\r\n    window.URL.revokeObjectURL(blobURL);\r\n  }\r\n\r\n  /**\r\n   * 获取文件名称\r\n   * @param headers\r\n   * @param url\r\n   * @protected\r\n   */\r\n  protected getFilename(headers: HttpHeaders, url: string): string {\r\n    const disposition = headers.get('content-disposition');\r\n    const filename = headers.get('filename');\r\n    if (filename) {\r\n      return decodeURIComponent(filename);\r\n    } else if (disposition) {\r\n      return disposition.split(';')[0].split('=')[1];\r\n    } else {\r\n      const start = url.lastIndexOf('/') + 1;\r\n      const endIndex = url.lastIndexOf('?');\r\n      const end = endIndex === -1 ? url.length : endIndex;\r\n      return url.substring(start, end);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 下载文件配置信息\r\n */\r\nexport type DownloadOption = Omit<FetchOptions, 'observe'> & {\r\n  /**\r\n   * 请求完成后的回调\r\n   * @param resp\r\n   * @param filename\r\n   */\r\n  afterDownload?: (resp: HttpResponse<Blob>, filename: string) => boolean | void;\r\n\r\n  /**\r\n   * 下载并保存完成的回调\r\n   * @param resp\r\n   * @param filename\r\n   */\r\n  downloadDone?: (resp: HttpResponse<Blob>, filename: string) => void;\r\n};\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fetcher",
                        "type": "FetcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "fetcher",
                        "type": "FetcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FetcherService",
            "id": "injectable-FetcherService-22e12300f3d945599a135b7a9609c0ca5212a863548b35c0c77561cf8e04b4ef5c079c5c6c0618324794b5344566ae697bf081b165155bc61c40c19af3dc5878",
            "file": "lib/service/fetcher.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "doFetch",
                    "args": [
                        {
                            "name": "options",
                            "type": "FetchOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n送请求\n",
                    "description": "<p>送请求</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2548,
                                "end": 2555,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "FetchOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2542,
                                "end": 2547,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>参数不包含函数不进行二次处理</p>\n"
                        }
                    ]
                },
                {
                    "name": "doFetchSync",
                    "args": [
                        {
                            "name": "options",
                            "type": "Omit<FetchOptions | async>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n同步请求, 参数不包含函数不进行二次处理\n",
                    "description": "<p>同步请求, 参数不包含函数不进行二次处理</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3437,
                                "end": 3444,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "Omit<FetchOptions | async>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3431,
                                "end": 3436,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "option",
                            "type": "FetchOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n发起请求, 参数可以是异步对象或函数\n",
                    "description": "<p>发起请求, 参数可以是异步对象或函数</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1994,
                                "end": 2000,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "option"
                            },
                            "type": "FetchOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1988,
                                "end": 1993,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>请求配置</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchSync",
                    "args": [
                        {
                            "name": "option",
                            "type": "Omit<FetchOptions | async>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n同步请求, 参数可以是异步对象或函数\n",
                    "description": "<p>同步请求, 参数可以是异步对象或函数</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2358,
                                "end": 2364,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "option"
                            },
                            "type": "Omit<FetchOptions | async>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2352,
                                "end": 2357,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>请求配置</p>\n"
                        }
                    ]
                },
                {
                    "name": "remoteValidate",
                    "args": [
                        {
                            "name": "options",
                            "type": "ValidatorOption<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n使用同步方式进行远程校验\n",
                    "description": "<p>使用同步方式进行远程校验</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3638,
                                "end": 3645,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "ValidatorOption<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3632,
                                "end": 3637,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "resolveParams",
                    "args": [
                        {
                            "name": "data",
                            "type": "FetchParams<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T | undefined>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n处理异步参数\n",
                    "description": "<p>处理异步参数</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1574,
                                "end": 1578,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "FetchParams<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1568,
                                "end": 1573,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>参数</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpContext, HttpContextToken } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\n/**\r\n * 模板字符串函数, 构造同步请求URL\r\n * @example\r\n * let value!: string;\r\n * this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\r\n * console.log(value);\r\n */\r\nexport function synced(url: TemplateStringsArray, ...keys: string[]): string {\r\n  const strings = [];\r\n  for (let i = 0; i < url.length; i++) {\r\n    strings.push(url.raw[i], keys[i] == null ? '' : keys[i]);\r\n  }\r\n  const result = strings.join('');\r\n  return result + (result.indexOf('?') === -1 ? '?' : '&') + 'synced=true';\r\n}\r\n\r\n/**\r\n * 启用同步请求\r\n * @example\r\n * let value!: string;\r\n * this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res => (value = res));\r\n * console.log(value);\r\n */\r\nexport const SYNCED_ENABLED = new HttpContextToken<boolean>(() => false);\r\n\r\n/**\r\n * 是否启用loading\r\n * @example\r\n * this.http.get<string>('url', { context: new HttpContext().set(LOADING_ENABLED, false).set(...)});\r\n */\r\nexport const LOADING_ENABLED = new HttpContextToken<boolean>(() => true);\r\n\r\n@Injectable()\r\nexport class FetcherService {\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  /**\r\n   * 处理异步参数\r\n   * @param data 参数\r\n   */\r\n  static resolveParams<T>(data?: FetchParams<T>): Observable<T | undefined> {\r\n    if (Utils.isFunction(data)) {\r\n      const result = data();\r\n      if (result instanceof Observable) {\r\n        return result;\r\n      }\r\n      return of(result as T);\r\n    }\r\n\r\n    if (data instanceof Observable) {\r\n      return data;\r\n    }\r\n    return of(data as T);\r\n  }\r\n\r\n  /**\r\n   * 发起请求, 参数可以是异步对象或函数\r\n   * @param option 请求配置\r\n   */\r\n  fetch<T>(option: FetchOptions): Observable<T> {\r\n    return FetcherService.resolveParams(option.data).pipe(\r\n      switchMap(value => {\r\n        const data = option.beforeSend ? option.beforeSend(value || {}) : value;\r\n        return this.doFetch<T>({ ...option, data });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 同步请求, 参数可以是异步对象或函数\r\n   * @param option 请求配置\r\n   */\r\n  fetchSync<T>(option: Omit<FetchOptions, 'async'>): T {\r\n    return Utils.getAjaxValue<T>(this.fetch({ ...option, async: false }));\r\n  }\r\n\r\n  /**\r\n   * 送请求\r\n   * @param options 参数不包含函数不进行二次处理\r\n   */\r\n  public doFetch<T>(options: FetchOptions): Observable<T> {\r\n    const option: Record<string, NzSafeAny> = {};\r\n    if (options.responseType) {\r\n      option.responseType = options.responseType;\r\n    }\r\n    if (options.observe) {\r\n      option.observe = options.observe;\r\n    }\r\n\r\n    option.context ||= new HttpContext();\r\n    if (options.async === false) {\r\n      option.context.set(SYNCED_ENABLED, true);\r\n    }\r\n\r\n    if (options.loading === false) {\r\n      option.context.set(LOADING_ENABLED, false);\r\n    }\r\n\r\n    const data = Utils.isFunction(options.data) ? options.data() : options.data;\r\n    if (/^post|put$/i.test(options.method!)) {\r\n      option.body = data;\r\n    } else {\r\n      option.params = data;\r\n    }\r\n\r\n    return this.http.request<T>(options.method || 'get', options.url, option);\r\n  }\r\n\r\n  /**\r\n   * 同步请求, 参数不包含函数不进行二次处理\r\n   * @param options\r\n   */\r\n  doFetchSync<T>(options: Omit<FetchOptions, 'async'>): T {\r\n    return Utils.getAjaxValue<T>(this.doFetch({ ...options, async: false }));\r\n  }\r\n\r\n  /**\r\n   * 使用同步方式进行远程校验\r\n   * @param options\r\n   */\r\n  remoteValidate<T = NzSafeAny>(options: ValidatorOption<T>): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (control.value == null || !control.value.length) {\r\n        return null;\r\n      }\r\n      if (options.beforeSend) {\r\n        const beforeSend = options.beforeSend;\r\n        options.beforeSend = data => {\r\n          return beforeSend(data, control);\r\n        };\r\n      }\r\n\r\n      if (options.data && Utils.isFunction(options.data)) {\r\n        const dataFn = options.data;\r\n        options.data = () => {\r\n          return dataFn(control);\r\n        };\r\n      }\r\n\r\n      // @ts-ignore\r\n      const data = this.doFetchSync<T>(options);\r\n      if (options.afterFetch) {\r\n        return options.afterFetch(data);\r\n      }\r\n\r\n      if (data == null) {\r\n        return null;\r\n      }\r\n\r\n      if (Utils.isBoolean(data)) {\r\n        return data ? null : { remote: { message: options.message || '格式不正确' } };\r\n      }\r\n      return data;\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 请求参数\r\n */\r\nexport type FetchParams<T = NzSafeAny> = (() => Promise<T> | T) | Promise<T> | T;\r\n\r\n/**\r\n * 请求配置\r\n */\r\nexport interface FetchOptions {\r\n  url: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   * 请求参数\r\n   */\r\n  data?: FetchParams;\r\n  /**\r\n   * 发送之前的回调函数,仅URL 时有效\r\n   * @param params\r\n   */\r\n  beforeSend?: (params: NzSafeAny) => NzSafeAny;\r\n  /**\r\n   * 响应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 订阅响应数据类型\r\n   */\r\n  observe?: 'body' | 'events' | 'response';\r\n  /**\r\n   * http上下文\r\n   */\r\n  context?: HttpContext;\r\n  /**\r\n   * 是否异步, 默认true\r\n   */\r\n  async?: boolean;\r\n  /**\r\n   * 是否显示loading\r\n   */\r\n  loading?: boolean;\r\n}\r\n\r\n/**\r\n * 验证器请求参数\r\n */\r\nexport type FetchValidatorParams<T = NzSafeAny> = ((control: AbstractControl) => Promise<T> | T) | Promise<T> | T;\r\n/**\r\n * 远程验证器配置\r\n */\r\nexport type ValidatorOption<T = NzSafeAny> = Omit<FetchOptions, 'beforeSend' | 'async' | 'data'> & {\r\n  /**\r\n   * 错误信息描述\r\n   */\r\n  message: string;\r\n  /**\r\n   * 请求参数\r\n   */\r\n  data?: FetchValidatorParams;\r\n  /**\r\n   * 响应数据后的回调\r\n   * @param data\r\n   */\r\n  afterFetch?(data: T): ValidationErrors | null;\r\n  /**\r\n   * 请求之前的回调\r\n   * @param params\r\n   * @param control\r\n   */\r\n  beforeSend?(params: NzSafeAny, control: AbstractControl): NzSafeAny;\r\n};\r\n\r\n\r\nexport type Method =\r\n  | 'get'\r\n  | 'GET'\r\n  | 'delete'\r\n  | 'DELETE'\r\n  | 'head'\r\n  | 'HEAD'\r\n  | 'options'\r\n  | 'OPTIONS'\r\n  | 'post'\r\n  | 'POST'\r\n  | 'put'\r\n  | 'PUT'\r\n  | 'patch'\r\n  | 'PATCH'\r\n  | 'purge'\r\n  | 'PURGE'\r\n  | 'link'\r\n  | 'LINK'\r\n  | 'unlink'\r\n  | 'UNLINK';",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HttpLoadingService",
            "id": "injectable-HttpLoadingService-bdf40c12bd00e6761a820c7248964b9cf1420563ec484ba02d130c22bdcce5ff6e10caaa9583e62de8806aba2b0623b2d097cc8d6b98373285d6fd3c053f48b2",
            "file": "lib/http-interceptor/http-loading.service.ts",
            "properties": [
                {
                    "name": "httpLoadingStatus",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "statusChangeObservable",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHttpLoadingService needs a subject to tell the next loading status.\n",
                    "description": "<p>HttpLoadingService needs a subject to tell the next loading status.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 404,
                                "end": 426,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "statusChangeObservable"
                            },
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 398,
                                "end": 403,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The subject who tells the loading status.</p>\n"
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "error",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "error",
                                    "type": "NzSafeAny",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "complete",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nYou have to subscribe the httpLoadingStatus$ in application to set custom loading behaviors through the method.\n\n```html\n`app.component.ts`\n```ts\nconstructor(private loading: HttpLoadingService){}\nngOnInit() {\n  this.loading.subscribe(status => {\n    if(status){\n      this.modal.show('loading...');\n    }else{\n      this.modal.hide();\n    }\n  })\n}\n```\n```",
                    "description": "<p>You have to subscribe the httpLoadingStatus$ in application to set custom loading behaviors through the method.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">`app.component.ts`\n```ts\nconstructor(private loading: HttpLoadingService){}\nngOnInit() {\n  this.loading.subscribe(status =&gt; {\n    if(status){\n      this.modal.show(&#39;loading...&#39;);\n    }else{\n      this.modal.hide();\n    }\n  })\n}</code></pre></div><p>```</p>\n",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "error",
                                    "type": "NzSafeAny",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 813,
                                "end": 820,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p><code>app.component.ts</code></p>\n<pre><code class=\"language-ts\">constructor(private loading: HttpLoadingService){}\nngOnInit() {\n  this.loading.subscribe(status =&gt; {\n    if(status){\n      this.modal.show(&#39;loading...&#39;);\n    }else{\n      this.modal.hide();\n    }\n  })\n}\n</code></pre>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpLoadingService {\r\n  private httpLoadingStatus = new Subject<boolean>();\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * HttpLoadingService needs a subject to tell the next loading status.\r\n   * @param statusChangeObservable The subject who tells the loading status.\r\n   */\r\n  init(statusChangeObservable: Observable<boolean>) {\r\n    statusChangeObservable.subscribe(this.httpLoadingStatus);\r\n  }\r\n\r\n  /**\r\n   * You have to subscribe the httpLoadingStatus$ in application to set custom loading behaviors through the method.\r\n   * @param observer customer callbacks when http loading status change.\r\n   *\r\n   * @example\r\n   * `app.component.ts`\r\n   * ```ts\r\n   * constructor(private loading: HttpLoadingService){}\r\n   * ngOnInit() {\r\n   *   this.loading.subscribe(status => {\r\n   *     if(status){\r\n   *       this.modal.show('loading...');\r\n   *     }else{\r\n   *       this.modal.hide();\r\n   *     }\r\n   *   })\r\n   * }\r\n   * ```\r\n   */\r\n  subscribe(next?: (value: boolean) => void, error?: (error: NzSafeAny) => void, complete?: () => void): Subscription {\r\n    return this.httpLoadingStatus.subscribe(next, error, complete);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "HttpNotifyService",
            "id": "injectable-HttpNotifyService-c5889cb07ffdf9834bf075752a76e59fe95dc33195fcec0fe323aa7dc13bc1b84bd841446bf0bf58c26f698c0af9d2fa5b8953b042bd8d0ec521479ec9da4246",
            "file": "lib/http-interceptor/http-notify.service.ts",
            "properties": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notifyCustomServerError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpError<ResponseModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n通用的业务异常\n",
                    "description": "<p>通用的业务异常</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 377,
                                "end": 382,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "HttpError<ResponseModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 371,
                                "end": 376,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "notifyHttpOriginError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nhttp原始异常\n",
                    "description": "<p>http原始异常</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 535,
                                "end": 540,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "HttpError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 529,
                                "end": 534,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showErrorModal",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>对于异常的处理</p>\n",
            "rawdescription": "\n\n对于异常的处理\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { NzModalWrapService } from '@xmagic/nzx-antd/modal';\r\nimport { HttpError, ResponseModel } from './http.model';\r\n\r\n/**\r\n * 对于异常的处理\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpNotifyService {\r\n  private isOpen = false;\r\n  constructor(protected modal: NzModalWrapService) {}\r\n\r\n  /**\r\n   * 通用的业务异常\r\n   * @param error\r\n   */\r\n  notifyCustomServerError(error: HttpError<ResponseModel>) {\r\n    this.showErrorModal(error.message);\r\n  }\r\n\r\n  /**\r\n   * http原始异常\r\n   * @param error\r\n   */\r\n  notifyHttpOriginError(error: HttpError): void {\r\n    const messageMap: Record<string, string> = {\r\n      0: '请求网络错误，请检查网络是否正常',\r\n      404: '请求的地址不存在，请检查地址是否正确',\r\n      403: '您没有操作权限'\r\n    };\r\n    this.showErrorModal(messageMap[error.code] || '请求发生错误，请联系管理员');\r\n  }\r\n\r\n  private showErrorModal(message: string) {\r\n    if (this.isOpen) {\r\n      return;\r\n    }\r\n    this.isOpen = true;\r\n    this.modal\r\n      .error({\r\n        nzTitle: '错误',\r\n        nzContent: message\r\n      })\r\n      .afterClose.subscribe(() => (this.isOpen = false));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NzModalWrapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NzModalWrapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-4581be7064cedd3d90debe01597d456eab58ccaa31b906d6fd66b2443a940d37f4829c57790311b730f97034ed522a7f0febcccc7f7e456dca5425f6ae46d228",
            "file": "lib/service/loading.service.ts",
            "properties": [
                {
                    "name": "loadingId",
                    "defaultValue": "'__MESSAGE_LOADING__'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n隐藏loading\n",
                    "description": "<p>隐藏loading</p>\n"
                },
                {
                    "name": "loading",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示或隐藏loading\n",
                    "description": "<p>显示或隐藏loading</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2733,
                                "end": 2737,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "show"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2727,
                                "end": 2732,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否显示</p>\n"
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"message\" | \"spin\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'message'"
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'加载中...'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示loading\n",
                    "description": "<p>显示loading</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 227,
                                "end": 231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "\"message\" | \"spin\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'message'",
                            "tagName": {
                                "pos": 221,
                                "end": 226,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>loading类型</p>\n"
                        },
                        {
                            "name": {
                                "pos": 255,
                                "end": 262,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'加载中...'",
                            "tagName": {
                                "pos": 249,
                                "end": 254,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>消息</p>\n"
                        }
                    ]
                },
                {
                    "name": "showx",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"message\" | \"spin\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "html",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"message\" | \"spin\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "html",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoadingService {\r\n  readonly loadingId = '__MESSAGE_LOADING__';\r\n\r\n  /**\r\n   * 显示loading\r\n   * @param type loading类型\r\n   * @param message 消息\r\n   */\r\n  show(type: 'message' | 'spin' = 'message', message: string = '加载中...') {\r\n    this.showx(this.loadingId, type, () => {\r\n      if (type === 'spin') {\r\n        return `\r\n        <div class=\"ant-modal-wrap\" style=\"position: fixed; z-index: 999998; background-color: rgba(255, 255, 255, 0.35)\"></div>\r\n        <div\r\n          class=\"ant-spin ant-spin-spinning ant-spin-show-text\"\r\n          style=\"top: 45%; transform: translate(-50%); z-index: 999999; position: fixed; left: 50%\"\r\n        >\r\n          <span class=\"ant-spin-dot ant-spin-dot-spin\">\r\n            <i class=\"ant-spin-dot-item\"></i>\r\n            <i class=\"ant-spin-dot-item\"></i>\r\n            <i class=\"ant-spin-dot-item\"></i>\r\n            <i class=\"ant-spin-dot-item\"></i>\r\n          </span>\r\n          <div class=\"ant-spin-text\">${message}</div>\r\n        </div>`;\r\n      }\r\n\r\n      return `\r\n      <div class=\"ant-modal-wrap\" style=\"z-index: 999998;background-color: rgba(255, 255, 255,.35);\"></div>\r\n      <div class=\"ant-message-notice ant-message\" style=\"top: 45%; z-index: 999999;\">\r\n        <div class=\"ant-message-notice-content\" style=\"min-width: 150px;\">\r\n          <div class=\"ant-message-loading\">\r\n            <i class=\"anticon anticon-loading\">\r\n              <svg viewBox=\"0 0 1024 1024\" focusable=\"false\" fill=\"currentColor\" width=\"1em\" height=\"1em\"\r\n                   class=\"anticon-spin\">\r\n                <path\r\n                  d=\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\"></path>\r\n              </svg>\r\n            </i>\r\n            <span>${message}</span>\r\n          </div>\r\n        </div>\r\n      </div>`;\r\n    });\r\n  }\r\n\r\n  private showx(id: string, type: 'message' | 'spin', html: () => string) {\r\n    const loading = document.getElementById(id);\r\n    if (loading) {\r\n      if (loading.getAttribute('type') !== type) {\r\n        loading.setAttribute('type', type);\r\n        loading.innerHTML = html();\r\n      }\r\n      loading.style.display = 'block';\r\n      return;\r\n    }\r\n    const div = document.createElement('div');\r\n    div.setAttribute('type', type);\r\n    div.setAttribute('id', id);\r\n    div.innerHTML = html();\r\n    document.body.append(div);\r\n  }\r\n\r\n  /**\r\n   * 显示或隐藏loading\r\n   * @param show 是否显示\r\n   */\r\n  loading(show: boolean = true): void {\r\n    show ? this.show() : this.hide();\r\n  }\r\n\r\n  /**\r\n   * 隐藏loading\r\n   */\r\n  hide() {\r\n    const loading = document.getElementById(this.loadingId);\r\n    if (loading) {\r\n      loading.style.display = 'none';\r\n    }\r\n  }\r\n}\r\n\r\nexport const loadingService = new LoadingService();\r\n",
            "type": "injectable"
        },
        {
            "name": "LogoutService",
            "id": "injectable-LogoutService-8de81c75a07c69a24cebd9c55c2cb0562dbee6e602ac1195725d1e5095ba6be2f8dc6dc3e6d6cf849c25390880b6baf3d820195f2fe60465eb6f611b40ef625a",
            "file": "lib/http-interceptor/logout.service.ts",
            "properties": [
                {
                    "name": "loginNotify$",
                    "defaultValue": "new Subject<LogoutType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timeoutFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "logoutType",
                            "type": "LogoutType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n执行退出登录Observable\n",
                    "description": "<p>执行退出登录Observable</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1305,
                                "end": 1315,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "logoutType"
                            },
                            "type": "LogoutType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1299,
                                "end": 1304,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "notifyLogin",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpError<ResponseModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpError<ResponseModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notifyLogout",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "code",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n静默通知退出\n",
                    "description": "<p>静默通知退出</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1082,
                                "end": 1089,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 1076,
                                "end": 1081,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>提示消息</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1108,
                                "end": 1112,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "code"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "pos": 1102,
                                "end": 1107,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误码 -1 不显示提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "logoutType",
                                    "type": "LogoutType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "logoutType",
                                    "type": "LogoutType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>退出通知</p>\n",
            "rawdescription": "\n\n退出通知\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpError, ResponseModel } from './http.model';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NzModalWrapService } from '@xmagic/nzx-antd/modal';\r\nimport { throttleTime } from 'rxjs/operators';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from '@xmagic/nzx-antd'\r\n\r\n/**\r\n * 退出通知\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class LogoutService {\r\n  protected readonly timeoutFn: (error: HttpError) => boolean;\r\n  private loginNotify$ = new Subject<LogoutType>();\r\n\r\n  constructor(protected modal: NzModalWrapService, protected antdService: NzxAntdService) {\r\n    this.timeoutFn = Utils.extend<ResponseSetting>({}, DEFAULT_RESPONSE_SETTING, this.antdService.response).timeout!;\r\n  }\r\n\r\n  notifyLogin(error: HttpError<ResponseModel>): void {\r\n    this.loginNotify$.next({\r\n      message: error.message,\r\n      url: (error.body as { url?: string })?.url,\r\n      timeout: this.timeoutFn(error)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 静默通知退出\r\n   * @param message 提示消息\r\n   * @param code 错误码 -1 不显示提示信息\r\n   */\r\n  notifyLogout(message: string = '', code = 0): void {\r\n    this.notifyLogin(new HttpError(false, code, message, {}));\r\n  }\r\n\r\n  /**\r\n   * 执行退出登录Observable\r\n   * @param logoutType\r\n   */\r\n  logout(logoutType: LogoutType): void {\r\n    this.loginNotify$.next(logoutType);\r\n  }\r\n\r\n  onLogout(fn: (logoutType: LogoutType) => void): Subscription {\r\n    return this.loginNotify$.asObservable().pipe(throttleTime(2000)).subscribe(fn);\r\n  }\r\n}\r\n\r\nexport interface LogoutType {\r\n  /**\r\n   * url\r\n   */\r\n  url?: string;\r\n  /**\r\n   * 是否超时\r\n   */\r\n  timeout?: boolean;\r\n  /**\r\n   * 错误信息\r\n   */\r\n  message?: string;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NzModalWrapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NzModalWrapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModalDragService",
            "id": "injectable-ModalDragService-d5a8fb46d2368cf36c93b36182f5dc136dcde2b2bbbd3ba0a3d3657239c11058a5706dbb1b3c402025b97337c0db09347380e38a7ce71623446b4928044cd713",
            "file": "lib/modal/modal-drag.service.ts",
            "properties": [
                {
                    "name": "DRAG_CLS_PREFIX",
                    "defaultValue": "'NZ-MODAL-WRAP-CLS-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "dragDrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DragDrop",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzModalService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDragHandler",
                    "args": [
                        {
                            "name": "wrapCls",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nzMask",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nzModalType",
                            "type": "ModalTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DragRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n创建拖拽手柄\n",
                    "description": "<p>创建拖拽手柄</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 468,
                                "end": 475,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "wrapCls"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 462,
                                "end": 467,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>类名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 492,
                                "end": 498,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "nzMask"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 486,
                                "end": 491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否有遮罩</p>\n"
                        },
                        {
                            "name": {
                                "pos": 518,
                                "end": 529,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "nzModalType"
                            },
                            "type": "ModalTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 512,
                                "end": 517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>对话框类型</p>\n"
                        }
                    ]
                },
                {
                    "name": "fixedWrapElementStyle",
                    "args": [
                        {
                            "name": "wrapElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n解决wrap的样式, 设置鼠标可以穿透\n",
                    "description": "<p>解决wrap的样式, 设置鼠标可以穿透</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1481,
                                "end": 1492,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "wrapElement"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1475,
                                "end": 1480,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getModalMaxZIndex",
                    "args": [
                        {
                            "name": "wrapElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取所有对话框最大值,并确定是否需要修改\n",
                    "description": "<p>获取所有对话框最大值,并确定是否需要修改</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2174,
                                "end": 2185,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "wrapElement"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2168,
                                "end": 2173,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>待修改z-index 容器</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRandomCls",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取随机类名\n",
                    "description": "<p>获取随机类名</p>\n"
                },
                {
                    "name": "getZIndex",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMaxZIndex",
                    "args": [
                        {
                            "name": "rootElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wrapElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当前对话框点击时,设置当前对话框z-index为最大\n",
                    "description": "<p>当前对话框点击时,设置当前对话框z-index为最大</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1693,
                                "end": 1704,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rootElement"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1687,
                                "end": 1692,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前对话框</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1724,
                                "end": 1735,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "wrapElement"
                            },
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1718,
                                "end": 1723,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>待修改z-index 容器</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>对话框拖动服务</p>\n",
            "rawdescription": "\n\n对话框拖动服务\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DragDrop, DragRef } from '@angular/cdk/drag-drop';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { ModalTypes, NzModalService } from 'ng-zorro-antd/modal';\r\n\r\n/**\r\n * 对话框拖动服务\r\n */\r\n@Injectable()\r\nexport class ModalDragService {\r\n  static readonly DRAG_CLS_PREFIX = 'NZ-MODAL-WRAP-CLS-';\r\n  constructor(public modal: NzModalService, public dragDrop: DragDrop) {}\r\n\r\n  /**\r\n   * 创建拖拽手柄\r\n   * @param wrapCls 类名\r\n   * @param nzMask 是否有遮罩\r\n   * @param nzModalType 对话框类型\r\n   */\r\n  createDragHandler<T = NzSafeAny>(wrapCls: string, nzMask?: boolean, nzModalType?: ModalTypes): DragRef<T> {\r\n    const wrapElement = document.querySelector<HTMLDivElement>(`.${wrapCls}`)!;\r\n    const rootElement = wrapElement.querySelector<HTMLDivElement>(`.ant-modal-content`)!;\r\n    const handle =\r\n      nzModalType === 'confirm'\r\n        ? rootElement.querySelector<HTMLDivElement>('.ant-modal-body')!\r\n        : rootElement.querySelector<HTMLDivElement>('.ant-modal-header')!;\r\n    this.fixedWrapElementStyle(wrapElement);\r\n    if (!(nzMask == null || nzMask)) {\r\n      this.setMaxZIndex(rootElement, wrapElement);\r\n    }\r\n    return this.dragDrop.createDrag(handle).withHandles([handle]).withRootElement(rootElement);\r\n  }\r\n\r\n  /**\r\n   * 获取随机类名\r\n   */\r\n  getRandomCls() {\r\n    return ModalDragService.DRAG_CLS_PREFIX + Date.now() + Math.random().toString().replace('0.', '');\r\n  }\r\n\r\n  /**\r\n   * 解决wrap的样式, 设置鼠标可以穿透\r\n   * @param wrapElement\r\n   * @protected\r\n   */\r\n  protected fixedWrapElementStyle(wrapElement: HTMLElement): void {\r\n    wrapElement.style.pointerEvents = 'none';\r\n  }\r\n\r\n  /**\r\n   * 当前对话框点击时,设置当前对话框z-index为最大\r\n   * @param rootElement 当前对话框\r\n   * @param wrapElement 待修改z-index 容器\r\n   * @protected\r\n   */\r\n  protected setMaxZIndex(rootElement: HTMLElement, wrapElement: HTMLElement): void {\r\n    rootElement.addEventListener(\r\n      'mousedown',\r\n      () => {\r\n        const maxZIndex = this.getModalMaxZIndex(wrapElement);\r\n        if (maxZIndex) {\r\n          wrapElement.style.zIndex = maxZIndex + 1 + '';\r\n        }\r\n      },\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 获取所有对话框最大值,并确定是否需要修改\r\n   * @param wrapElement 待修改z-index 容器\r\n   */\r\n  protected getModalMaxZIndex(wrapElement: HTMLElement): number | null {\r\n    const wrapZIndex = this.getZIndex(wrapElement);\r\n    const maxZIndex = this.modal.openModals.reduce<number>((prev, modal) => {\r\n      // @ts-ignore\r\n      const element = (modal.containerInstance.host || modal.containerInstance.elementRef).nativeElement;\r\n      if (wrapElement === element) {\r\n        return prev;\r\n      }\r\n      const zIndex = this.getZIndex(element);\r\n      return zIndex > prev ? zIndex : prev;\r\n    }, 0);\r\n    return maxZIndex >= wrapZIndex ? maxZIndex : null;\r\n  }\r\n\r\n  protected getZIndex(element: HTMLElement): number {\r\n    return +getComputedStyle(element, null).zIndex;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dragDrop",
                        "type": "DragDrop",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dragDrop",
                        "type": "DragDrop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NzModalWrapService",
            "id": "injectable-NzModalWrapService-9743c735698d1f2855a020c069ddc54464cc8016ac89886c9b72253ac0d901e06955e7e3d78d8672bfe13bf0898b741dbc20997cc498b00a8ee072d74330f926",
            "file": "lib/modal/nz-modal-wrap.service.ts",
            "properties": [
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzModalService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalDragService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalDragService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirmType",
                            "type": "ConfirmType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confirmType",
                            "type": "ConfirmType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "config",
                            "type": "ModalOptions<T | R>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T, R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n创建对话框, 增加可拖拽功能\n",
                    "description": "<p>创建对话框, 增加可拖拽功能</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 472,
                                "end": 478,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "ModalOptions<T | R>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 466,
                                "end": 471,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>ModalOptions</p>\n"
                        }
                    ]
                },
                {
                    "name": "createModalConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "ModalOptions<T | R>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wrapCls",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalOptions<T, R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ModalOptions<T | R>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "wrapCls",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createModalWidthDrag",
                    "args": [
                        {
                            "name": "config",
                            "type": "ModalOptions<T | R>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "create",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "newConfig",
                                    "type": "ModalOptions<T | R>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T, R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ModalOptions<T | R>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "create",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "newConfig",
                                    "type": "ModalOptions<T | R>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzModalRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ModalOptions<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { ConfirmType, ModalOptions, NzModalRef, NzModalService } from 'ng-zorro-antd/modal';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { ModalDragService } from './modal-drag.service';\r\n\r\n@Injectable()\r\nexport class NzModalWrapService {\r\n  constructor(public modal: NzModalService, public modalDragService: ModalDragService) {}\r\n\r\n  /**\r\n   * 创建对话框, 增加可拖拽功能\r\n   * @param config ModalOptions\r\n   */\r\n  create<T, R = NzSafeAny>(config: ModalOptions<T, R>): NzModalRef<T, R> {\r\n    return this.createModalWidthDrag(config, c => this.modal.create(c));\r\n  }\r\n\r\n  get openModals(): NzModalRef[] {\r\n    return this.modal.openModals;\r\n  }\r\n\r\n  get afterAllClosed(): Subject<void> {\r\n    return this.modal._afterAllClosed;\r\n  }\r\n\r\n  closeAll(): void {\r\n    this.modal.closeAll();\r\n  }\r\n\r\n  confirm<T>(options: ModalOptions<T>, confirmType?: ConfirmType): NzModalRef<T> {\r\n    return this.createModalWidthDrag(options, c => this.modal.confirm(c));\r\n  }\r\n\r\n  info<T>(options: ModalOptions<T>): NzModalRef<T> {\r\n    return this.createModalWidthDrag(options, c => this.modal.info(c));\r\n  }\r\n\r\n  success<T>(options: ModalOptions<T>): NzModalRef<T> {\r\n    return this.createModalWidthDrag(options, c => this.modal.success(c));\r\n  }\r\n\r\n  error<T>(options: ModalOptions<T>): NzModalRef<T> {\r\n    return this.createModalWidthDrag(options, c => this.modal.error(c));\r\n  }\r\n\r\n  warning<T>(options: ModalOptions<T>): NzModalRef<T> {\r\n    return this.createModalWidthDrag(options, c => this.modal.warning(c));\r\n  }\r\n\r\n  protected createModalWidthDrag<T, R = NzSafeAny>(\r\n    config: ModalOptions<T, R>,\r\n    create: (newConfig: ModalOptions<T, R>) => NzModalRef<T, R>\r\n  ) {\r\n    const wrapCls = this.modalDragService.getRandomCls();\r\n    const newConfig = this.createModalConfig(config, wrapCls);\r\n    const modalRef = create(newConfig);\r\n\r\n    modalRef.afterOpen.subscribe(() => {\r\n      const drag = this.modalDragService.createDragHandler(wrapCls, config.nzMask, newConfig.nzModalType);\r\n      modalRef.afterClose.subscribe(() => {\r\n        if (drag && !drag.dropped) {\r\n          drag.dispose();\r\n        }\r\n      });\r\n    });\r\n    return modalRef;\r\n  }\r\n\r\n  protected createModalConfig<T, R = NzSafeAny>(config: ModalOptions<T, R>, wrapCls: string): ModalOptions<T, R> {\r\n    const defaultConfig: ModalOptions = {\r\n      nzMaskClosable: false,\r\n      nzTitle: '提示'\r\n    };\r\n    const maskStyle = config.nzMask === false ? { nzMaskStyle: { display: 'none' } } : {};\r\n    const newConfig = Object.assign(defaultConfig, config, maskStyle);\r\n    newConfig.nzWrapClassName = (newConfig.nzWrapClassName || '') + ' ' + wrapCls;\r\n    return newConfig;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalDragService",
                        "type": "ModalDragService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalDragService",
                        "type": "ModalDragService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "openModals": {
                    "name": "openModals",
                    "getSignature": {
                        "name": "openModals",
                        "type": "[]",
                        "returnType": "NzModalRef[]",
                        "line": 20
                    }
                },
                "afterAllClosed": {
                    "name": "afterAllClosed",
                    "getSignature": {
                        "name": "afterAllClosed",
                        "type": "",
                        "returnType": "Subject<void>",
                        "line": 24
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "NzxAntdService",
            "id": "injectable-NzxAntdService-bf07863577c78bf61eddbd69ddf04ec445963ab2c47b8167ba90dd3f81f103f8cce184d59416fc42efda64c75d17e6ff2e5ec4aa531b43e9a04262d153680cce",
            "file": "lib/nzx-antd.service.ts",
            "properties": [
                {
                    "name": "authChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>权限变更, 通常切换用户时需要</p>\n",
                    "line": 34,
                    "rawdescription": "\n\n权限变更, 通常切换用户时需要\n"
                },
                {
                    "name": "basePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>请求的根路径,例如/context</p>\n",
                    "line": 17,
                    "rawdescription": "\n\n请求的根路径,例如/context\n"
                },
                {
                    "name": "contentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"form\" | \"json\"",
                    "optional": true,
                    "description": "<p>默认请求数据类型, 默认 json</p>\n",
                    "line": 13,
                    "rawdescription": "\n\n默认请求数据类型, 默认 json\n"
                },
                {
                    "name": "handleRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>自定义处理原始请求, 返回null,void则使用默认处理器</p>\n",
                    "line": 25,
                    "rawdescription": "\n\n自定义处理原始请求, 返回null,void则使用默认处理器\n"
                },
                {
                    "name": "hasAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>是否有权限</p>\n",
                    "line": 30,
                    "rawdescription": "\n\n是否有权限\n"
                },
                {
                    "name": "noAuthUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>无权限时跳转路径</p>\n",
                    "line": 39,
                    "rawdescription": "\n\n无权限时跳转路径\n"
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseSetting",
                    "optional": true,
                    "description": "<p>响应的数据配置</p>\n",
                    "line": 21,
                    "rawdescription": "\n\n响应的数据配置\n"
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableSetting",
                    "optional": true,
                    "description": "<p>表格分页配置</p>\n",
                    "line": 44,
                    "rawdescription": "\n\n表格分页配置\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpContext, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NzxAntdService {\r\n  /**\r\n   * 默认请求数据类型, 默认 json\r\n   */\r\n  contentType?: 'form' | 'json';\r\n  /**\r\n   * 请求的根路径,例如/context\r\n   */\r\n  basePath?: string;\r\n  /**\r\n   * 响应的数据配置\r\n   */\r\n  response?: ResponseSetting;\r\n  /**\r\n   * 自定义处理原始请求, 返回null,void则使用默认处理器\r\n   */\r\n  handleRequest?: (req: HttpRequest<NzSafeAny>, url: string) => HttpRequest<NzSafeAny> | null | HttpRequestOptions;\r\n\r\n  /**\r\n   * 是否有权限\r\n   */\r\n  hasAuth?: <T = NzSafeAny>(value: T) => Observable<boolean>;\r\n  /**\r\n   * 权限变更, 通常切换用户时需要\r\n   */\r\n  authChange?: () => Observable<void>;\r\n\r\n  /**\r\n   * 无权限时跳转路径\r\n   */\r\n  noAuthUrl?: string;\r\n\r\n  /**\r\n   * 表格分页配置\r\n   */\r\n  table?: TableSetting;\r\n  constructor() {}\r\n}\r\n\r\n/**\r\n * 默认配置\r\n */\r\nexport const DEFAULT_RESPONSE_SETTING: ResponseSetting = {\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n};\r\n\r\n/**\r\n * 响应配置\r\n */\r\nexport interface ResponseSetting {\r\n  /**\r\n   * code字段名称, 支持路径属性\r\n   */\r\n  code?: string;\r\n  /**\r\n   * message字段名称, 支持路径属性\r\n   */\r\n  message?: string;\r\n  /**\r\n   * data字段名称, 支持路径属性\r\n   */\r\n  data?: string;\r\n  /**\r\n   * 是否请求成功\r\n   * @param body 响应对象\r\n   */\r\n  success?: (response: HttpResponse<NzSafeAny>) => boolean;\r\n  /**\r\n   * 是否需要默认错误的错误\r\n   * @param error 错误信息\r\n   */\r\n  defaultError?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否登录超时\r\n   * @param error 错误信息\r\n   */\r\n  timeout?: (error: HttpErrorBean) => boolean;\r\n  /**\r\n   * 是否强制退出登录, 比如强制下线\r\n   * @param error 错误信息\r\n   */\r\n  forceLogout?: (error: HttpErrorBean) => boolean;\r\n}\r\n\r\n/**\r\n * 表格配置\r\n */\r\nexport interface TableSetting {\r\n  /**\r\n   * 请求接口当前页数\r\n   */\r\n  pageIndexField?: string;\r\n  /**\r\n   * 每页显示多少条\r\n   */\r\n  pageSizeField?: string;\r\n  /**\r\n   * 请求结果列表字段  支持 a.b.c\r\n   */\r\n  listField?: string;\r\n  /**\r\n   * 请求结果总数字段  支持 a.b.c\r\n   */\r\n  totalField?: string;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  method?: string;\r\n  /**\r\n   *  相应类型\r\n   */\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  /**\r\n   * 分页大小\r\n   */\r\n  nzPageSize?: number;\r\n}\r\n\r\n/**\r\n * 请求公共配置\r\n */\r\nexport interface HttpRequestOptions {\r\n  context?: HttpContext;\r\n  reportProgress?: boolean;\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n  withCredentials?: boolean;\r\n  body?: NzSafeAny | null;\r\n  method?: string;\r\n  url?: string;\r\n  setHeaders?: Record<string, NzSafeAny>;\r\n  setParams?: Record<string, NzSafeAny>;\r\n}\r\n\r\nexport interface HttpErrorBean<T = NzSafeAny> {\r\n  httpError: boolean;\r\n  code: number;\r\n  message: string;\r\n  body: T;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-8f62d4d2ea2ae1fff8c4f3942ced956fc22fdc3f1c9c06256c5769fb2eb74874dd2165e73a1d42aef3aa0ab3fde584ea715c647d9eb7b467393290883dc054d3",
            "file": "lib/service/storage.service.ts",
            "properties": [
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Storage",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n清除所有数据\n",
                    "description": "<p>清除所有数据</p>\n"
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取值\n",
                    "description": "<p>获取值</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 495,
                                "end": 498,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 489,
                                "end": 494,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>key</p>\n"
                        }
                    ]
                },
                {
                    "name": "key",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取key\n",
                    "description": "<p>获取key</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 707,
                                "end": 712,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 701,
                                "end": 706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>索引</p>\n"
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n移除值\n",
                    "description": "<p>移除值</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 836,
                                "end": 839,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 830,
                                "end": 835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>key</p>\n"
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n设置值\n",
                    "description": "<p>设置值</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 958,
                                "end": 961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 952,
                                "end": 957,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 975,
                                "end": 980,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 969,
                                "end": 974,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Optional } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n  /**\r\n   * 获取长度\r\n   */\r\n  get length() {\r\n    return this.storage.length;\r\n  }\r\n\r\n  constructor(@Optional() public storage: Storage) {\r\n    if (!storage) {\r\n      this.storage = localStorage;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除所有数据\r\n   */\r\n  clear() {\r\n    this.storage.clear();\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param key key\r\n   */\r\n  getItem<T = NzSafeAny>(key: string): T | null {\r\n    const value = this.storage.getItem(key);\r\n    return value == null ? null : (JSON.parse(value) as T);\r\n  }\r\n\r\n  /**\r\n   * 获取key\r\n   * @param index 索引\r\n   */\r\n  key(index: number): string | null {\r\n    return this.storage.key(index);\r\n  }\r\n\r\n  /**\r\n   * 移除值\r\n   * @param key key\r\n   */\r\n  removeItem(key: string): void {\r\n    this.storage.removeItem(key);\r\n  }\r\n\r\n  /**\r\n   * 设置值\r\n   * @param key\r\n   * @param value\r\n   */\r\n  setItem<T = NzSafeAny>(key: string, value: T): void {\r\n    this.storage.setItem(key, JSON.stringify(value));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "Storage",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "Storage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "length": {
                    "name": "length",
                    "getSignature": {
                        "name": "length",
                        "type": "",
                        "returnType": "",
                        "line": 11,
                        "rawdescription": "\n\n获取长度\n",
                        "description": "<p>获取长度</p>\n"
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuardService",
            "id": "injectable-AuthGuardService-8c4d3f0402c70f87d7a7a60e6377f570c56ab6b4f8fca1d0cb63b993dbde26b9f319f82a51bbab96e1bdb11a922fd188c8c6885c74e63c692e85cf5b8ca260ba",
            "file": "lib/service/auth-guard.service.ts",
            "properties": [
                {
                    "name": "hasAuth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_state",
                            "type": "RouterStateSnapshot | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_state",
                            "type": "RouterStateSnapshot | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoad",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "process",
                    "args": [
                        {
                            "name": "data",
                            "type": "Data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>权限路由守卫服务, 具体数据格式,由NzxAntdService.hasAuth决定处理</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">const routes: Routes = [\n{\n   path: &#39;xxx&#39;,\n   canActivate: [ AuthGuardService ],\n   data: { guard: &#39;user1&#39;, noAuthUrl: &#39;/no-permisseion&#39; }\n},\n{\n   path: &#39;xxx&#39;,\n   canActivate: [ AuthGuardService ],\n   data: { guard: { auth: [&#39;user1&#39;, &#39;user2&#39;], noAuthUrl: &#39;/no-permisseion&#39;} }}\n},\n{\n   path: &#39;yyy&#39;,\n   canActivate: [ AuthGuardService ],\n   data: { guard: ((router, injector, antdService) =&gt; of(true)) as AuthGuardType, noAuthUrl: &#39;/no-permisseion&#39; }\n}\n];</code></pre></div>",
            "rawdescription": "\n\n权限路由守卫服务, 具体数据格式,由NzxAntdService.hasAuth决定处理\n```html\nconst routes: Routes = [\n{\n   path: 'xxx',\n   canActivate: [ AuthGuardService ],\n   data: { guard: 'user1', noAuthUrl: '/no-permisseion' }\n},\n{\n   path: 'xxx',\n   canActivate: [ AuthGuardService ],\n   data: { guard: { auth: ['user1', 'user2'], noAuthUrl: '/no-permisseion'} }}\n},\n{\n   path: 'yyy',\n   canActivate: [ AuthGuardService ],\n   data: { guard: ((router, injector, antdService) => of(true)) as AuthGuardType, noAuthUrl: '/no-permisseion' }\n}\n];\n```",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  CanActivateChild,\r\n  CanLoad,\r\n  Data,\r\n  Route,\r\n  Router,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Observable, of, tap } from 'rxjs';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzxAntdService } from '@xmagic/nzx-antd';\r\n\r\n/**\r\n * 权限路由守卫服务, 具体数据格式,由NzxAntdService.hasAuth决定处理\r\n * @example\r\n * const routes: Routes = [\r\n * {\r\n *    path: 'xxx',\r\n *    canActivate: [ AuthGuardService ],\r\n *    data: { guard: 'user1', noAuthUrl: '/no-permisseion' }\r\n * },\r\n * {\r\n *    path: 'xxx',\r\n *    canActivate: [ AuthGuardService ],\r\n *    data: { guard: { auth: ['user1', 'user2'], noAuthUrl: '/no-permisseion'} }}\r\n * },\r\n * {\r\n *    path: 'yyy',\r\n *    canActivate: [ AuthGuardService ],\r\n *    data: { guard: ((router, injector, antdService) => of(true)) as AuthGuardType, noAuthUrl: '/no-permisseion' }\r\n * }\r\n * ];\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuardService implements CanActivate, CanActivateChild, CanLoad {\r\n  protected hasAuth: Required<NzxAntdService>['hasAuth'] = () => of(true);\r\n\r\n  constructor(private antdService: NzxAntdService, private router: Router, private injector: Injector) {\r\n    if (this.antdService.hasAuth) {\r\n      this.hasAuth = this.antdService.hasAuth;\r\n    }\r\n  }\r\n\r\n  private process(data: Data): Observable<boolean> {\r\n    const guard: AuthGuardType = data.guard;\r\n\r\n    if (Utils.isFunction(guard)) {\r\n      return guard(this.router, this.injector, this.antdService);\r\n    }\r\n\r\n    return this.hasAuth(guard.auth).pipe(\r\n      tap(auth => {\r\n        const url = guard.noAuthUrl || this.antdService.noAuthUrl;\r\n        if (!auth && url) {\r\n          this.router.navigateByUrl(url);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // lazy loading\r\n  canLoad(route: Route): Observable<boolean> {\r\n    return this.process(route.data!);\r\n  }\r\n\r\n  // all children route\r\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.canActivate(childRoute, state);\r\n  }\r\n\r\n  // route\r\n  canActivate(route: ActivatedRouteSnapshot, _state: RouterStateSnapshot | null): Observable<boolean> {\r\n    return this.process(route.data);\r\n  }\r\n}\r\n\r\n/**\r\n * 权限路由守卫 使用函数处理\r\n */\r\nexport type AuthGuardFnType = (router: Router, injector: Injector, antdService: NzxAntdService) => Observable<boolean>;\r\n/**\r\n * 权限路由守卫配置\r\n */\r\nexport type AuthGuardType<T = NzSafeAny> = AuthGuardFnType | T;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "HttpCustomServerErrorInterceptor",
            "id": "injectable-HttpCustomServerErrorInterceptor-6d8d698e5700383549bc3dbe450e29cb6915d6418cb42127e21bfe8c6e3050798b7eec40445647d24f7f17f6b994c819576c2fe0d37f68af0c5ce9c4b75c8acb",
            "file": "lib/http-interceptor/http-custom-server-error.interceptor.ts",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Required<ResponseSetting>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n只抛出自定义异常, 对于http内部异常由拦截器统一处理\n",
                    "description": "<p>只抛出自定义异常, 对于http内部异常由拦截器统一处理</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1208,
                                "end": 1213,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "HttpError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1202,
                                "end": 1207,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>在 http-error-interceptor 后，进行自定义错误处理。</p>\n",
            "rawdescription": "\n\n在 http-error-interceptor 后，进行自定义错误处理。\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable, throwError, catchError } from 'rxjs';\r\nimport { HttpNotifyService } from './http-notify.service';\r\nimport { HttpError } from './http.model';\r\nimport { LogoutService } from './logout.service';\r\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from '@xmagic/nzx-antd';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\n\r\n/**\r\n * 在 http-error-interceptor 后，进行自定义错误处理。\r\n */\r\n@Injectable()\r\nexport class HttpCustomServerErrorInterceptor implements HttpInterceptor {\r\n  protected readonly settings: Required<ResponseSetting>;\r\n\r\n  constructor(\r\n    protected notify: HttpNotifyService,\r\n    protected logoutNotify: LogoutService,\r\n    protected antdService: NzxAntdService\r\n  ) {\r\n    this.settings = Utils.extend({}, DEFAULT_RESPONSE_SETTING, this.antdService.response) as Required<ResponseSetting>;\r\n  }\r\n\r\n  intercept<T>(req: HttpRequest<T>, next: HttpHandler): Observable<HttpEvent<T>> {\r\n    return next.handle(req).pipe(catchError(error => this.handleError(error)));\r\n  }\r\n\r\n  /**\r\n   * 只抛出自定义异常, 对于http内部异常由拦截器统一处理\r\n   * @param error\r\n   */\r\n  handleError(error: HttpError) {\r\n    if (error.httpError) {\r\n      this.notify.notifyHttpOriginError(error);\r\n      // 登录超时  强制下线\r\n    } else if (this.settings.timeout(error) || this.settings.forceLogout(error)) {\r\n      this.logoutNotify.notifyLogin(error);\r\n    } else if (this.settings.defaultError(error)) {\r\n      this.notify.notifyCustomServerError(error);\r\n    }\r\n    return throwError(() => error);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notify",
                        "type": "HttpNotifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logoutNotify",
                        "type": "LogoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "notify",
                        "type": "HttpNotifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logoutNotify",
                        "type": "LogoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "HttpErrorInterceptor",
            "id": "injectable-HttpErrorInterceptor-2f5406b790321d4e3d96b876cb84884d9ece82fdc4ec72bae14f695ccc33203bb82a127cb3d2060692e7460b208fc7c4fa4e05324ad087c7aab583ba9ad03243",
            "file": "lib/http-interceptor/http-error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n将错误响应包装为统一格式\n",
                    "description": "<p>将错误响应包装为统一格式</p>\n",
                    "jsdoctags": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<NzSafeAny>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>http 请求发生错误后进行处理</p>\n",
            "rawdescription": "\n\nhttp 请求发生错误后进行处理\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { HttpError } from './http.model';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n/**\r\n * http 请求发生错误后进行处理\r\n */\r\n@Injectable()\r\nexport class HttpErrorInterceptor implements HttpInterceptor {\r\n  constructor() {}\r\n\r\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\r\n    return next.handle(req).pipe(catchError(error => this.handleError(error)));\r\n  }\r\n\r\n  /**\r\n   * 将错误响应包装为统一格式\r\n   */\r\n  handleError(errorResponse: HttpErrorResponse) {\r\n    const { status: code, error, message } = errorResponse;\r\n    return throwError(() => new HttpError(true, code, message, error));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "interceptor"
        },
        {
            "name": "HttpHeaderInterceptor",
            "id": "injectable-HttpHeaderInterceptor-b904d641349928d238be06be0b039706fd80397f43de2d4f2f8bb7e1432591d8a68fc6fb858be07f5ff8d7416adfd1621464edbbf615276ee43fda910c4b1996",
            "file": "lib/http-interceptor/http-header.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<NzSafeAny>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>对请求头进行处理</p>\n",
            "rawdescription": "\n\n对请求头进行处理\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { NzxAntdService } from '@xmagic/nzx-antd';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n/**\r\n * 对请求头进行处理\r\n */\r\n@Injectable()\r\nexport class HttpHeaderInterceptor implements HttpInterceptor {\r\n  constructor(protected antdService: NzxAntdService) {}\r\n\r\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\r\n    const headers: Record<string, string> = { 'X-Requested-With': 'XMLHttpRequest' };\r\n    if (\r\n      !req.headers.has('Content-Type') &&\r\n      !(req.body instanceof FormData || req.body instanceof ArrayBuffer || req.body instanceof Blob)\r\n    ) {\r\n      headers['Content-Type'] =\r\n        this.antdService.contentType === 'form'\r\n          ? 'application/x-www-form-urlencoded'\r\n          : 'application/json;charset=utf-8';\r\n    }\r\n    const clone = req.clone({\r\n      setHeaders: headers\r\n    });\r\n    return next.handle(clone);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "HttpLoadingInterceptor",
            "id": "injectable-HttpLoadingInterceptor-2a6eeba5708b204d8c458440707b6addbbfd542cba90b03e078eb764603d99b7c68d693aaa03eb1179c3449e60514119d2e06d567d7676eb6c1c0d2773c60fed",
            "file": "lib/http-interceptor/http-loading.interceptor.ts",
            "properties": [
                {
                    "name": "requestCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showStatusChange",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n隐藏loading\n",
                    "description": "<p>隐藏loading</p>\n"
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<NzSafeAny>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示loading\n",
                    "description": "<p>显示loading</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>http 请求发送时，调用 loading service 显示加载中图标或者做一些其它处理。</p>\n",
            "rawdescription": "\n\nhttp 请求发送时，调用 loading service 显示加载中图标或者做一些其它处理。\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, finalize } from 'rxjs/operators';\r\nimport { HttpLoadingService } from './http-loading.service';\r\nimport { LOADING_ENABLED } from '@xmagic/nzx-antd/service';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n/**\r\n * http 请求发送时，调用 loading service 显示加载中图标或者做一些其它处理。\r\n */\r\n@Injectable()\r\nexport class HttpLoadingInterceptor implements HttpInterceptor {\r\n  private showStatusChange = new Subject<boolean>();\r\n  private requestCount = 0;\r\n\r\n  constructor(private loadingService: HttpLoadingService) {\r\n    this.loadingService.init(this.showStatusChange.pipe(filter(() => this.requestCount === 0)));\r\n  }\r\n\r\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\r\n    const show = req.context.get(LOADING_ENABLED);\r\n    if (show) {\r\n      this.show();\r\n    }\r\n    return next.handle(req).pipe(finalize(() => show && this.hide()));\r\n  }\r\n\r\n  /**\r\n   * 显示loading\r\n   */\r\n  show() {\r\n    this.showStatusChange.next(true);\r\n    this.requestCount++;\r\n  }\r\n\r\n  /**\r\n   * 隐藏loading\r\n   */\r\n  hide() {\r\n    this.requestCount--;\r\n    this.showStatusChange.next(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loadingService",
                        "type": "HttpLoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "loadingService",
                        "type": "HttpLoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "HttpParamsInterceptor",
            "id": "injectable-HttpParamsInterceptor-790b6683463a394dc95c1d6e1be69ebc3699c846db237018274de6b600bc05a265f63d72b16dbca7d8f4b2396ae47944e8492b0d86aece71e43a7a6946955aa1",
            "file": "lib/http-interceptor/http-params.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<NzSafeAny>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processGetParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processParameters",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>请求参数处理</p>\n",
            "rawdescription": "\n\n请求参数处理\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpParams, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpDefaultCodec } from './http-default-encoder';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\n\r\n/**\r\n * 请求参数处理\r\n */\r\n@Injectable()\r\nexport class HttpParamsInterceptor implements HttpInterceptor {\r\n  constructor() {}\r\n\r\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\r\n    return next.handle(this.processParameters(req));\r\n  }\r\n\r\n  processParameters(req: HttpRequest<NzSafeAny>) {\r\n    if (req.params == null) {\r\n      return req;\r\n    }\r\n    return req.clone({\r\n      params: this.processGetParams(req.params)\r\n    });\r\n  }\r\n\r\n  processGetParams(params: HttpParams) {\r\n    const result: Record<string, NzSafeAny> = { r: Math.random() };\r\n\r\n    params.keys().reduce((acc, key) => {\r\n      const values = params.getAll(key);\r\n      if (values) {\r\n        acc[key] = values.length > 1 ? values : values[0];\r\n        return acc;\r\n      }\r\n      return acc;\r\n    }, result);\r\n\r\n    return new HttpParams({ fromString: Utils.serialize(result), encoder: HttpDefaultCodec });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "interceptor"
        },
        {
            "name": "HttpResponseParseInterceptor",
            "id": "injectable-HttpResponseParseInterceptor-cd997a590da647e7da05f78501c2e7e3dc15f4f15e10a9cb51c231780c65fad51d53a5749e9ba64db90046fbd78d1f39c0ef555df994fd38d35f6a098ddc4fd1",
            "file": "lib/http-interceptor/http-response-parse.interceptor.ts",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Required<ResponseSetting>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processData",
                    "args": [
                        {
                            "name": "subscriber",
                            "type": "Subscriber<HttpEvent<T>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "req",
                            "type": "HttpRequest<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "response",
                            "type": "HttpResponse<ResponseModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "subscriber",
                            "type": "Subscriber<HttpEvent<T>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "req",
                            "type": "HttpRequest<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "response",
                            "type": "HttpResponse<ResponseModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>处理服务器返回的数据，改变其结构。</p>\n",
            "rawdescription": "\n\n处理服务器返回的数据，改变其结构。\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpEventType,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { Observable, Subscriber } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { HttpError, ResponseModel } from './http.model';\r\nimport { DEFAULT_RESPONSE_SETTING, NzxAntdService, ResponseSetting } from '@xmagic/nzx-antd';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\n\r\n/**\r\n * 处理服务器返回的数据，改变其结构。\r\n */\r\n@Injectable()\r\nexport class HttpResponseParseInterceptor implements HttpInterceptor {\r\n  protected readonly settings: Required<ResponseSetting>;\r\n  constructor(protected antdService: NzxAntdService) {\r\n    this.settings = Utils.extend({}, DEFAULT_RESPONSE_SETTING, this.antdService.response) as Required<ResponseSetting>;\r\n  }\r\n\r\n  intercept<T>(req: HttpRequest<T>, next: HttpHandler): Observable<HttpEvent<T>> {\r\n    return next.handle(req).pipe(\r\n      switchMap(response => {\r\n        return new Observable<HttpEvent<T>>(observ => {\r\n          if (response.type !== HttpEventType.Response) {\r\n            observ.next(response);\r\n            return;\r\n          }\r\n          this.processData<T>(observ, req, response);\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  protected processData<T>(\r\n    subscriber: Subscriber<HttpEvent<T>>,\r\n    req: HttpRequest<T>,\r\n    response: HttpResponse<ResponseModel>\r\n  ) {\r\n\r\n    const contentType = (response.headers.get('content-type') || '').toLowerCase();\r\n\r\n    const isJsonResponse = contentType.indexOf('application/json') !== -1;\r\n    if (!isJsonResponse) {\r\n      subscriber.next(response as HttpResponse<T>);\r\n      subscriber.complete();\r\n      return;\r\n    }\r\n\r\n    const { data: dataProp, code: codeProp, message: messageProp, success: successProp } = this.settings;\r\n\r\n    // 处理下载文件错误\r\n    if (isJsonResponse && response.body instanceof Blob) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const err = JSON.parse(reader.result as string) as ResponseModel<T>;\r\n        const httpError = new HttpError(false, Utils.get(err, codeProp, 0), Utils.get(err, messageProp), err);\r\n        subscriber.error(httpError);\r\n      };\r\n      reader.readAsText(response.body);\r\n      return;\r\n    }\r\n\r\n    const body = response.body || {};\r\n    if (successProp(response)) {\r\n      const resp = response.clone({ body: dataProp ? Utils.get(body, dataProp) : body });\r\n      subscriber.next(resp);\r\n      subscriber.complete();\r\n    } else {\r\n      const httpError = new HttpError(false, Utils.get(body, codeProp, 0), Utils.get(body, messageProp), body);\r\n      subscriber.error(httpError);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "HttpUrlInterceptor",
            "id": "injectable-HttpUrlInterceptor-50b6f89a774a664ec1fd061b02bff57a2906c3ccf3c0935d94df5ae3bac2d9841b2cf7fae9d03bfdb343620d62800d3cef28b1f7060819256c91082dc56aef29",
            "file": "lib/http-interceptor/http-url.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<NzSafeAny>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processUrl",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<NzSafeAny>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>处理 URL</p>\n",
            "rawdescription": "\n\n处理 URL\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { HttpRequestOptions, NzxAntdService } from '@xmagic/nzx-antd';\r\n\r\n/**\r\n * 处理 URL\r\n */\r\n@Injectable()\r\nexport class HttpUrlInterceptor implements HttpInterceptor {\r\n  constructor(protected antdService: NzxAntdService) {}\r\n\r\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\r\n    return next.handle(this.processUrl(req));\r\n  }\r\n\r\n  processUrl(req: HttpRequest<NzSafeAny>): HttpRequest<NzSafeAny> {\r\n    let url = req.url;\r\n    if (!/^http/i.test(url)) {\r\n      if (!/^\\//.test(url)) {\r\n        url = '/' + url;\r\n      }\r\n      url = (this.antdService.basePath || '') + url;\r\n    }\r\n\r\n    // 使用自定义请求处理器\r\n    if (this.antdService.handleRequest) {\r\n      const newReq = this.antdService.handleRequest(req, url);\r\n      if (newReq) {\r\n        if ((newReq as HttpRequest<NzSafeAny>).clone) {\r\n          return newReq as HttpRequest<NzSafeAny>;\r\n        }\r\n        const option = newReq as HttpRequestOptions;\r\n        if (!option.url) {\r\n          option.url = url;\r\n        }\r\n        return req.clone(option);\r\n      }\r\n    }\r\n    return req.clone({ url });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AuthContext",
            "id": "class-AuthContext-bd1612d1e33eadfc4c49db9d0c7a9fa2c458ab1fc1a9f2c11a2aae97cd92e8d271761213d1aa833fc77d6d9ad1ba33494038114eb88f8481d6b3fbd9e1b4503b",
            "file": "lib/directive/auth.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { NzxAntdService } from '@xmagic/nzx-antd';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n/**\r\n * 权限指令, 有权限渲染模板,否则渲染else模板\r\n * @example\r\n * <button *auth=\"['code1', 'code2']; else notAuth\">有权限时显示</button>\r\n * <button *auth=\"'code1'; else notAuth\">有权限时显示</button>\r\n * <ng-template #notAuth>没有权限时显示</ng-template>\r\n */\r\n@Directive({\r\n  selector: '[auth]'\r\n})\r\nexport class AuthDirective<T = unknown> implements OnDestroy {\r\n  /** @internal */\r\n  static authUseIfTypeGuard: void;\r\n  static ngTemplateGuard_auth: 'binding';\r\n  private readonly changeSubscription?: Subscription;\r\n  private authSubscription?: Subscription;\r\n\r\n  protected _context: AuthContext<T> = new AuthContext<T>();\r\n  protected _thenTemplateRef: TemplateRef<AuthContext<T>> | null = null;\r\n  protected _elseTemplateRef: TemplateRef<AuthContext<T>> | null = null;\r\n  protected _thenViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\r\n  protected _elseViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\r\n\r\n  /**\r\n   *\r\n   * 为 `auth` 将要渲染的模板确保正确的上下文类型。\r\n   * 该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\r\n   *\r\n   */\r\n  static ngTemplateContextGuard<T>(\r\n    dir: AuthDirective<T>,\r\n    ctx: NzSafeAny\r\n  ): ctx is AuthContext<Exclude<T, false | 0 | '' | null | undefined>> {\r\n    return true;\r\n  }\r\n\r\n  protected hasAuth: Required<NzxAntdService>['hasAuth'] = () => of(true);\r\n\r\n  constructor(\r\n    protected _viewContainer: ViewContainerRef,\r\n    public templateRef: TemplateRef<AuthContext<T>>,\r\n    public antdService: NzxAntdService\r\n  ) {\r\n    this._thenTemplateRef = templateRef;\r\n\r\n    if (this.antdService.authChange) {\r\n      this.changeSubscription = this.antdService.authChange().subscribe(() => this._updateView());\r\n    }\r\n\r\n    if (this.antdService.hasAuth) {\r\n      this.hasAuth = this.antdService.hasAuth;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 布尔表达式，将其作为显示模板的条件进行计算。\r\n   *\r\n   */\r\n  @Input()\r\n  set auth(condition: T) {\r\n    this._context.$implicit = this._context.auth = condition;\r\n    this._updateView();\r\n  }\r\n\r\n  /**\r\n   * 当此条件表达式计算为 true 时要显示的模板。\r\n   */\r\n  @Input()\r\n  set authThen(templateRef: TemplateRef<AuthContext<T>> | null) {\r\n    assertTemplate('authThen', templateRef);\r\n    this._thenTemplateRef = templateRef;\r\n    this._thenViewRef = null; // clear previous view if any.\r\n    this._updateView();\r\n  }\r\n\r\n  /**\r\n   * 当此条件表达式计算为 false 时要显示的模板。\r\n   */\r\n  @Input()\r\n  set authElse(templateRef: TemplateRef<AuthContext<T>> | null) {\r\n    assertTemplate('authElse', templateRef);\r\n    this._elseTemplateRef = templateRef;\r\n    this._elseViewRef = null; // clear previous view if any.\r\n    this._updateView();\r\n  }\r\n\r\n  protected _updateView() {\r\n    if (this.authSubscription) {\r\n      this.authSubscription.unsubscribe();\r\n      this.authSubscription = undefined;\r\n    }\r\n    this.authSubscription = this.hasAuth(this._context.$implicit).subscribe(auth => {\r\n      if (this.canRender(auth, this._context.$implicit)) {\r\n        if (!this._thenViewRef) {\r\n          this._viewContainer.clear();\r\n          this._elseViewRef = null;\r\n          if (this._thenTemplateRef) {\r\n            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\r\n          }\r\n        }\r\n      } else {\r\n        if (!this._elseViewRef) {\r\n          this._viewContainer.clear();\r\n          this._thenViewRef = null;\r\n          if (this._elseTemplateRef) {\r\n            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 是否允许渲染\r\n   * @param hasAuth 是否有权限\r\n   * @param value 权限码\r\n   * @protected\r\n   */\r\n  protected canRender(hasAuth: boolean, value: T) {\r\n    return hasAuth;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.changeSubscription) {\r\n      this.changeSubscription.unsubscribe();\r\n    }\r\n    if (this.authSubscription) {\r\n      this.authSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class AuthContext<T = unknown> {\r\n  public $implicit: T = null!;\r\n  public auth: T = null!;\r\n}\r\n\r\nfunction assertTemplate(property: string, templateRef: TemplateRef<NzSafeAny> | null): void {\r\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\r\n  if (!isTemplateRefOrNull) {\r\n    throw new Error(`${property} must be a TemplateRef, but received '${templateRef}'.`);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "$implicit",
                    "defaultValue": "null!",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "auth",
                    "defaultValue": "null!",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseControl",
            "id": "class-BaseControl-cb8fb97d879a7502a50421566f311fce59a7c5e23abdd29677d69932ad035d694541073c60d2e0053d1e7b8d3e7504700253638bcac7917d25d4cf1800120624",
            "file": "lib/util/base-control.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class BaseControl<T> {\r\n  protected nzxDisabled?: boolean;\r\n  onChange: (value: T) => void = () => null;\r\n  onTouched: () => void = () => null;\r\n\r\n  registerOnChange(fn: (_: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.nzxDisabled = isDisabled;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "nzxDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormUtilsClass",
            "id": "class-FormUtilsClass-1de9f04cbbe1438f99c0eff9c952f47aa6ab1e0191bd52a5bb5a99283866ee5828f9363222f16bbfde06033be0ef1335216944bb0e64b86e1e6e76c8ba81e75d",
            "file": "lib/util/form-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, FormArray, FormControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { Utils } from './utils';\r\n\r\n/**\r\n * 表单工具\r\n */\r\nexport class FormUtilsClass {\r\n  /**\r\n   * 遍历表单控件\r\n   * @param form 表单或者表单元素\r\n   * @param callback 回调函数\r\n   */\r\n  forEachFormControl(form: AbstractControl, callback: (ctrl: AbstractControl) => void) {\r\n    if (form instanceof FormGroup) {\r\n      callback(form);\r\n      for (const i in form.controls) {\r\n        const ctrl = form.controls[i];\r\n        if (ctrl instanceof FormControl) {\r\n          callback(ctrl);\r\n        } else {\r\n          this.forEachFormControl(ctrl, callback);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (form instanceof FormArray) {\r\n      callback(form);\r\n      for (let i = 0; i < form.length; i++) {\r\n        const ctrl = form.at(i);\r\n        if (ctrl instanceof FormControl) {\r\n          callback(ctrl);\r\n        } else {\r\n          this.forEachFormControl(ctrl, callback);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (form instanceof FormControl) {\r\n      callback(form);\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行验证\r\n   * @param form 表单\r\n   * @param opts 配置\r\n   */\r\n  validate(\r\n    form: AbstractControl,\r\n    opts: {\r\n      onlySelf?: boolean;\r\n      emitEvent?: boolean;\r\n      updateValueAndValidity?: boolean;\r\n    } = { updateValueAndValidity: false }\r\n  ): boolean {\r\n    this.forEachFormControl(form, ctrl => {\r\n      ctrl.markAsDirty(opts);\r\n      opts.updateValueAndValidity && ctrl.updateValueAndValidity(opts);\r\n    });\r\n    return form.valid;\r\n  }\r\n\r\n  /**\r\n   * 清空错误信息\r\n   */\r\n  clearError(form: AbstractControl): void {\r\n    this.forEachFormControl(form, ctrl => ctrl.setErrors(null));\r\n  }\r\n\r\n  /**\r\n   * 获取错误信息\r\n   * @param control\r\n   */\r\n  getMessage(control: AbstractControl): string | null {\r\n    if (!control.errors) {\r\n      return null;\r\n    }\r\n\r\n    for (const key in control.errors) {\r\n      return control.errors[key]?.message || '输入不正确';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 必填验证\r\n   * @param message 错误信息\r\n   * @param hasValue 是否有值函数判断\r\n   */\r\n  required<T = NzSafeAny>(message: string = '不能为空', hasValue: (value: T) => boolean = value => !!value): ValidatorFn {\r\n    return (control: AbstractControl) => {\r\n      return hasValue(control.value) ? null : { required: { message, value: control.value } };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 根据指定函数验证\r\n   * @param operator 操作函数\r\n   * @param errMessage 错误信息\r\n   */\r\n  singleValidator<T>(operator: (value: T) => boolean, errMessage: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl) => {\r\n      if (control.value == null || control.value.length === 0) {\r\n        return null;\r\n      }\r\n      return operator(control.value) ? null : errMessage;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 根据正则表达式验证\r\n   * @param exp 正则表达式\r\n   * @param message 错误信息\r\n   */\r\n  pattern(exp: RegExp | string, message: string): ValidatorFn {\r\n    const reg = Utils.isString(exp) ? new RegExp(exp, 'mig') : exp;\r\n    return this.singleValidator<string>(v => reg.test(v), { pattern: { message } });\r\n  }\r\n\r\n  /**\r\n   * 小于验证\r\n   * @param num 数字\r\n   * @param message 错误信息\r\n   */\r\n  lt(num: number, message: string): ValidatorFn {\r\n    return this.singleValidator<string>(v => Number(v) < num, { lt: { message } });\r\n  }\r\n\r\n  /**\r\n   * 小于等于验证\r\n   * @param num 数字\r\n   * @param message 错误信息\r\n   */\r\n  lte(num: number, message: string): ValidatorFn {\r\n    return this.singleValidator<string>(v => Number(v) <= num, { lte: { message } });\r\n  }\r\n\r\n  /**\r\n   * 大于验证\r\n   * @param num 数字\r\n   * @param message 错误信息\r\n   */\r\n  gt(num: number, message: string): ValidatorFn {\r\n    return this.singleValidator<string>(v => Number(v) > num, { gt: { message } });\r\n  }\r\n\r\n  /**\r\n   * 大于等于验证\r\n   * @param num 数字\r\n   * @param message 错误信息\r\n   */\r\n  gte(num: number, message: string): ValidatorFn {\r\n    return this.singleValidator<string>(v => Number(v) >= num, { gte: { message } });\r\n  }\r\n\r\n  /**\r\n   * 包含指定字符串验证\r\n   * @param str 字符串\r\n   * @param ignore 忽略大小写\r\n   * @param message 错误信息\r\n   */\r\n  contains(str: string, ignore: boolean, message: string): ValidatorFn {\r\n    const newStr = ignore ? str.toLowerCase() : str;\r\n    return this.singleValidator<string>(v => (ignore ? v.toLowerCase() : v).indexOf(newStr) !== -1, {\r\n      contains: { message }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * min <= x <= max 验证\r\n   * @param min 最小值\r\n   * @param max 最大值\r\n   * @param message 错误信息\r\n   */\r\n  between(min: number, max: number, message: string): ValidatorFn {\r\n    return this.singleValidator<string>(\r\n      value => {\r\n        const v = Number(value);\r\n        return v >= min && v <= max;\r\n      },\r\n      { between: { message } }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 数字校验\r\n   * @param minus 是否允许负数\r\n   * @param fraction 保留小数有效数字位数\r\n   * @param message 错误提示信息\r\n   */\r\n  number(minus?: boolean, fraction?: number, message: string = '数字格式错误'): ValidatorFn {\r\n    return this.singleValidator<string>(value => Utils.isNum(value, minus, fraction), { number: { message } });\r\n  }\r\n\r\n  /**\r\n   * 校验手机号（中国）\r\n   * @param message 错误提示信息\r\n   */\r\n  mobile(message: string = '手机号格式错误'): ValidatorFn {\r\n    return this.singleValidator<string>(value => Utils.isMobile(value), { mobile: { message } });\r\n  }\r\n\r\n  /**\r\n   * 校验邮箱\r\n   * @param message 错误提示信息\r\n   */\r\n  email(message: string = '邮箱格式错误'): ValidatorFn {\r\n    return this.singleValidator<string>(value => Utils.isEmail(value), { email: { message } });\r\n  }\r\n\r\n  /**\r\n   * 校验ip\r\n   * @param message 错误提示信息\r\n   */\r\n  ip(message: string = 'IP格式错误'): ValidatorFn {\r\n    return this.singleValidator<string>(value => Utils.isIp(value), { ip: { message } });\r\n  }\r\n\r\n  /**\r\n   * 校验url,支持ip v4, ip v6\r\n   * @param message 错误提示信息\r\n   */\r\n  url(message: string = 'URL格式错误'): ValidatorFn {\r\n    return this.singleValidator<string>(value => Utils.isUrl(value), { url: { message } });\r\n  }\r\n\r\n  /**\r\n   * 校验中文\r\n   * @param message 错误提示信息\r\n   */\r\n  chinese(message: string = '只允许输入中文字符'): ValidatorFn {\r\n    return this.singleValidator<string>(value => Utils.isChinese(value), { chinese: { message } });\r\n  }\r\n\r\n  /**\r\n   * 验证两个字段\r\n   * @param form 表单\r\n   * @param otherField 另一个被验证的字段名称\r\n   * @param compare 比较器\r\n   * @param errMessage  错误提示\r\n   */\r\n  twoControl(\r\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\r\n    otherField: Array<string | number> | string,\r\n    compare: (v1: NzSafeAny, v2: NzSafeAny) => boolean,\r\n    errMessage: ValidationErrors\r\n  ): ValidatorFn {\r\n    const fn = Utils.isFunction(form) ? form : () => form;\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (!control?.value) {\r\n        return null;\r\n      }\r\n\r\n      const other = fn().get(otherField);\r\n      if (!other?.value) {\r\n        return null;\r\n      }\r\n\r\n      if (compare(other?.value, control?.value)) {\r\n        if (!other.valid) {\r\n          other.updateValueAndValidity();\r\n        }\r\n        return null;\r\n      }\r\n      return errMessage;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 两个字段相等验证\r\n   * @param form 表单\r\n   * @param otherField 另一个被验证的字段名\r\n   * @param message 提示信息\r\n   */\r\n  equalControl(\r\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\r\n    otherField: Array<string | number> | string,\r\n    message: string\r\n  ): ValidatorFn {\r\n    const errMessage = { equalValidator: { message } };\r\n    return this.twoControl(form, otherField, (v1, v2) => v1 === v2, errMessage);\r\n  }\r\n\r\n  /**\r\n   * 大于另一个字段验证\r\n   * @param form 表单\r\n   * @param otherField 另一个被验证的字段名\r\n   * @param message 提示信息\r\n   */\r\n  gtControl(form: FormGroup | FormArray, otherField: Array<string | number> | string, message: string): ValidatorFn {\r\n    const errMessage = { gtValidator: { message } };\r\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) > Number(v2), errMessage);\r\n  }\r\n\r\n  /**\r\n   * 大于等于另一个字段验证\r\n   * @param form 表单\r\n   * @param otherField 另一个被验证的字段名\r\n   * @param message 提示信息\r\n   */\r\n  gteControl(\r\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\r\n    otherField: Array<string | number> | string,\r\n    message: string\r\n  ): ValidatorFn {\r\n    const errMessage = { gteValidator: { message } };\r\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) >= Number(v2), errMessage);\r\n  }\r\n\r\n  /**\r\n   * 小于于另一个字段验证\r\n   * @param form 表单\r\n   * @param otherField 另一个被验证的字段名\r\n   * @param message 提示信息\r\n   */\r\n  ltControl(\r\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\r\n    otherField: Array<string | number> | string,\r\n    message: string\r\n  ): ValidatorFn {\r\n    const errMessage = { ltValidator: { message } };\r\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) < Number(v2), errMessage);\r\n  }\r\n\r\n  /**\r\n   * 小于等于另一个字段验证\r\n   * @param form 表单\r\n   * @param otherField 另一个被验证的字段名\r\n   * @param message 提示信息\r\n   */\r\n  lteControl(\r\n    form: FormGroup | FormArray | (() => FormGroup | FormArray),\r\n    otherField: Array<string | number> | string,\r\n    message: string\r\n  ): ValidatorFn {\r\n    const errMessage = { lteValidator: { message } };\r\n    return this.twoControl(form, otherField, (v1, v2) => Number(v1) <= Number(v2), errMessage);\r\n  }\r\n\r\n  /**\r\n   * 唯一验证\r\n   * @param form\r\n   * @param message\r\n   */\r\n  unique(form: FormGroup | FormArray, message: string = '不允许重复'): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (!control.value) {\r\n        return null;\r\n      }\r\n      for (const c in form.controls) {\r\n        const ctl = form.get(c);\r\n        if (control === ctl) {\r\n          continue;\r\n        }\r\n        if (control.value === ctl?.value) {\r\n          return { uniqueValidator: { message } };\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n}\r\n\r\nexport const FormUtils = new FormUtilsClass();\r\n",
            "properties": [],
            "description": "<p>表单工具</p>\n",
            "rawdescription": "\n\n表单工具\n",
            "methods": [
                {
                    "name": "between",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmin <= x <= max 验证\n",
                    "description": "<p>min &lt;= x &lt;= max 验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4426,
                                "end": 4429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4420,
                                "end": 4425,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最小值</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4447,
                                "end": 4450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4441,
                                "end": 4446,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最大值</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4468,
                                "end": 4475,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4462,
                                "end": 4467,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "chinese",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'只允许输入中文字符'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n校验中文\n",
                    "description": "<p>校验中文</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5945,
                                "end": 5952,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'只允许输入中文字符'",
                            "tagName": {
                                "pos": 5939,
                                "end": 5944,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "clearError",
                    "args": [
                        {
                            "name": "form",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n清空错误信息\n",
                    "description": "<p>清空错误信息</p>\n",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "contains",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ignore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n包含指定字符串验证\n",
                    "description": "<p>包含指定字符串验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4038,
                                "end": 4041,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "str"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4032,
                                "end": 4037,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>字符串</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4059,
                                "end": 4065,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "ignore"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4053,
                                "end": 4058,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>忽略大小写</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4085,
                                "end": 4092,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4079,
                                "end": 4084,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "email",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'邮箱格式错误'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n校验邮箱\n",
                    "description": "<p>校验邮箱</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5316,
                                "end": 5323,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'邮箱格式错误'",
                            "tagName": {
                                "pos": 5310,
                                "end": 5315,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "equalControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherField",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n两个字段相等验证\n",
                    "description": "<p>两个字段相等验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7051,
                                "end": 7055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7045,
                                "end": 7050,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7072,
                                "end": 7082,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "otherField"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7066,
                                "end": 7071,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>另一个被验证的字段名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7107,
                                "end": 7114,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7101,
                                "end": 7106,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "forEachFormControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "ctrl",
                                    "type": "AbstractControl",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n遍历表单控件\n",
                    "description": "<p>遍历表单控件</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 290,
                                "end": 294,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 284,
                                "end": 289,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单或者表单元素</p>\n"
                        },
                        {
                            "name": {
                                "pos": 317,
                                "end": 325,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "callback"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "ctrl",
                                    "type": "AbstractControl",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 311,
                                "end": 316,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>回调函数</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取错误信息\n",
                    "description": "<p>获取错误信息</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1816,
                                "end": 1823,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "control"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1810,
                                "end": 1815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "gt",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n大于验证\n",
                    "description": "<p>大于验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3600,
                                "end": 3603,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "num"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3594,
                                "end": 3599,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>数字</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3620,
                                "end": 3627,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3614,
                                "end": 3619,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "gtControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherField",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n大于另一个字段验证\n",
                    "description": "<p>大于另一个字段验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7483,
                                "end": 7487,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7477,
                                "end": 7482,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7504,
                                "end": 7514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "otherField"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7498,
                                "end": 7503,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>另一个被验证的字段名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7539,
                                "end": 7546,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7533,
                                "end": 7538,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "gte",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n大于等于验证\n",
                    "description": "<p>大于等于验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3816,
                                "end": 3819,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "num"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3810,
                                "end": 3815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>数字</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3836,
                                "end": 3843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3830,
                                "end": 3835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "gteControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherField",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n大于等于另一个字段验证\n",
                    "description": "<p>大于等于另一个字段验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7873,
                                "end": 7877,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7867,
                                "end": 7872,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7894,
                                "end": 7904,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "otherField"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7888,
                                "end": 7893,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>另一个被验证的字段名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7929,
                                "end": 7936,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7923,
                                "end": 7928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "ip",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'IP格式错误'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n校验ip\n",
                    "description": "<p>校验ip</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5525,
                                "end": 5532,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'IP格式错误'",
                            "tagName": {
                                "pos": 5519,
                                "end": 5524,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "lt",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n小于验证\n",
                    "description": "<p>小于验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3167,
                                "end": 3170,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "num"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3161,
                                "end": 3166,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>数字</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3187,
                                "end": 3194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3181,
                                "end": 3186,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "ltControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherField",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n小于于另一个字段验证\n",
                    "description": "<p>小于于另一个字段验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8317,
                                "end": 8321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8311,
                                "end": 8316,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8338,
                                "end": 8348,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "otherField"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8332,
                                "end": 8337,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>另一个被验证的字段名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8373,
                                "end": 8380,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8367,
                                "end": 8372,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "lte",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n小于等于验证\n",
                    "description": "<p>小于等于验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3383,
                                "end": 3386,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "num"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3377,
                                "end": 3382,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>数字</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3403,
                                "end": 3410,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3397,
                                "end": 3402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "lteControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherField",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n小于等于另一个字段验证\n",
                    "description": "<p>小于等于另一个字段验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8759,
                                "end": 8763,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8753,
                                "end": 8758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8780,
                                "end": 8790,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "otherField"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8774,
                                "end": 8779,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>另一个被验证的字段名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8815,
                                "end": 8822,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8809,
                                "end": 8814,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "mobile",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'手机号格式错误'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n校验手机号（中国）\n",
                    "description": "<p>校验手机号（中国）</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5103,
                                "end": 5110,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'手机号格式错误'",
                            "tagName": {
                                "pos": 5097,
                                "end": 5102,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "number",
                    "args": [
                        {
                            "name": "minus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "fraction",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'数字格式错误'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n数字校验\n",
                    "description": "<p>数字校验</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4777,
                                "end": 4782,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minus"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4771,
                                "end": 4776,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否允许负数</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4803,
                                "end": 4811,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fraction"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4797,
                                "end": 4802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>保留小数有效数字位数</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4836,
                                "end": 4843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'数字格式错误'",
                            "tagName": {
                                "pos": 4830,
                                "end": 4835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "pattern",
                    "args": [
                        {
                            "name": "exp",
                            "type": "RegExp | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n根据正则表达式验证\n",
                    "description": "<p>根据正则表达式验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2866,
                                "end": 2869,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "exp"
                            },
                            "type": "RegExp | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2860,
                                "end": 2865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>正则表达式</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2889,
                                "end": 2896,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2883,
                                "end": 2888,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "required",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'不能为空'"
                        },
                        {
                            "name": "hasValue",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "defaultValue": "value => !!value"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n必填验证\n",
                    "description": "<p>必填验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2104,
                                "end": 2111,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'不能为空'",
                            "tagName": {
                                "pos": 2098,
                                "end": 2103,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2130,
                                "end": 2138,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasValue"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "defaultValue": "value => !!value",
                            "tagName": {
                                "pos": 2124,
                                "end": 2129,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否有值函数判断</p>\n"
                        }
                    ]
                },
                {
                    "name": "singleValidator",
                    "args": [
                        {
                            "name": "operator",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "errMessage",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n根据指定函数验证\n",
                    "description": "<p>根据指定函数验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2465,
                                "end": 2473,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operator"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 2459,
                                "end": 2464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>操作函数</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2492,
                                "end": 2502,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errMessage"
                            },
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2486,
                                "end": 2491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "twoControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherField",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "compare",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "v1",
                                    "type": "NzSafeAny",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "v2",
                                    "type": "NzSafeAny",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "errMessage",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n验证两个字段\n",
                    "description": "<p>验证两个字段</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6165,
                                "end": 6169,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6159,
                                "end": 6164,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6186,
                                "end": 6196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "otherField"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6180,
                                "end": 6185,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>另一个被验证的字段名称</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6222,
                                "end": 6229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "compare"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "v1",
                                    "type": "NzSafeAny",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "v2",
                                    "type": "NzSafeAny",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 6216,
                                "end": 6221,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>比较器</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6247,
                                "end": 6257,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errMessage"
                            },
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6241,
                                "end": 6246,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示</p>\n"
                        }
                    ]
                },
                {
                    "name": "unique",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'不允许重复'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n唯一验证\n",
                    "description": "<p>唯一验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9197,
                                "end": 9201,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9191,
                                "end": 9196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 9215,
                                "end": 9222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'不允许重复'",
                            "tagName": {
                                "pos": 9209,
                                "end": 9214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "url",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'URL格式错误'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n校验url,支持ip v4, ip v6\n",
                    "description": "<p>校验url,支持ip v4, ip v6</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5741,
                                "end": 5748,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'URL格式错误'",
                            "tagName": {
                                "pos": 5735,
                                "end": 5740,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>错误提示信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "form",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opts",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ updateValueAndValidity: false }"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n执行验证\n",
                    "description": "<p>执行验证</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1204,
                                "end": 1208,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1198,
                                "end": 1203,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1225,
                                "end": 1229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "opts"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ updateValueAndValidity: false }",
                            "tagName": {
                                "pos": 1219,
                                "end": 1224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>配置</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpError",
            "id": "class-HttpError-680ab031012390456d98af9e7f62a6723cdacbb90ac05f8995f40f11f7f0bbdc25005d25e8c57d52b0bc3b3583e7f75687404fb658612495c239bae271de3004",
            "file": "lib/http-interceptor/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n/**\r\n * 服务端响应实体, 可以通过设置 http请求参数\r\n * {observe: 'response'} 拿到完整数据\r\n */\r\nexport interface ResponseModel<T = NzSafeAny> {\r\n  /**\r\n   * 服务端返回编码\r\n   */\r\n  code?: number;\r\n  message?: string;\r\n  data?: T;\r\n}\r\n\r\n/**\r\n * http 请求出错后，在中间件中封闭为统一的格式。\r\n */\r\nexport class HttpError<T = NzSafeAny> {\r\n  /**\r\n   *\r\n   * @param httpError 是否是HTTP原始异常\r\n   * @param code 错误码, 如果是HTTP原始异常,则为status code\r\n   * @param message 错误消息\r\n   * @param body 返回数据\r\n   */\r\n  constructor(public httpError: boolean, public code: number, public message: string, public body: T) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpError",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "code",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "body",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "rawdescription": "\n\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 368,
                            "end": 377,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "httpError"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 362,
                            "end": 367,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>是否是HTTP原始异常</p>\n"
                    },
                    {
                        "name": {
                            "pos": 403,
                            "end": 407,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "code"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 397,
                            "end": 402,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>错误码, 如果是HTTP原始异常,则为status code</p>\n"
                    },
                    {
                        "name": {
                            "pos": 452,
                            "end": 459,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "message"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 446,
                            "end": 451,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>错误消息</p>\n"
                    },
                    {
                        "name": {
                            "pos": 478,
                            "end": 482,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "body"
                        },
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 472,
                            "end": 477,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>返回数据</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "返回数据",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "错误码, 如果是HTTP原始异常,则为status code",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "httpError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "是否是HTTP原始异常",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "错误消息",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>http 请求出错后，在中间件中封闭为统一的格式。</p>\n",
            "rawdescription": "\n\nhttp 请求出错后，在中间件中封闭为统一的格式。\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LetContext",
            "id": "class-LetContext-3c03768af4325822c834e19d0f50d87d5153d3255a36f5ab67bb7681a9c4fde5081489f6803b058f6e9e1df93df555885799f14952d7e9374e40a49bd68d39c8",
            "file": "lib/directive/let.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n/**\r\n * 允许在模板内复用计算值（包含异步），避免重复重新计算。\r\n * @example\r\n *\r\n * <div *let=\"value1 as v\">\r\n *   <p>{{ v }}</p>\r\n * </div>\r\n * <div *let=\"time$ | async as time\">\r\n *   <p>{{ time }}</p>\r\n * </div>\r\n */\r\n@Directive({ selector: '[let]' })\r\nexport class LetDirective<T> {\r\n  @Input() let!: T;\r\n\r\n  constructor(@Inject(ViewContainerRef) vc: ViewContainerRef, @Inject(TemplateRef) ref: TemplateRef<LetContext<T>>) {\r\n    vc.createEmbeddedView(ref, new LetContext<T>(this));\r\n  }\r\n\r\n  static ngTemplateContextGuard<T>(_dir: LetDirective<T>, _ctx: NzSafeAny): _ctx is LetDirective<T> {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class LetContext<T> {\r\n  constructor(private readonly directive: LetDirective<T>) {}\r\n\r\n  get $implicit(): T {\r\n    return this.directive.let;\r\n  }\r\n\r\n  get let(): T {\r\n    return this.directive.let;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "directive",
                        "type": "LetDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "directive",
                        "type": "LetDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "$implicit": {
                    "name": "$implicit",
                    "getSignature": {
                        "name": "$implicit",
                        "type": "",
                        "returnType": "T",
                        "line": 31
                    }
                },
                "let": {
                    "name": "let",
                    "getSignature": {
                        "name": "let",
                        "type": "",
                        "returnType": "T",
                        "line": 35
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UtilsClass",
            "id": "class-UtilsClass-dd93b9b6c9544ce52da04cd7d9cf61b9924f5d8b77b9b228de9130dae7dee91dd931d6f825d18f99f938d217db23f5fa9b3f2c8dd7628abbb0d22e8e5fcb9f23",
            "file": "lib/util/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { isNil } from 'ng-zorro-antd/core/util';\r\nimport { Observable } from 'rxjs';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\nconst toStr = Object.prototype.toString;\r\nconst hasOwn = Object.prototype.hasOwnProperty;\r\nconst defineProperty = Object.defineProperty;\r\nconst gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nclass UtilsClass {\r\n  assign = this.extend;\r\n\r\n  defaultIfy<T = NzSafeAny>(obj: T, defaultValue: NzSafeAny) {\r\n    return isNil(obj) ? defaultValue : obj;\r\n  }\r\n\r\n  /**\r\n   * 根据属性路径获取对象的属性值\r\n   * @param obj 原始对象\r\n   * @param path 属性路径\r\n   * @param defaultValue 当属性不存在或为undefined返回defaultValue\r\n   */\r\n  get(obj: NzSafeAny, path?: string | string[], defaultValue?: NzSafeAny) {\r\n    if (!obj || path == null || path.length === 0) {\r\n      return defaultValue;\r\n    }\r\n    if (!Array.isArray(path)) {\r\n      path = path.indexOf('.') ? path.split('.') : [path];\r\n    }\r\n    if (path.length === 1) {\r\n      const checkObj = obj[path[0]];\r\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\r\n    }\r\n    return path.reduce((o, k) => (o || {})[k], obj) || defaultValue;\r\n  }\r\n\r\n  trim(string: string) {\r\n    return (string || '').replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '');\r\n  }\r\n\r\n  /**\r\n   * 获取唯一Id号\r\n   */\r\n  getUUID() {\r\n    return Date.now() + Math.random().toString().replace('0.', '');\r\n  }\r\n\r\n  /**\r\n   * 深度clone\r\n   * @param target\r\n   */\r\n  clone<T = NzSafeAny>(target: T): T {\r\n    const _target = Utils.isArray(target) ? [] : {};\r\n    return this.extend(_target as T, target);\r\n  }\r\n\r\n  // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\r\n  private setProperty<T = NzSafeAny>(target: T, options: { name: string; newValue: NzSafeAny }) {\r\n    if (defineProperty && options.name === '__proto__') {\r\n      defineProperty(target, options.name, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        value: options.newValue,\r\n        writable: true\r\n      });\r\n    } else {\r\n      // @ts-ignore\r\n      target[options.name] = options.newValue;\r\n    }\r\n  }\r\n\r\n  // Return undefined instead of __proto__ if '__proto__' is not an own property\r\n  private getProperty<T = NzSafeAny>(obj: T, name: string) {\r\n    if (name === '__proto__') {\r\n      if (!hasOwn.call(obj, name)) {\r\n        return void 0;\r\n      } else if (gOPD) {\r\n        // @ts-ignore\r\n        return gOPD(obj, name).value;\r\n      }\r\n    }\r\n    // @ts-ignore\r\n    return obj[name];\r\n  }\r\n\r\n  /**\r\n   * 继承\r\n   * @param target\r\n   * @param args\r\n   */\r\n  extend<T = NzSafeAny>(target: T, ...args: NzSafeAny[]): T {\r\n    let copyIsArray, clone;\r\n\r\n    for (const options of args) {\r\n      if (options == null) {\r\n        continue;\r\n      }\r\n\r\n      for (const name in options) {\r\n        const src = this.getProperty(target, name);\r\n        const copy = this.getProperty(options, name);\r\n        if (target === copy || copy === undefined) {\r\n          continue;\r\n        }\r\n\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (Utils.isPlainObject(copy) || (copyIsArray = Utils.isArray(copy))) {\r\n          if (copyIsArray) {\r\n            copyIsArray = false;\r\n            clone = src && Utils.isArray(src) ? src : [];\r\n          } else {\r\n            clone = src && Utils.isPlainObject(src) ? src : {};\r\n          }\r\n\r\n          this.setProperty(target, { name, newValue: this.extend(clone, copy) });\r\n        } else {\r\n          this.setProperty(target, { name, newValue: copy });\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 根据开始和结束数字返回一个数组\r\n   * @param start 起始数字\r\n   * @param end 结束数字\r\n   * @param fill 填充内容,默认\r\n   */\r\n  range<T = NzSafeAny>(start: number, end: number, fill?: ((num: number, index: number) => T) | T): T[] {\r\n    const list: T[] = [];\r\n    const fn = fill == null ? (i: number) => i as unknown as T : this.isFunction(fill) ? fill : () => fill;\r\n    let index = 0;\r\n    for (let i = start; i < end; i++) {\r\n      list.push(fn(i, index++));\r\n    }\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * 遍历树结构\r\n   * @param treeNodes TreeNode[]\r\n   * @param accept 函数返回false即结束遍历, true或者undefined将继续遍历\r\n   * @param childrenName 子节点字段名称\r\n   */\r\n  forEachTree<T extends TreeNode>(\r\n    treeNodes: T[],\r\n    accept: (node: T, parentNode: T | undefined, level: number) => boolean | void,\r\n    childrenName: keyof T | TreeChildren<T> = 'children'\r\n  ): void {\r\n    if (!treeNodes || !treeNodes.length) {\r\n      return;\r\n    }\r\n\r\n    const getChildren =\r\n      typeof childrenName === 'string' ? (node: T) => node[childrenName] : (childrenName as TreeChildren<T>);\r\n\r\n    let stack: T[] = [];\r\n    const parents: T[] = [];\r\n    let level = 0;\r\n    let count = 0;\r\n\r\n    for (const t of treeNodes) {\r\n      stack = [t];\r\n      parents.length = 0;\r\n      level = 0;\r\n      count = 0;\r\n\r\n      while (stack.length) {\r\n        const item = stack.shift()!;\r\n        if (item == null) {\r\n          continue;\r\n        }\r\n\r\n        const parent = parents[level - 1];\r\n        if (accept(item, parent, level) === false) {\r\n          return;\r\n        }\r\n\r\n        const children = getChildren(item, parent, level);\r\n        if (children && children.length) {\r\n          stack = stack.concat(children);\r\n          parents.push(item);\r\n          count = children.length;\r\n          level++;\r\n        } else if (!--count) {\r\n          level--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 过滤树, 生成新的树结构\r\n   * @param treeNodes 树结构\r\n   * @param predicate 过滤函数\r\n   * @param childrenName 子节点名称,默认 'children'\r\n   */\r\n  filterTree<T extends TreeNode>(\r\n    treeNodes: T[],\r\n    predicate: (node: T) => boolean,\r\n    childrenName: keyof T = 'children'\r\n  ): T[] {\r\n    const filter = (list: T[], children: T[]) => {\r\n      for (const node of list) {\r\n        const newNode: T = { ...node, [childrenName]: [] };\r\n        if (node[childrenName]?.length) {\r\n          filter(node[childrenName], newNode[childrenName]);\r\n        }\r\n\r\n        if (predicate(newNode)) {\r\n          children.push(newNode);\r\n        }\r\n      }\r\n    };\r\n    const result: T[] = [];\r\n    filter(treeNodes, result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 列表转树结构\r\n   * @param list 列表数据\r\n   * @param idName id的属性名\r\n   * @param pidName parentId属性名\r\n   * @param childrenName children属性名\r\n   */\r\n  listToTree<T extends { pid?: string; id?: string; [key: string]: NzSafeAny }>(\r\n    list: T[],\r\n    idName: keyof T = 'id',\r\n    pidName: keyof T = 'pid',\r\n    childrenName: string = 'children'\r\n  ): T[] {\r\n    if (!list || !list.length) {\r\n      return [];\r\n    }\r\n    const nodeMap: { [key: string]: NzSafeAny } = {};\r\n    for (const node of list) {\r\n      nodeMap[node[idName]] = node;\r\n      // @ts-ignore\r\n      node[childrenName] = [];\r\n    }\r\n\r\n    const treeNodes: T[] = [];\r\n    for (const node of list) {\r\n      const pid = node[pidName];\r\n      const parent = nodeMap[node[pidName]];\r\n      if (pid && parent) {\r\n        parent[childrenName].push(node);\r\n      } else {\r\n        treeNodes.push(node);\r\n      }\r\n    }\r\n    return treeNodes;\r\n  }\r\n\r\n  /**\r\n   * 获取同步请求的响应结果\r\n   * @param observable\r\n   * @example\r\n   * const myObservable = this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)});\r\n   * const value = getAjaxValue(myObservable); // value为string类型\r\n   */\r\n  getAjaxValue<T = NzSafeAny>(observable: Observable<T>) {\r\n    let value!: T;\r\n    observable.subscribe(result => (value = result)).unsubscribe();\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 根据不同的参数类型 获取dom元素\r\n   * @param target\r\n   */\r\n  getElement(target: ElementRef | HTMLElement | string): HTMLElement | null {\r\n    if (!target) {\r\n      return null;\r\n    }\r\n\r\n    if (target instanceof HTMLElement) {\r\n      return target;\r\n    }\r\n\r\n    const eleRef = target as ElementRef;\r\n    if (eleRef.nativeElement) {\r\n      return eleRef.nativeElement;\r\n    }\r\n\r\n    if (typeof target === 'string') {\r\n      return document.querySelector(target);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 字符串模版函数\r\n   * @param template 模版\r\n   * @param data 数据\r\n   * @return 返回渲染后的Html\r\n   * @example\r\n   * Utils.format('{s.0.name}', { s: [{name: 111}] }) => 111\r\n   */\r\n  format(template: string | null, data?: Record<string, NzSafeAny>): string {\r\n    if (template == null || !data) {\r\n      return template || '';\r\n    }\r\n    return template.replace(/\\{([\\w\\.]*)\\}/g, (str, key) => {\r\n      const path = key.split('.');\r\n      let v = data[path.shift()];\r\n      for (let i = 0, size = path.length; i < size && v !== null; i++) {\r\n        v = v[path[i]];\r\n      }\r\n      return v == null ? '' : v.toString();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 对Date的扩展，将 Date 转化为指定格式的String\r\n   * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\r\n   * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\r\n   * eg:\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss.S') ==> 2006-07-02 08:09:04.423\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd 星期E HH:mm:ss') ==> 2009-03-10 星期二 20:09:04\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd 星期e hh:mm:ss') ==> 2009-03-10 星期2 08:09:04\r\n   * NeKit.formatDate(new Date(), 'yyyy-MM-dd 第w周 hh:mm:ss') ==> 2009-03-10 第2周 08:09:04\r\n   * NeKit.formatDate(new Date(), 'yyyy-M-d h:m:s.S') ==> 2006-7-2 8:9:4.18\r\n   */\r\n  formatDate(srcDate: Date, fmt: string) {\r\n    if (!srcDate) {\r\n      return '';\r\n    }\r\n    const week = {\r\n      0: '\\u65e5',\r\n      1: '\\u4e00',\r\n      2: '\\u4e8c',\r\n      3: '\\u4e09',\r\n      4: '\\u56db',\r\n      5: '\\u4e94',\r\n      6: '\\u516d'\r\n    };\r\n\r\n    const o = {\r\n      'M+': srcDate.getMonth() + 1,\r\n      'd+': srcDate.getDate(),\r\n      'h+': srcDate.getHours() % 12 === 0 ? 12 : srcDate.getHours() % 12,\r\n      'H+': srcDate.getHours(),\r\n      'm+': srcDate.getMinutes(),\r\n      's+': srcDate.getSeconds(),\r\n      'q+': Math.floor((srcDate.getMonth() + 3) / 3),\r\n      'S+': srcDate.getMilliseconds(),\r\n      'e+': srcDate.getDay(),\r\n      // @ts-ignore\r\n      E: week[srcDate.getDay()],\r\n      'w+': (date => {\r\n        const date2 = new Date(date.getFullYear(), 0, 1);\r\n        const day = (date2.getDay() ? date2.getDay() : 7) - (date.getDay() ? date.getDay() : 7);\r\n        return Math.ceil(Math.round((date.getTime() - date2.getTime() + day * (24 * 3600000)) / 86400000) / 7) + 1;\r\n      })(srcDate)\r\n    };\r\n    if (/(y+)/.test(fmt)) {\r\n      fmt = fmt.replace(RegExp.$1, (srcDate.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n    }\r\n    for (const k in o) {\r\n      if (new RegExp('(' + k + ')').test(fmt)) {\r\n        // @ts-ignore\r\n        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\r\n      }\r\n    }\r\n    return fmt;\r\n  }\r\n\r\n  is(val: unknown, type: string) {\r\n    return toStr.call(val) === `[object ${type}]`;\r\n  }\r\n\r\n  isDef<T = unknown>(val?: T): val is T {\r\n    return typeof val !== 'undefined';\r\n  }\r\n\r\n  isUnDef<T = unknown>(val?: T): val is T {\r\n    return !this.isDef(val);\r\n  }\r\n\r\n  isObject(val: NzSafeAny): val is Record<NzSafeAny, NzSafeAny> {\r\n    return val !== null && this.is(val, 'Object');\r\n  }\r\n\r\n  isEmpty<T = unknown>(val: T): val is T {\r\n    // @ts-ignore\r\n    return val == null || val.length === 0;\r\n  }\r\n\r\n  isDate(val: unknown): val is Date {\r\n    return this.is(val, 'Date');\r\n  }\r\n\r\n  isNull(val: unknown): val is null {\r\n    return val === null;\r\n  }\r\n\r\n  isNil(val: unknown): val is null | undefined {\r\n    return this.isUnDef(val) && this.isNull(val);\r\n  }\r\n\r\n  isNotNil(val: unknown): val is null | undefined {\r\n    return !this.isNil(val);\r\n  }\r\n\r\n  isNumber(val: unknown): val is number {\r\n    return this.is(val, 'Number');\r\n  }\r\n\r\n  isPromise<T = NzSafeAny>(val: unknown): val is Promise<T> {\r\n    return this.is(val, 'Promise') || (this.isObject(val) && this.isFunction(val.then) && this.isFunction(val.catch));\r\n  }\r\n\r\n  isObservable(obj: NzSafeAny): obj is Observable<NzSafeAny> {\r\n    return obj instanceof Observable || (obj && typeof obj.subscribe === 'function');\r\n  }\r\n\r\n  isString(val: unknown): val is string {\r\n    return this.is(val, 'String');\r\n  }\r\n\r\n  isFunction(val: unknown): val is Function {\r\n    return typeof val === 'function';\r\n  }\r\n\r\n  isBoolean(val: unknown): val is boolean {\r\n    return this.is(val, 'Boolean');\r\n  }\r\n\r\n  isRegExp(val: unknown): val is RegExp {\r\n    return this.is(val, 'RegExp');\r\n  }\r\n\r\n  isArray(val: NzSafeAny): val is Array<NzSafeAny> {\r\n    if (typeof Array.isArray === 'function') {\r\n      return Array.isArray(val);\r\n    }\r\n    return toStr.call(val) === '[object Array]';\r\n  }\r\n\r\n  isWindow(val: NzSafeAny): val is Window {\r\n    return typeof window !== 'undefined' && this.is(val, 'Window');\r\n  }\r\n\r\n  isElement(val: unknown): val is Element {\r\n    return this.isObject(val) && !!val.tagName;\r\n  }\r\n\r\n  isMap(val: unknown): val is Map<NzSafeAny, NzSafeAny> {\r\n    return this.is(val, 'Map');\r\n  }\r\n\r\n  /**\r\n   * 是否为手机号（中国）\r\n   * @param value\r\n   */\r\n  isMobile(value: string): boolean {\r\n    return /^(0|\\\\+?86|17951)?1[0-9]{10}$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否IP4地址（支持v4、v6）\r\n   * @param ip\r\n   */\r\n  isIp(ip: string) {\r\n    return /^(?:^(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}$)|(?:^(?:(?:[a-fA-F\\\\d]{1,4}:){7}(?:[a-fA-F\\\\d]{1,4}|:)|(?:[a-fA-F\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|:[a-fA-F\\\\d]{1,4}|:)|(?:[a-fA-F\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)$/.test(\r\n      ip\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否是url\r\n   * @param path\r\n   */\r\n  isUrl(path: string): boolean {\r\n    return /(((^https?:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/.test(\r\n      path\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否中文\r\n   * @param value 测试字符串\r\n   */\r\n  isChinese(value: string): boolean {\r\n    return /^[\\u4e00-\\u9fa5]+$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否为数值\r\n   * @param value\r\n   * @param minus 是否允许负数\r\n   * @param fraction 最大保留小数位数\r\n   */\r\n  isNum(value: string, minus?: boolean, fraction?: number): boolean {\r\n    const regex =\r\n      (minus ? '^-?' : '^') +\r\n      `(([1-9]{1}\\\\d*)|(0{1}))` +\r\n      (fraction && fraction > 0 ? `(\\\\.\\\\d{1,${fraction}})?$` : '$');\r\n    return new RegExp(regex).test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否为邮箱\r\n   * @param value\r\n   */\r\n  isEmail(value: string) {\r\n    return /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * 是否是纯对象值\r\n   * @param obj\r\n   */\r\n  isPlainObject<T = NzSafeAny>(obj: T) {\r\n    if (!obj || toStr.call(obj) !== '[object Object]') {\r\n      return false;\r\n    }\r\n\r\n    const hasOwnConstructor = hasOwn.call(obj, 'constructor');\r\n    const hasIsPrototypeOf =\r\n      // @ts-ignore\r\n      obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\r\n    // @ts-ignore\r\n    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n      return false;\r\n    }\r\n\r\n    let key;\r\n    for (key in obj) {\r\n      /**/\r\n    }\r\n\r\n    return typeof key === 'undefined' || hasOwn.call(obj, key);\r\n  }\r\n\r\n  /**\r\n   * 转换为日期\r\n   * @param date 待转换的值\r\n   */\r\n  toDate(date?: Date | string | number): Date | null {\r\n    if (date == null) {\r\n      return null;\r\n    }\r\n    if (this.isDate(date)) {\r\n      return date;\r\n    }\r\n    if (this.isNumber(date)) {\r\n      return new Date(date);\r\n    }\r\n    if (this.isString(date)) {\r\n      const value = Date.parse(date);\r\n      if (isNaN(value)) {\r\n        const match = date.match(/\\d+/g);\r\n        if (match) {\r\n          // @ts-ignore\r\n          return new Date(...match);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 合并对象到FormData\r\n   * @param obj 要合并的对象\r\n   * @param {FormData} form 表单\r\n   */\r\n  mergeFormData<T>(form: FormData, obj: T): void {\r\n    const list = this.serializeParams(obj);\r\n    for (const it of list) {\r\n      form.append(it.key, it.value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 把js对象序列化对请求数据,格式为 a=av&b=bv...&n=nv\r\n   * @param obj\r\n   * @returns\r\n   */\r\n  serialize<T>(obj: T): string {\r\n    const list = this.serializeParams<T>(obj);\r\n    let query = '';\r\n    for (const it of list) {\r\n      query += encodeURIComponent(it.key) + '=' + encodeURIComponent(it.value) + '&';\r\n    }\r\n    return query === '' ? query : query.substr(0, query.length - 1);\r\n  }\r\n\r\n  /**\r\n   * 把js对象序列化对请求数据\r\n   * @param obj\r\n   * @returns\r\n   */\r\n  serializeParams<T>(obj: T): Record<string, NzSafeAny>[] {\r\n    if (!obj) {\r\n      return [];\r\n    }\r\n\r\n    const query: Record<string, NzSafeAny>[] = [];\r\n    this.buildParam(obj, query);\r\n    return query;\r\n  }\r\n\r\n  private buildParam<T extends Record<string, NzSafeAny>>(inObj: T, list: Record<string, NzSafeAny>[]) {\r\n    let value: NzSafeAny;\r\n    let subName: string;\r\n    let innerObj: Record<string, string>;\r\n    for (const name in inObj) {\r\n      value = inObj[name];\r\n      if (value instanceof Array) {\r\n        for (let i = 0; i < value.length; ++i) {\r\n          if (value[i] instanceof Array || value[i] instanceof Object) {\r\n            if (value[i].toJSON) {\r\n              list.push({ key: name, value: value[i].toJSON() });\r\n              continue;\r\n            }\r\n            innerObj = {};\r\n            innerObj[name + '[' + i + ']'] = value[i];\r\n            this.buildParam(innerObj, list);\r\n          } else if (value[i] !== undefined && value[i] !== null) {\r\n            list.push({ key: name, value: value[i] });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      if (value instanceof Object) {\r\n        if (value.toJSON) {\r\n          list.push({ key: name, value: value.toJSON() });\r\n          continue;\r\n        }\r\n\r\n        for (subName of Object.keys(value)) {\r\n          innerObj = {};\r\n          innerObj[name + '.' + subName] = value[subName];\r\n          this.buildParam(innerObj, list);\r\n        }\r\n        continue;\r\n      }\r\n      if (value !== undefined && value !== null) {\r\n        list.push({ key: name, value });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const Utils = new UtilsClass();\r\nexport interface TreeNode {\r\n  [key: string]: NzSafeAny;\r\n  children?: TreeNode[];\r\n}\r\n\r\nexport type TreeChildren<T = NzSafeAny> = (node: T, parentNode: T | null, level: number) => T[] | null;\r\n",
            "properties": [
                {
                    "name": "assign",
                    "defaultValue": "this.extend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "buildParam",
                    "args": [
                        {
                            "name": "inObj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "Record<string, NzSafeAny>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 609,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "inObj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "Record<string, NzSafeAny>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n深度clone\n",
                    "description": "<p>深度clone</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1422,
                                "end": 1428,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "target"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1416,
                                "end": 1421,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "defaultIfy",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extend",
                    "args": [
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "NzSafeAny[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n继承\n",
                    "description": "<p>继承</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2547,
                                "end": 2553,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "target"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2541,
                                "end": 2546,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2567,
                                "end": 2571,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "args"
                            },
                            "type": "NzSafeAny[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 2561,
                                "end": 2566,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "filterTree",
                    "args": [
                        {
                            "name": "treeNodes",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "predicate",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "node",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "childrenName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n过滤树, 生成新的树结构\n",
                    "description": "<p>过滤树, 生成新的树结构</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5472,
                                "end": 5481,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "treeNodes"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5466,
                                "end": 5471,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>树结构</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5499,
                                "end": 5508,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "predicate"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "node",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 5493,
                                "end": 5498,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>过滤函数</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5527,
                                "end": 5539,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "childrenName"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "pos": 5521,
                                "end": 5526,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>子节点名称,默认 &#39;children&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "forEachTree",
                    "args": [
                        {
                            "name": "treeNodes",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accept",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "node",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "parentNode",
                                    "type": "T | undefined",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "level",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "childrenName",
                            "type": " | TreeChildren<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n遍历树结构\n",
                    "description": "<p>遍历树结构</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4098,
                                "end": 4107,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "treeNodes"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4092,
                                "end": 4097,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>TreeNode[]</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4132,
                                "end": 4138,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "accept"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "node",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "parentNode",
                                    "type": "T | undefined",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "level",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 4126,
                                "end": 4131,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>函数返回false即结束遍历, true或者undefined将继续遍历</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4189,
                                "end": 4201,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "childrenName"
                            },
                            "type": " | TreeChildren<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "pos": 4183,
                                "end": 4188,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>子节点字段名称</p>\n"
                        }
                    ]
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "template",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "Record<string | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n字符串模版函数\n```html\nUtils.format('{s.0.name}', { s: [{name: 111}] }) => 111\n```",
                    "description": "<p>字符串模版函数</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">Utils.format(&#39;{s.0.name}&#39;, { s: [{name: 111}] }) =&gt; 111</code></pre></div>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8029,
                                "end": 8037,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "template"
                            },
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8023,
                                "end": 8028,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>模版</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8054,
                                "end": 8058,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "Record<string | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 8048,
                                "end": 8053,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>数据</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8069,
                                "end": 8075,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>返回渲染后的Html</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8094,
                                "end": 8101,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>Utils.format(&#39;{s.0.name}&#39;, { s: [{name: 111}] }) =&gt; 111</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "srcDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fmt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n对Date的扩展，将 Date 转化为指定格式的String\n月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\n年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\neg:\nNeKit.formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss.S') ==> 2006-07-02 08:09:04.423\nNeKit.formatDate(new Date(), 'yyyy-MM-dd 星期E HH:mm:ss') ==> 2009-03-10 星期二 20:09:04\nNeKit.formatDate(new Date(), 'yyyy-MM-dd 星期e hh:mm:ss') ==> 2009-03-10 星期2 08:09:04\nNeKit.formatDate(new Date(), 'yyyy-MM-dd 第w周 hh:mm:ss') ==> 2009-03-10 第2周 08:09:04\nNeKit.formatDate(new Date(), 'yyyy-M-d h:m:s.S') ==> 2006-7-2 8:9:4.18\n",
                    "description": "<p>对Date的扩展，将 Date 转化为指定格式的String\n月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\n年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\neg:\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd hh:mm:ss.S&#39;) ==&gt; 2006-07-02 08:09:04.423\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd 星期E HH:mm:ss&#39;) ==&gt; 2009-03-10 星期二 20:09:04\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd 星期e hh:mm:ss&#39;) ==&gt; 2009-03-10 星期2 08:09:04\nNeKit.formatDate(new Date(), &#39;yyyy-MM-dd 第w周 hh:mm:ss&#39;) ==&gt; 2009-03-10 第2周 08:09:04\nNeKit.formatDate(new Date(), &#39;yyyy-M-d h:m:s.S&#39;) ==&gt; 2006-7-2 8:9:4.18</p>\n",
                    "jsdoctags": [
                        {
                            "name": "srcDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fmt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "obj",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "defaultValue",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n根据属性路径获取对象的属性值\n",
                    "description": "<p>根据属性路径获取对象的属性值</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 578,
                                "end": 581,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 572,
                                "end": 577,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>原始对象</p>\n"
                        },
                        {
                            "name": {
                                "pos": 600,
                                "end": 604,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 594,
                                "end": 599,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>属性路径</p>\n"
                        },
                        {
                            "name": {
                                "pos": 623,
                                "end": 635,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "defaultValue"
                            },
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 617,
                                "end": 622,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当属性不存在或为undefined返回defaultValue</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAjaxValue",
                    "args": [
                        {
                            "name": "observable",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取同步请求的响应结果\n```html\nconst myObservable = this.http.get<string>('url', { context: new HttpContext().set(SYNCED_ENABLED, true)});\nconst value = getAjaxValue(myObservable); // value为string类型\n```",
                    "description": "<p>获取同步请求的响应结果</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">const myObservable = this.http.get&lt;string&gt;(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)});\nconst value = getAjaxValue(myObservable); // value为string类型</code></pre></div>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7111,
                                "end": 7121,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "observable"
                            },
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7105,
                                "end": 7110,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 7129,
                                "end": 7136,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>const myObservable = this.http.get<string>(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)});\nconst value = getAjaxValue(myObservable); // value为string类型</p>\n"
                        }
                    ]
                },
                {
                    "name": "getElement",
                    "args": [
                        {
                            "name": "target",
                            "type": "ElementRef | HTMLElement | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n根据不同的参数类型 获取dom元素\n",
                    "description": "<p>根据不同的参数类型 获取dom元素</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7543,
                                "end": 7549,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "target"
                            },
                            "type": "ElementRef | HTMLElement | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7537,
                                "end": 7542,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getProperty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUUID",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取唯一Id号\n",
                    "description": "<p>获取唯一Id号</p>\n"
                },
                {
                    "name": "is",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "val",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<NzSafeAny>",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isBoolean",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 430,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isChinese",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 489,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否中文\n",
                    "description": "<p>是否中文</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14769,
                                "end": 14774,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14763,
                                "end": 14768,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>测试字符串</p>\n"
                        }
                    ]
                },
                {
                    "name": "isDate",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 394,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDef",
                    "args": [
                        {
                            "name": "val",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElement",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Element",
                    "typeParameters": [],
                    "line": 449,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmail",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 511,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否为邮箱\n",
                    "description": "<p>是否为邮箱</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15291,
                                "end": 15296,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15285,
                                "end": 15290,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "val",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 389,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFunction",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Function",
                    "typeParameters": [],
                    "line": 426,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isIp",
                    "args": [
                        {
                            "name": "ip",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 469,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否IP4地址（支持v4、v6）\n",
                    "description": "<p>是否IP4地址（支持v4、v6）</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13016,
                                "end": 13018,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "ip"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13010,
                                "end": 13015,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isMap",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<NzSafeAny | NzSafeAny>",
                    "typeParameters": [],
                    "line": 453,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMobile",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否为手机号（中国）\n",
                    "description": "<p>是否为手机号（中国）</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12858,
                                "end": 12863,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12852,
                                "end": 12857,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isNil",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "null | undefined",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNotNil",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "null | undefined",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNull",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 398,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNum",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "fraction",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 499,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否为数值\n",
                    "description": "<p>是否为数值</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14912,
                                "end": 14917,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14906,
                                "end": 14911,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14931,
                                "end": 14936,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minus"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14925,
                                "end": 14930,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否允许负数</p>\n"
                        },
                        {
                            "name": {
                                "pos": 14957,
                                "end": 14965,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fraction"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14951,
                                "end": 14956,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最大保留小数位数</p>\n"
                        }
                    ]
                },
                {
                    "name": "isNumber",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 410,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isObject",
                    "args": [
                        {
                            "name": "val",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Record<NzSafeAny | NzSafeAny>",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isObservable",
                    "args": [
                        {
                            "name": "obj",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<NzSafeAny>",
                    "typeParameters": [],
                    "line": 418,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPlainObject",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 519,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否是纯对象值\n",
                    "description": "<p>是否是纯对象值</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15448,
                                "end": 15451,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15442,
                                "end": 15447,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isPromise",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 414,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRegExp",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RegExp",
                    "typeParameters": [],
                    "line": 434,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isString",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUnDef",
                    "args": [
                        {
                            "name": "val",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 381,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 479,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否是url\n",
                    "description": "<p>是否是url</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14479,
                                "end": 14483,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14473,
                                "end": 14478,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isWindow",
                    "args": [
                        {
                            "name": "val",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Window",
                    "typeParameters": [],
                    "line": 445,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listToTree",
                    "args": [
                        {
                            "name": "list",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'id'"
                        },
                        {
                            "name": "pidName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'pid'"
                        },
                        {
                            "name": "childrenName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n列表转树结构\n",
                    "description": "<p>列表转树结构</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6197,
                                "end": 6201,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6191,
                                "end": 6196,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>列表数据</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6220,
                                "end": 6226,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idName"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'id'",
                            "tagName": {
                                "pos": 6214,
                                "end": 6219,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>id的属性名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6247,
                                "end": 6254,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "pidName"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'pid'",
                            "tagName": {
                                "pos": 6241,
                                "end": 6246,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>parentId属性名</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6280,
                                "end": 6292,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "childrenName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'children'",
                            "tagName": {
                                "pos": 6274,
                                "end": 6279,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>children属性名</p>\n"
                        }
                    ]
                },
                {
                    "name": "mergeFormData",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 573,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n合并对象到FormData\n",
                    "description": "<p>合并对象到FormData</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16704,
                                "end": 16708,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "form"
                            },
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16687,
                                "end": 16692,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>表单</p>\n",
                            "typeExpression": {
                                "pos": 16693,
                                "end": 16703,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 16694,
                                    "end": 16702,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 177,
                                    "typeName": {
                                        "pos": 16694,
                                        "end": 16702,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "FormData"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 16669,
                                "end": 16672,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16663,
                                "end": 16668,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>要合并的对象</p>\n"
                        }
                    ]
                },
                {
                    "name": "range",
                    "args": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fill",
                            "type": " | T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n根据开始和结束数字返回一个数组\n",
                    "description": "<p>根据开始和结束数字返回一个数组</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3630,
                                "end": 3635,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "start"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3624,
                                "end": 3629,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>起始数字</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3654,
                                "end": 3657,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "end"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3648,
                                "end": 3653,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>结束数字</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3676,
                                "end": 3680,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fill"
                            },
                            "type": " | T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3670,
                                "end": 3675,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>填充内容,默认</p>\n"
                        }
                    ]
                },
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 585,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n把js对象序列化对请求数据,格式为 a=av&b=bv...&n=nv\n",
                    "description": "<p>把js对象序列化对请求数据,格式为 a=av&amp;b=bv...&amp;n=nv</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16960,
                                "end": 16963,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16954,
                                "end": 16959,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 16971,
                                "end": 16978,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "serializeParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Record[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 599,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n把js对象序列化对请求数据\n",
                    "description": "<p>把js对象序列化对请求数据</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 17330,
                                "end": 17333,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 17324,
                                "end": 17329,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 17341,
                                "end": 17348,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setProperty",
                    "args": [
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 545,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n转换为日期\n",
                    "description": "<p>转换为日期</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16099,
                                "end": 16103,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Date | string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 16093,
                                "end": 16098,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>待转换的值</p>\n"
                        }
                    ]
                },
                {
                    "name": "trim",
                    "args": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AuthDirective",
            "id": "directive-AuthDirective-bd1612d1e33eadfc4c49db9d0c7a9fa2c458ab1fc1a9f2c11a2aae97cd92e8d271761213d1aa833fc77d6d9ad1ba33494038114eb88f8481d6b3fbd9e1b4503b",
            "file": "lib/directive/auth.directive.ts",
            "type": "directive",
            "description": "<p>权限指令, 有权限渲染模板,否则渲染else模板</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button *auth=&quot;[&#39;code1&#39;, &#39;code2&#39;]; else notAuth&quot;&gt;有权限时显示&lt;/button&gt;\n&lt;button *auth=&quot;&#39;code1&#39;; else notAuth&quot;&gt;有权限时显示&lt;/button&gt;\n&lt;ng-template #notAuth&gt;没有权限时显示&lt;/ng-template&gt;</code></pre></div>",
            "rawdescription": "\n\n权限指令, 有权限渲染模板,否则渲染else模板\n```html\n<button *auth=\"['code1', 'code2']; else notAuth\">有权限时显示</button>\n<button *auth=\"'code1'; else notAuth\">有权限时显示</button>\n<ng-template #notAuth>没有权限时显示</ng-template>\n```",
            "sourceCode": "import { Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { NzxAntdService } from '@xmagic/nzx-antd';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n/**\r\n * 权限指令, 有权限渲染模板,否则渲染else模板\r\n * @example\r\n * <button *auth=\"['code1', 'code2']; else notAuth\">有权限时显示</button>\r\n * <button *auth=\"'code1'; else notAuth\">有权限时显示</button>\r\n * <ng-template #notAuth>没有权限时显示</ng-template>\r\n */\r\n@Directive({\r\n  selector: '[auth]'\r\n})\r\nexport class AuthDirective<T = unknown> implements OnDestroy {\r\n  /** @internal */\r\n  static authUseIfTypeGuard: void;\r\n  static ngTemplateGuard_auth: 'binding';\r\n  private readonly changeSubscription?: Subscription;\r\n  private authSubscription?: Subscription;\r\n\r\n  protected _context: AuthContext<T> = new AuthContext<T>();\r\n  protected _thenTemplateRef: TemplateRef<AuthContext<T>> | null = null;\r\n  protected _elseTemplateRef: TemplateRef<AuthContext<T>> | null = null;\r\n  protected _thenViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\r\n  protected _elseViewRef: EmbeddedViewRef<AuthContext<T>> | null = null;\r\n\r\n  /**\r\n   *\r\n   * 为 `auth` 将要渲染的模板确保正确的上下文类型。\r\n   * 该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\r\n   *\r\n   */\r\n  static ngTemplateContextGuard<T>(\r\n    dir: AuthDirective<T>,\r\n    ctx: NzSafeAny\r\n  ): ctx is AuthContext<Exclude<T, false | 0 | '' | null | undefined>> {\r\n    return true;\r\n  }\r\n\r\n  protected hasAuth: Required<NzxAntdService>['hasAuth'] = () => of(true);\r\n\r\n  constructor(\r\n    protected _viewContainer: ViewContainerRef,\r\n    public templateRef: TemplateRef<AuthContext<T>>,\r\n    public antdService: NzxAntdService\r\n  ) {\r\n    this._thenTemplateRef = templateRef;\r\n\r\n    if (this.antdService.authChange) {\r\n      this.changeSubscription = this.antdService.authChange().subscribe(() => this._updateView());\r\n    }\r\n\r\n    if (this.antdService.hasAuth) {\r\n      this.hasAuth = this.antdService.hasAuth;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 布尔表达式，将其作为显示模板的条件进行计算。\r\n   *\r\n   */\r\n  @Input()\r\n  set auth(condition: T) {\r\n    this._context.$implicit = this._context.auth = condition;\r\n    this._updateView();\r\n  }\r\n\r\n  /**\r\n   * 当此条件表达式计算为 true 时要显示的模板。\r\n   */\r\n  @Input()\r\n  set authThen(templateRef: TemplateRef<AuthContext<T>> | null) {\r\n    assertTemplate('authThen', templateRef);\r\n    this._thenTemplateRef = templateRef;\r\n    this._thenViewRef = null; // clear previous view if any.\r\n    this._updateView();\r\n  }\r\n\r\n  /**\r\n   * 当此条件表达式计算为 false 时要显示的模板。\r\n   */\r\n  @Input()\r\n  set authElse(templateRef: TemplateRef<AuthContext<T>> | null) {\r\n    assertTemplate('authElse', templateRef);\r\n    this._elseTemplateRef = templateRef;\r\n    this._elseViewRef = null; // clear previous view if any.\r\n    this._updateView();\r\n  }\r\n\r\n  protected _updateView() {\r\n    if (this.authSubscription) {\r\n      this.authSubscription.unsubscribe();\r\n      this.authSubscription = undefined;\r\n    }\r\n    this.authSubscription = this.hasAuth(this._context.$implicit).subscribe(auth => {\r\n      if (this.canRender(auth, this._context.$implicit)) {\r\n        if (!this._thenViewRef) {\r\n          this._viewContainer.clear();\r\n          this._elseViewRef = null;\r\n          if (this._thenTemplateRef) {\r\n            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\r\n          }\r\n        }\r\n      } else {\r\n        if (!this._elseViewRef) {\r\n          this._viewContainer.clear();\r\n          this._thenViewRef = null;\r\n          if (this._elseTemplateRef) {\r\n            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 是否允许渲染\r\n   * @param hasAuth 是否有权限\r\n   * @param value 权限码\r\n   * @protected\r\n   */\r\n  protected canRender(hasAuth: boolean, value: T) {\r\n    return hasAuth;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.changeSubscription) {\r\n      this.changeSubscription.unsubscribe();\r\n    }\r\n    if (this.authSubscription) {\r\n      this.authSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class AuthContext<T = unknown> {\r\n  public $implicit: T = null!;\r\n  public auth: T = null!;\r\n}\r\n\r\nfunction assertTemplate(property: string, templateRef: TemplateRef<NzSafeAny> | null): void {\r\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\r\n  if (!isTemplateRefOrNull) {\r\n    throw new Error(`${property} must be a TemplateRef, but received '${templateRef}'.`);\r\n  }\r\n}\r\n",
            "selector": "[auth]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n布尔表达式，将其作为显示模板的条件进行计算。\n\n",
                    "description": "<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\n",
                    "line": 65,
                    "type": "T",
                    "decorators": []
                },
                {
                    "name": "authElse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当此条件表达式计算为 false 时要显示的模板。\n",
                    "description": "<p>当此条件表达式计算为 false 时要显示的模板。</p>\n",
                    "line": 85,
                    "type": "TemplateRef | null",
                    "decorators": []
                },
                {
                    "name": "authThen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当此条件表达式计算为 true 时要显示的模板。\n",
                    "description": "<p>当此条件表达式计算为 true 时要显示的模板。</p>\n",
                    "line": 74,
                    "type": "TemplateRef | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_context",
                    "defaultValue": "new AuthContext<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthContext<T>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_elseTemplateRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_elseViewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmbeddedViewRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_thenTemplateRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_thenViewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmbeddedViewRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "antdService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxAntdService",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "authUseIfTypeGuard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "rawdescription": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 597,
                            "end": 607,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 598,
                                "end": 606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "changeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "hasAuth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngTemplateGuard_auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AuthContext<T>>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "canRender",
                    "args": [
                        {
                            "name": "hasAuth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否允许渲染\n",
                    "description": "<p>是否允许渲染</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3741,
                                "end": 3748,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasAuth"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3735,
                                "end": 3740,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否有权限</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3768,
                                "end": 3773,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3762,
                                "end": 3767,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>权限码</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "dir",
                            "type": "AuthDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ctx",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AuthContext<Exclude<T,  | \"0\" | string | null | undefined>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n为 `auth` 将要渲染的模板确保正确的上下文类型。\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\n\n",
                    "description": "<p>为 <code>auth</code> 将要渲染的模板确保正确的上下文类型。\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 <code>auth</code> 结构化指令会使用特定的上下文类型渲染其模板。</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dir",
                            "type": "AuthDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ctx",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<AuthContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<AuthContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "auth": {
                    "name": "auth",
                    "setSignature": {
                        "name": "auth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "condition",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "rawdescription": "\n\n布尔表达式，将其作为显示模板的条件进行计算。\n\n",
                        "description": "<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\n",
                        "jsdoctags": [
                            {
                                "name": "condition",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "authThen": {
                    "name": "authThen",
                    "setSignature": {
                        "name": "authThen",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "rawdescription": "\n\n当此条件表达式计算为 true 时要显示的模板。\n",
                        "description": "<p>当此条件表达式计算为 true 时要显示的模板。</p>\n",
                        "jsdoctags": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "authElse": {
                    "name": "authElse",
                    "setSignature": {
                        "name": "authElse",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "rawdescription": "\n\n当此条件表达式计算为 false 时要显示的模板。\n",
                        "description": "<p>当此条件表达式计算为 false 时要显示的模板。</p>\n",
                        "jsdoctags": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "AuthNotDirective",
            "id": "directive-AuthNotDirective-484d1ebfd72b39344d50c85762b9c453e767e691690fd36015c57a2bcbba21e1e6d8a1382b751d8ff50107b34d17011241a5c2e7b997b75d981583874000d02b",
            "file": "lib/directive/auth.not.directive.ts",
            "type": "directive",
            "description": "<p>权限指令, 无权限渲染模板,否则渲染else模板</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button *auth.not=&quot;[&#39;code1&#39;, &#39;code2&#39;]; else hasAuth&quot;&gt;没有有权限时显示&lt;/button&gt;\n&lt;button *auth.not=&quot;&#39;code1&#39;; else hasAuth&quot;&gt;没有有权限时显示&lt;/button&gt;\n&lt;ng-template #hasAuth&gt;有权限时显示&lt;/ng-template&gt;</code></pre></div>",
            "rawdescription": "\n\n权限指令, 无权限渲染模板,否则渲染else模板\n```html\n<button *auth.not=\"['code1', 'code2']; else hasAuth\">没有有权限时显示</button>\n<button *auth.not=\"'code1'; else hasAuth\">没有有权限时显示</button>\n<ng-template #hasAuth>有权限时显示</ng-template>\n```",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NzxAntdService } from '@xmagic/nzx-antd';\r\nimport { AuthContext, AuthDirective } from './auth.directive';\r\n\r\n/**\r\n * 权限指令, 无权限渲染模板,否则渲染else模板\r\n * @example\r\n * <button *auth.not=\"['code1', 'code2']; else hasAuth\">没有有权限时显示</button>\r\n * <button *auth.not=\"'code1'; else hasAuth\">没有有权限时显示</button>\r\n * <ng-template #hasAuth>有权限时显示</ng-template>\r\n */\r\n@Directive({\r\n  selector: '[auth.not]'\r\n})\r\nexport class AuthNotDirective<T = unknown> extends AuthDirective {\r\n  /** @internal */\r\n  static authNotUseIfTypeGuard: void;\r\n  static ngTemplateGuard_authNot: 'binding';\r\n\r\n  /**\r\n   * 布尔表达式，将其作为显示模板的条件进行计算。\r\n   *\r\n   */\r\n  @Input('auth.not')\r\n  set authNot(condition: T) {\r\n    super.auth = condition;\r\n  }\r\n\r\n  /**\r\n   * 当此条件表达式计算为 true 时要显示的模板。\r\n   */\r\n  @Input('auth.notThen')\r\n  set authNotThen(templateRef: TemplateRef<AuthContext<T>> | null) {\r\n    super.authThen = templateRef;\r\n  }\r\n\r\n  /**\r\n   * 当此条件表达式计算为 false 时要显示的模板。\r\n   */\r\n  @Input('auth.notElse')\r\n  set authNotElse(templateRef: TemplateRef<AuthContext<T>> | null) {\r\n    super.authElse = templateRef;\r\n  }\r\n\r\n  /**\r\n   * 是否允许渲染, 没有权限的时候渲染\r\n   * @param hasAuth 是否有权限\r\n   * @param value 权限码\r\n   * @protected\r\n   */\r\n  protected override canRender(hasAuth: boolean, value: T) {\r\n    return !hasAuth;\r\n  }\r\n\r\n  constructor(\r\n    protected override _viewContainer: ViewContainerRef,\r\n    public override templateRef: TemplateRef<AuthContext<T>>,\r\n    public override antdService: NzxAntdService\r\n  ) {\r\n    super(_viewContainer, templateRef, antdService);\r\n  }\r\n}\r\n",
            "selector": "[auth.not]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "auth.not",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n布尔表达式，将其作为显示模板的条件进行计算。\n\n",
                    "description": "<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\n",
                    "line": 25,
                    "type": "T",
                    "decorators": []
                },
                {
                    "name": "auth.notElse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当此条件表达式计算为 false 时要显示的模板。\n",
                    "description": "<p>当此条件表达式计算为 false 时要显示的模板。</p>\n",
                    "line": 41,
                    "type": "TemplateRef | null",
                    "decorators": []
                },
                {
                    "name": "auth.notThen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当此条件表达式计算为 true 时要显示的模板。\n",
                    "description": "<p>当此条件表达式计算为 true 时要显示的模板。</p>\n",
                    "line": 33,
                    "type": "TemplateRef | null",
                    "decorators": []
                },
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n布尔表达式，将其作为显示模板的条件进行计算。\n\n",
                    "description": "<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\n",
                    "line": 65,
                    "type": "T",
                    "decorators": [],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "authElse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当此条件表达式计算为 false 时要显示的模板。\n",
                    "description": "<p>当此条件表达式计算为 false 时要显示的模板。</p>\n",
                    "line": 85,
                    "type": "TemplateRef | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "authThen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当此条件表达式计算为 true 时要显示的模板。\n",
                    "description": "<p>当此条件表达式计算为 true 时要显示的模板。</p>\n",
                    "line": 74,
                    "type": "TemplateRef | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "antdService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxAntdService",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "authNotUseIfTypeGuard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "rawdescription": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 556,
                            "end": 566,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 557,
                                "end": 565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngTemplateGuard_authNot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AuthContext<T>>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "_context",
                    "defaultValue": "new AuthContext<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthContext<T>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "_elseTemplateRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "_elseViewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmbeddedViewRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "_thenTemplateRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "_thenViewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmbeddedViewRef<AuthContext<T>> | null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "authUseIfTypeGuard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "rawdescription": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 597,
                            "end": 607,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 598,
                                "end": 606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "changeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121,
                        144
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "hasAuth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "ngTemplateGuard_auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "canRender",
                    "args": [
                        {
                            "name": "hasAuth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否允许渲染, 没有权限的时候渲染\n",
                    "description": "<p>是否允许渲染, 没有权限的时候渲染</p>\n",
                    "modifierKind": [
                        122,
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1205,
                                "end": 1212,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasAuth"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1199,
                                "end": 1204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否有权限</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1232,
                                "end": 1237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1226,
                                "end": 1231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>权限码</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "_updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                },
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "dir",
                            "type": "AuthDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ctx",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AuthContext<Exclude<T,  | \"0\" | string | null | undefined>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n为 `auth` 将要渲染的模板确保正确的上下文类型。\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 `auth` 结构化指令会使用特定的上下文类型渲染其模板。\n\n",
                    "description": "<p>为 <code>auth</code> 将要渲染的模板确保正确的上下文类型。\n该方法用于向 Ivy 模板类型检查编译器发出信号，即 <code>auth</code> 结构化指令会使用特定的上下文类型渲染其模板。</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dir",
                            "type": "AuthDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ctx",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AuthDirective"
                    }
                }
            ],
            "extends": "AuthDirective",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<AuthContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<AuthContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "authNot": {
                    "name": "authNot",
                    "setSignature": {
                        "name": "authNot",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "condition",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "rawdescription": "\n\n布尔表达式，将其作为显示模板的条件进行计算。\n\n",
                        "description": "<p>布尔表达式，将其作为显示模板的条件进行计算。</p>\n",
                        "jsdoctags": [
                            {
                                "name": "condition",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "authNotThen": {
                    "name": "authNotThen",
                    "setSignature": {
                        "name": "authNotThen",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "rawdescription": "\n\n当此条件表达式计算为 true 时要显示的模板。\n",
                        "description": "<p>当此条件表达式计算为 true 时要显示的模板。</p>\n",
                        "jsdoctags": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "authNotElse": {
                    "name": "authNotElse",
                    "setSignature": {
                        "name": "authNotElse",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "rawdescription": "\n\n当此条件表达式计算为 false 时要显示的模板。\n",
                        "description": "<p>当此条件表达式计算为 false 时要显示的模板。</p>\n",
                        "jsdoctags": [
                            {
                                "name": "templateRef",
                                "type": "TemplateRef<AuthContext<T>> | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ClickOnceDirective",
            "id": "directive-ClickOnceDirective-4878c0821a48a8b5c1fbd37d87e26480ffd02838ef56ddc8b0268050c590e70f6e6ba38cd71e99644ec89a4fe97e68f328682345ba59f972425d5b07f7d46459",
            "file": "lib/directive/click.once.directive.ts",
            "type": "directive",
            "description": "<p>防止重复触发点击</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button (click.once)=&quot;myMethod($event)&quot; [delay]=&quot;1000&quot; (originClick)=&quot;method($event)&quot;&gt;按钮&lt;/button&gt;</code></pre></div>",
            "rawdescription": "\n\n防止重复触发点击\n```html\n<button (click.once)=\"myMethod($event)\" [delay]=\"1000\" (originClick)=\"method($event)\">按钮</button>\n```",
            "sourceCode": "import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\r\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\r\n\r\n/**\r\n * 防止重复触发点击\r\n * @example\r\n * <button (click.once)=\"myMethod($event)\" [delay]=\"1000\" (originClick)=\"method($event)\">按钮</button>\r\n */\r\n@Directive({\r\n  selector: '[click.once]'\r\n})\r\nexport class ClickOnceDirective {\r\n  constructor() {}\r\n\r\n  /**\r\n   * 点击延迟时间(单位:ms)\r\n   */\r\n  @Input() delay = 500;\r\n  @Input() @InputBoolean() disabled = false;\r\n  /**\r\n   * neClick事件\r\n   */\r\n  @Output('click.once') clickEvent = new EventEmitter<MouseEvent>();\r\n  /**\r\n   * 原始点击事件\r\n   * delay - 是否处于延迟状态\r\n   */\r\n  @Output() originClick = new EventEmitter<{ target: MouseEvent; delay: boolean }>();\r\n  private _delayDisabled = false;\r\n\r\n  @HostListener('click', ['$event'])\r\n  clickEventHandle(event: MouseEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.originClick.emit({ target: event, delay: this._delayDisabled });\r\n    if (this._delayDisabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    this._delayDisabled = true;\r\n    setTimeout(() => (this._delayDisabled = false), this.delay);\r\n    this.clickEvent.emit(event);\r\n  }\r\n\r\n}\r\n",
            "selector": "[click.once]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "delay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n点击延迟时间(单位:ms)\n",
                    "description": "<p>点击延迟时间(单位:ms)</p>\n",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "outputsClass": [
                {
                    "name": "click.once",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nneClick事件\n",
                    "description": "<p>neClick事件</p>\n",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "originClick",
                    "defaultValue": "new EventEmitter<{ target: MouseEvent; delay: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n原始点击事件\ndelay - 是否处于延迟状态\n",
                    "description": "<p>原始点击事件\ndelay - 是否处于延迟状态</p>\n",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32
                }
            ],
            "propertiesClass": [
                {
                    "name": "_delayDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickEventHandle",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            }
        },
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-197f7026f6a8c720beb3eee900fcf15057a960e0536fc96105222a0968338e54f66e10b47768e4111e59cd5fcff6def86a8e5cc1e4d0cf843b09f25cc5cad34a",
            "file": "lib/directive/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  PLATFORM_ID,\r\n  SimpleChanges,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[click.outside]',\r\n  exportAs: 'clickOutside'\r\n})\r\nexport class ClickOutsideDirective implements OnInit, OnChanges, OnDestroy {\r\n  @Input() clickOutsideEnabled = true;\r\n\r\n  @Input() attachOutsideOnClick = false;\r\n  @Input() delayClickOutsideInit = false;\r\n  @Input() emitOnBlur = false;\r\n\r\n  @Input() exclude?: string;\r\n  @Input() excludeBeforeClick?: boolean;\r\n\r\n  @Input() clickOutsideEvents?: string;\r\n\r\n  @Output('click.outside') clickOutside: EventEmitter<Event> = new EventEmitter<Event>();\r\n\r\n  private _nodesExcluded: Array<HTMLElement> = [];\r\n  private _events: Array<string> = ['click'];\r\n\r\n  constructor(private _el: ElementRef, private _ngZone: NgZone, @Inject(PLATFORM_ID) private platformId: Object) {\r\n    this._initOnClickBody = this._initOnClickBody.bind(this);\r\n    this._onClickBody = this._onClickBody.bind(this);\r\n    this._onWindowBlur = this._onWindowBlur.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!isPlatformBrowser(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    this._init();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (!isPlatformBrowser(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    this._removeClickOutsideListener();\r\n    this._removeAttachOutsideOnClickListener();\r\n    this._removeWindowBlurListener();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!isPlatformBrowser(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    if (changes['attachOutsideOnClick'] || changes['exclude'] || changes['emitOnBlur']) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  private _init() {\r\n    if (this.clickOutsideEvents != null) {\r\n      this._events = this.clickOutsideEvents!.split(',').map(e => e.trim());\r\n    }\r\n\r\n    this._excludeCheck();\r\n\r\n    if (this.attachOutsideOnClick) {\r\n      this._initAttachOutsideOnClickListener();\r\n    } else {\r\n      this._initOnClickBody();\r\n    }\r\n\r\n    if (this.emitOnBlur) {\r\n      this._initWindowBlurListener();\r\n    }\r\n  }\r\n\r\n  private _initOnClickBody() {\r\n    if (this.delayClickOutsideInit) {\r\n      setTimeout(this._initClickOutsideListener.bind(this));\r\n    } else {\r\n      this._initClickOutsideListener();\r\n    }\r\n  }\r\n\r\n  private _excludeCheck() {\r\n    if (this.exclude) {\r\n      try {\r\n        const nodes = Array.from(document.querySelectorAll(this.exclude)) as Array<HTMLElement>;\r\n        if (nodes) {\r\n          this._nodesExcluded = nodes;\r\n        }\r\n      } catch (err) {\r\n        console.error('[ng-click-outside] Check your exclude selector syntax.', err);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onClickBody(ev: Event) {\r\n    if (!this.clickOutsideEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.excludeBeforeClick) {\r\n      this._excludeCheck();\r\n    }\r\n\r\n    if (!this._el.nativeElement.contains(ev.target) && !this._shouldExclude(ev.target as HTMLElement)) {\r\n      this._emit(ev);\r\n\r\n      if (this.attachOutsideOnClick) {\r\n        this._removeClickOutsideListener();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resolves problem with outside click on iframe\r\n   * @see https://github.com/arkon/ng-click-outside/issues/32\r\n   */\r\n  private _onWindowBlur(ev: Event) {\r\n    setTimeout(() => {\r\n      if (!document.hidden) {\r\n        this._emit(ev);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _emit(ev: Event) {\r\n    if (!this.clickOutsideEnabled) {\r\n      return;\r\n    }\r\n\r\n    this._ngZone.run(() => this.clickOutside.emit(ev));\r\n  }\r\n\r\n  private _shouldExclude(target: HTMLElement): boolean {\r\n    for (const excludedNode of this._nodesExcluded) {\r\n      if (excludedNode.contains(target)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _initClickOutsideListener() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._events.forEach(e => document.addEventListener(e, this._onClickBody));\r\n    });\r\n  }\r\n\r\n  private _removeClickOutsideListener() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._events.forEach(e => document.removeEventListener(e, this._onClickBody));\r\n    });\r\n  }\r\n\r\n  private _initAttachOutsideOnClickListener() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._events.forEach(e => this._el.nativeElement.addEventListener(e, this._initOnClickBody));\r\n    });\r\n  }\r\n\r\n  private _removeAttachOutsideOnClickListener() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._events.forEach(e => this._el.nativeElement.removeEventListener(e, this._initOnClickBody));\r\n    });\r\n  }\r\n\r\n  private _initWindowBlurListener() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      window.addEventListener('blur', this._onWindowBlur);\r\n    });\r\n  }\r\n\r\n  private _removeWindowBlurListener() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      window.removeEventListener('blur', this._onWindowBlur);\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[click.outside]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "attachOutsideOnClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "clickOutsideEnabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "clickOutsideEvents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "delayClickOutsideInit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emitOnBlur",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "exclude",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "excludeBeforeClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "click.outside",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<Event>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_events",
                    "defaultValue": "['click']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_nodesExcluded",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_emit",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_excludeCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_initAttachOutsideOnClickListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_initClickOutsideListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_initOnClickBody",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_initWindowBlurListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onClickBody",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onWindowBlur",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResolves problem with outside click on iframe\nSee https://github.com/arkon/ng-click-outside/issues/32\n",
                    "description": "<p>Resolves problem with outside click on iframe\nSee <a href=\"https://github.com/arkon/ng-click-outside/issues/32\">https://github.com/arkon/ng-click-outside/issues/32</a></p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_removeAttachOutsideOnClickListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_removeClickOutsideListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_removeWindowBlurListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_shouldExclude",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DownFileDirective",
            "id": "directive-DownFileDirective-bd19c5b5a85027fa5885b3d5dc3e9510453c470ddb7d232564843659dfdf4d8115d82e71302f9c7805c06d4283cf5e2513ab39be4cafdddc1dd0bd0e99ffb7d3",
            "file": "lib/directive/down-file.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\r\nimport { DownloadOption, DownloadService } from '@xmagic/nzx-antd/service';\r\nimport { FetchOptions } from '@xmagic/nzx-antd/service';\r\n\r\n@Directive({\r\n  selector: '[down-file]',\r\n  exportAs: 'downFile'\r\n})\r\nexport class DownFileDirective {\r\n  /**\r\n   * 下载文件的url\r\n   */\r\n  @Input('down-file') url!: string;\r\n  /**\r\n   * 是否禁用点击下载\r\n   */\r\n  @Input() disabled = false;\r\n  /**\r\n   * 请求方式\r\n   */\r\n  @Input() method: FetchOptions['method'] = 'get';\r\n  /**\r\n   * 请求参数\r\n   */\r\n  @Input() data?: FetchOptions['data'];\r\n  /**\r\n   * 发送之前的回调函数\r\n   */\r\n  @Input() beforeSend?: FetchOptions['beforeSend'];\r\n\r\n  /**\r\n   * 请求完成后的回调\r\n   */\r\n  @Input() afterDownload?: DownloadOption['afterDownload'];\r\n\r\n  /**\r\n   * 下载并保存完成的回调\r\n   */\r\n  @Input() downloadDone?: DownloadOption['downloadDone'];\r\n\r\n  constructor(private downloadService: DownloadService) {}\r\n\r\n  @HostListener('click', ['$event'])\r\n  clickEventHandler(event: MouseEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.downloadService.download({\r\n      url: this.url,\r\n      method: this.method,\r\n      data: this.data,\r\n      beforeSend: this.beforeSend,\r\n      afterDownload: this.afterDownload,\r\n      downloadDone: this.downloadDone\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[down-file]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "afterDownload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求完成后的回调\n",
                    "description": "<p>请求完成后的回调</p>\n",
                    "line": 34,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "beforeSend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n发送之前的回调函数\n",
                    "description": "<p>发送之前的回调函数</p>\n",
                    "line": 29,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求参数\n",
                    "description": "<p>请求参数</p>\n",
                    "line": 25,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否禁用点击下载\n",
                    "description": "<p>是否禁用点击下载</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "down-file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n下载文件的url\n",
                    "description": "<p>下载文件的url</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "downloadDone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n下载并保存完成的回调\n",
                    "description": "<p>下载并保存完成的回调</p>\n",
                    "line": 39,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "method",
                    "defaultValue": "'get'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求方式\n",
                    "description": "<p>请求方式</p>\n",
                    "line": 21,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickEventHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "downloadService",
                        "type": "DownloadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "downloadService",
                        "type": "DownloadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FaIconDirective",
            "id": "directive-FaIconDirective-7f01856f28b15bb63df77d8ffbcfd0282c53df58b4554b5b4d916998550094dc2fb280737747cda0eebd1e0765edce40561058fe02a8c38c85be4aa0b88fc104",
            "file": "lib/directive/fa-icon.directive.ts",
            "type": "directive",
            "description": "<p>font-awesome 使用指令\n@\n&lt;i</p>\n",
            "rawdescription": "\n\nfont-awesome 使用指令\n@\n<i\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2, SimpleChange, SimpleChanges } from '@angular/core';\r\n\r\n/**\r\n * font-awesome 使用指令\r\n * @\r\n * <i\r\n */\r\n@Directive({\r\n  selector: '[fa-icon]',\r\n  exportAs: 'faIcon',\r\n  host: {\r\n    '[class.fa]': `type === 'fa'`,\r\n    '[class.far]': `type === 'far'`,\r\n    '[class.fa-spin]': 'spin === true',\r\n    '[class.fa-pulse]': 'pulse === true',\r\n    '[class.fa-fw]': 'fixedWidth === true',\r\n    '[class.fa-border]': 'border === true',\r\n    '[class.fa-inverse]': 'inverse === true',\r\n    '[class.fa-flip-horizontal]': `flip === 'horizontal'`,\r\n    '[class.fa-flip-vertical]': `flip === 'vertical'`,\r\n    '[class.fa-flip-both]': `flip === 'both'`,\r\n    '[class.fa-pull-left]': `pull === 'left'`,\r\n    '[class.fa-pull-right]': `pull === 'right'`,\r\n    '[class.fa-rotate-90]': `rotate === 90`,\r\n    '[class.fa-rotate-180]': `rotate === 180`,\r\n    '[class.fa-rotate-270]': `rotate === 270`,\r\n    '[class.fa-stack-1x]': `stackItemSize === '1x'`,\r\n    '[class.fa-stack-2x]': `stackItemSize === '2x'`\r\n  }\r\n})\r\nexport class FaIconDirective implements OnInit, OnChanges {\r\n  @Input('fa-icon') icon!: string;\r\n  @Input() type: 'far' | 'fa' = 'fa';\r\n  @Input() spin?: boolean;\r\n  @Input() pulse?: boolean;\r\n  @Input() flip?: 'horizontal' | 'vertical' | 'both';\r\n  @Input() pull?: 'left' | 'right';\r\n  @Input() border?: boolean;\r\n  @Input() inverse?: boolean;\r\n  @Input() symbol?: string | boolean;\r\n  @Input() rotate?: 90 | 180 | 270;\r\n  @Input() fixedWidth?: boolean;\r\n  @Input() stackItemSize?: '1x' | '2x';\r\n  @Input() size?: IconSizeType;\r\n\r\n  constructor(public render: Renderer2, public element: ElementRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.renderIcon(this.icon);\r\n    this.renderSize(this.size);\r\n  }\r\n\r\n  renderIcon(newIcon: string | null, oldIcon?: string | null) {\r\n    if (oldIcon) {\r\n      this.getIconClass(oldIcon).forEach(cls => this.render.removeClass(this.element.nativeElement, cls));\r\n    }\r\n    if (newIcon) {\r\n      this.getIconClass(newIcon).forEach(cls => this.render.addClass(this.element.nativeElement, cls));\r\n    }\r\n  }\r\n\r\n  getIconClass(icon: string): string[] {\r\n    return icon ? icon.split(/\\s/) : [];\r\n  }\r\n\r\n  renderSize(newSize?: IconSizeType, oldSize?: IconSizeType) {\r\n    const newSizeCls = newSize ? `fa-${newSize}` : null;\r\n    const oldSizeCls = oldSize ? `fa-${oldSize}` : null;\r\n    this.renderIcon(newSizeCls, oldSizeCls);\r\n  }\r\n\r\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (changes.icon && !changes.icon.isFirstChange()) {\r\n      this.renderIcon(changes.icon.currentValue, changes.icon.previousValue);\r\n    }\r\n\r\n    if (changes.size && !changes.size.isFirstChange()) {\r\n      this.renderSize(changes.size.currentValue, changes.size.previousValue);\r\n    }\r\n  }\r\n}\r\n\r\nexport type IconSizeType = 'xs' | 'lg' | 'sm' | '1x' | '2x' | '3x' | '4x' | '5x' | '6x' | '7x' | '8x' | '9x' | '10x';\r\n",
            "selector": "[fa-icon]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "border",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fa-icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fixedWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "flip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "\"horizontal\" | \"vertical\" | \"both\"",
                    "decorators": []
                },
                {
                    "name": "inverse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pull",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "\"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "pulse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rotate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "\"90\" | \"180\" | \"270\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "IconSizeType",
                    "decorators": []
                },
                {
                    "name": "spin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stackItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "\"1x\" | \"2x\"",
                    "decorators": []
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string | boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'fa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "\"far\" | \"fa\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "render",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getIconClass",
                    "args": [
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderIcon",
                    "args": [
                        {
                            "name": "newIcon",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldIcon",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newIcon",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldIcon",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderSize",
                    "args": [
                        {
                            "name": "newSize",
                            "type": "IconSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "oldSize",
                            "type": "IconSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newSize",
                            "type": "IconSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldSize",
                            "type": "IconSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LetDirective",
            "id": "directive-LetDirective-3c03768af4325822c834e19d0f50d87d5153d3255a36f5ab67bb7681a9c4fde5081489f6803b058f6e9e1df93df555885799f14952d7e9374e40a49bd68d39c8",
            "file": "lib/directive/let.directive.ts",
            "type": "directive",
            "description": "<p>允许在模板内复用计算值（包含异步），避免重复重新计算。</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><div *let=\"value1 as v\">\n  <p>{{ v }}</p>\n</div>\n<div *let=\"time$ | async as time\">\n  <p>{{ time }}</p>\n</div>\n",
            "rawdescription": "\n\n允许在模板内复用计算值（包含异步），避免重复重新计算。\n```html\n```\n<div *let=\"value1 as v\">\n  <p>{{ v }}</p>\n</div>\n<div *let=\"time$ | async as time\">\n  <p>{{ time }}</p>\n</div>\n",
            "sourceCode": "import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n/**\r\n * 允许在模板内复用计算值（包含异步），避免重复重新计算。\r\n * @example\r\n *\r\n * <div *let=\"value1 as v\">\r\n *   <p>{{ v }}</p>\r\n * </div>\r\n * <div *let=\"time$ | async as time\">\r\n *   <p>{{ time }}</p>\r\n * </div>\r\n */\r\n@Directive({ selector: '[let]' })\r\nexport class LetDirective<T> {\r\n  @Input() let!: T;\r\n\r\n  constructor(@Inject(ViewContainerRef) vc: ViewContainerRef, @Inject(TemplateRef) ref: TemplateRef<LetContext<T>>) {\r\n    vc.createEmbeddedView(ref, new LetContext<T>(this));\r\n  }\r\n\r\n  static ngTemplateContextGuard<T>(_dir: LetDirective<T>, _ctx: NzSafeAny): _ctx is LetDirective<T> {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class LetContext<T> {\r\n  constructor(private readonly directive: LetDirective<T>) {}\r\n\r\n  get $implicit(): T {\r\n    return this.directive.let;\r\n  }\r\n\r\n  get let(): T {\r\n    return this.directive.let;\r\n  }\r\n}\r\n",
            "selector": "[let]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "let",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "T",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "_dir",
                            "type": "LetDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_ctx",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LetDirective<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "_dir",
                            "type": "LetDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_ctx",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "vc",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ref",
                        "type": "TemplateRef<LetContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "vc",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "TemplateRef<LetContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalDragDirective",
            "id": "directive-ModalDragDirective-fed1cf68d0cc25419d435915210f1c96dbe3a6a4fec2fa7de4705c4b6c872c37c71538f785aad68ea8d9cfefc43f3033d0c1be8d99b369827d00d8654baf08aa",
            "file": "lib/modal/modal-drag.directive.ts",
            "type": "directive",
            "description": "<p>可拖动的对话框</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">``` html\n&lt;nz-modal nzxModalDrag &gt;&lt;/nz-modal&gt;</code></pre></div><p>```</p>\n",
            "rawdescription": "\n\n可拖动的对话框\n```html\n``` html\n<nz-modal nzxModalDrag ></nz-modal>\n```\n```",
            "sourceCode": "import { Directive, Host } from '@angular/core';\r\nimport { NzModalComponent } from 'ng-zorro-antd/modal';\r\nimport { ModalDragService } from './modal-drag.service';\r\n\r\n/**\r\n * 可拖动的对话框\r\n * @example\r\n * ``` html\r\n * <nz-modal nzxModalDrag ></nz-modal>\r\n ```\r\n */\r\n@Directive({\r\n  selector: 'nz-modal[nzxModalDrag]'\r\n})\r\nexport class ModalDragDirective {\r\n  constructor(@Host() protected modal: NzModalComponent, public modalDragService: ModalDragService) {\r\n    const wrapCls = this.modalDragService.getRandomCls();\r\n    modal.afterOpen.subscribe(() => {\r\n      const modelElement = modal.getElement()!;\r\n      if (!modelElement || modelElement.className.indexOf(ModalDragService.DRAG_CLS_PREFIX) !== -1) {\r\n        return;\r\n      }\r\n\r\n      modelElement.classList.add(wrapCls);\r\n      const drag = this.modalDragService.createDragHandler(wrapCls, modal.nzMask, modal.nzModalType);\r\n      modal.afterClose.subscribe(() => {\r\n        if (drag && !drag.dropped) {\r\n          drag.dispose();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n",
            "selector": "nz-modal[nzxModalDrag]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "modalDragService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalDragService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NzModalComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalDragService",
                        "type": "ModalDragService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NzModalComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalDragService",
                        "type": "ModalDragService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NamedTemplate",
            "id": "directive-NamedTemplate-eff7ad8ef82ae62b616a423c45e4ed8c2055748e1dea4b2d337a165e7b68d34067516f29a90274dc939056fac53a7cc9fc10a95f969380e9848741a614f96313",
            "file": "lib/directive/named-template.ts",
            "type": "directive",
            "description": "<p>获取模板名称</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">``` html\n&lt;ng-template named=&quot;test&quot;&gt;&lt;/ng-template&gt;\n&lt;ng-template #test named&gt;&lt;/ng-template&gt;</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-none\">``` javascript\n&#64;Component(...)\nexport class TestComponent {\n  &#64;ViewChildren(NamedTemplate) list!: QueryList&lt;NamedTemplate&gt;;\n\n  trace() {\n    this.list.forEach(it =&gt; {\n      console.log(it.named);\n      console.log(it.template);\n    });\n  }\n}</code></pre></div>",
            "rawdescription": "\n\n获取模板名称\n```html\n``` html\n<ng-template named=\"test\"></ng-template>\n<ng-template #test named></ng-template>\n```\n```\n``` javascript\n@Component(...)\nexport class TestComponent {\n  @ViewChildren(NamedTemplate) list!: QueryList<NamedTemplate>;\n\n  trace() {\n    this.list.forEach(it => {\n      console.log(it.named);\n      console.log(it.template);\n    });\n  }\n}\n```\n",
            "sourceCode": "import { Directive, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\n/**\r\n * 获取模板名称\r\n * @example\r\n * ``` html\r\n * <ng-template named=\"test\"></ng-template>\r\n * <ng-template #test named></ng-template>\r\n *\r\n * ```\r\n * ``` javascript\r\n * @Component(...)\r\n * export class TestComponent {\r\n *   @ViewChildren(NamedTemplate) list!: QueryList<NamedTemplate>;\r\n *\r\n *   trace() {\r\n *     this.list.forEach(it => {\r\n *       console.log(it.named);\r\n *       console.log(it.template);\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r\n@Directive({\r\n  selector: 'ng-template[named]',\r\n  exportAs: 'namedTemplate'\r\n})\r\nexport class NamedTemplate<T> implements OnInit {\r\n  /**\r\n   * 模板名称\r\n   */\r\n  @Input() named!: string;\r\n  constructor(public template: TemplateRef<T>) {}\r\n\r\n  ngOnInit(): void {\r\n    this.resolveName();\r\n  }\r\n\r\n  resolveName() {\r\n    if (!this.named && this.template) {\r\n      const tplRef = this.template as NzSafeAny;\r\n      // localNames为数组, 如果没有name则为null\r\n      this.named = tplRef._declarationTContainer.localNames?.[0];\r\n    }\r\n  }\r\n}\r\n",
            "selector": "ng-template[named]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "named",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n模板名称\n",
                    "description": "<p>模板名称</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resolveName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "BetweenDatetimeComponent",
            "id": "component-BetweenDatetimeComponent-f390375ee527ef8765c093985d4eb99cbf4634a2d1a0b1020ec44d05d236da6149e0befb58b8346efe88038aae1fa1a54ef253c20e7f91ff2106e0b4b9974284",
            "file": "lib/between-datetime/between-datetime.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "nzxBetweenDatetime",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => BetweenDatetimeComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "nzx-between-datetime",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./between-datetime.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endMaxDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最大时间\n",
                    "description": "<p>最大时间</p>\n",
                    "line": 251,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "endMinDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最小时间\n",
                    "description": "<p>最小时间</p>\n",
                    "line": 261,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "nzFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n展示的日期格式，见nzFormat特别说明\n",
                    "description": "<p>展示的日期格式，见nzFormat特别说明</p>\n",
                    "line": 156,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzLocale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n国际化配置\n",
                    "description": "<p>国际化配置</p>\n",
                    "line": 170,
                    "type": "NzDatePickerI18nInterface",
                    "decorators": []
                },
                {
                    "name": "nzMode",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "NzDateMode",
                    "decorators": []
                },
                {
                    "name": "nzShowTime",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 140,
                    "type": "SupportTimeOptions | boolean",
                    "decorators": []
                },
                {
                    "name": "nzShowToday",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndAllowClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示清除按钮\n",
                    "description": "<p>是否显示清除按钮</p>\n",
                    "line": 101,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndAutoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n自动获取焦点\n",
                    "description": "<p>自动获取焦点</p>\n",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndBackdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n浮层是否应带有背景板\n",
                    "description": "<p>浮层是否应带有背景板</p>\n",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndDateRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 201,
                    "type": "TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>",
                    "decorators": []
                },
                {
                    "name": "nzxEndDefaultPickerValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n默认面板日期\n",
                    "description": "<p>默认面板日期</p>\n",
                    "line": 128,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "nzxEndDropdownClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n额外的弹出日历 className\n",
                    "description": "<p>额外的弹出日历 className</p>\n",
                    "line": 152,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n组件内部 input 的 id 值\n",
                    "description": "<p>组件内部 input 的 id 值</p>\n",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndInputReadOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n为 input 标签设置只读属性（避免在移动设备上触发小键盘）\n",
                    "description": "<p>为 input 标签设置只读属性（避免在移动设备上触发小键盘）</p>\n",
                    "line": 166,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndPlaceholder",
                    "defaultValue": "'结束值'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段Placeholder\n",
                    "description": "<p>结束字段Placeholder</p>\n",
                    "line": 73,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "nzxEndPopupStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n额外的弹出日历样式\n",
                    "description": "<p>额外的弹出日历样式</p>\n",
                    "line": 180,
                    "type": "object",
                    "decorators": []
                },
                {
                    "name": "nzxEndReName",
                    "defaultValue": "'end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段重命名\n",
                    "description": "<p>结束字段重命名</p>\n",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndRenderExtraFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n在面板中添加额外的页脚\n",
                    "description": "<p>在面板中添加额外的页脚</p>\n",
                    "line": 189,
                    "type": "TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>",
                    "decorators": []
                },
                {
                    "name": "nzxEndSeparator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndShowNow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 134,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndShowTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 142,
                    "type": "SupportTimeOptions | boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndShowToday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 138,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndSuffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n自定义的后缀图标\n",
                    "description": "<p>自定义的后缀图标</p>\n",
                    "line": 198,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzxStartAllowClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示清除按钮\n",
                    "description": "<p>是否显示清除按钮</p>\n",
                    "line": 96,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartAutoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n自动获取焦点\n",
                    "description": "<p>自动获取焦点</p>\n",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartBackdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n浮层是否应带有背景板\n",
                    "description": "<p>浮层是否应带有背景板</p>\n",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartDateRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 200,
                    "type": "TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>",
                    "decorators": []
                },
                {
                    "name": "nzxStartDefaultPickerValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n默认面板日期\n",
                    "description": "<p>默认面板日期</p>\n",
                    "line": 123,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "nzxStartDropdownClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n额外的弹出日历 className\n",
                    "description": "<p>额外的弹出日历 className</p>\n",
                    "line": 147,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n组件内部 input 的 id 值\n",
                    "description": "<p>组件内部 input 的 id 值</p>\n",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartInputReadOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n为 input 标签设置只读属性（避免在移动设备上触发小键盘）\n",
                    "description": "<p>为 input 标签设置只读属性（避免在移动设备上触发小键盘）</p>\n",
                    "line": 161,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartPlaceholder",
                    "defaultValue": "'起始值'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段Placeholder\n",
                    "description": "<p>开始字段Placeholder</p>\n",
                    "line": 69,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "nzxStartPopupStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n额外的弹出日历样式\n",
                    "description": "<p>额外的弹出日历样式</p>\n",
                    "line": 175,
                    "type": "object",
                    "decorators": []
                },
                {
                    "name": "nzxStartReName",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段重命名\n",
                    "description": "<p>开始字段重命名</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartRenderExtraFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n在面板中添加额外的页脚\n",
                    "description": "<p>在面板中添加额外的页脚</p>\n",
                    "line": 184,
                    "type": "TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef | string>",
                    "decorators": []
                },
                {
                    "name": "nzxStartSeparator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartShowNow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 133,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartShowTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 141,
                    "type": "SupportTimeOptions | boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartShowToday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 137,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartSuffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n自定义的后缀图标\n",
                    "description": "<p>自定义的后缀图标</p>\n",
                    "line": 193,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "startMaxDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最大时间\n",
                    "description": "<p>最大时间</p>\n",
                    "line": 256,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "startMinDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最小时间\n",
                    "description": "<p>最小时间</p>\n",
                    "line": 246,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "nzxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否禁用\n",
                    "description": "<p>是否禁用</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxEndDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段禁用\n",
                    "description": "<p>结束字段禁用</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxSize",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n控件大小\n",
                    "description": "<p>控件大小</p>\n",
                    "line": 20,
                    "type": "NzSizeLDSType",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxStartDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段禁用\n",
                    "description": "<p>开始字段禁用</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "nzxEndOnCalendarChange",
                    "defaultValue": "new EventEmitter<(Date | null)[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n待选日期发生变化的回调\n",
                    "description": "<p>待选日期发生变化的回调</p>\n",
                    "line": 231,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxEndOnOk",
                    "defaultValue": "new EventEmitter<CompatibleDate | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOK按钮点击\n",
                    "description": "<p>OK按钮点击</p>\n",
                    "line": 221,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxEndOnOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n弹出日历和关闭日历的回调\n",
                    "description": "<p>弹出日历和关闭日历的回调</p>\n",
                    "line": 211,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxEndOnPanelChange",
                    "defaultValue": "new EventEmitter<string | NzDateMode[] | string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n待选日期发生变化的回调\n",
                    "description": "<p>待选日期发生变化的回调</p>\n",
                    "line": 241,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxStartOnCalendarChange",
                    "defaultValue": "new EventEmitter<(Date | null)[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n待选日期发生变化的回调\n",
                    "description": "<p>待选日期发生变化的回调</p>\n",
                    "line": 226,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxStartOnOk",
                    "defaultValue": "new EventEmitter<CompatibleDate | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOK按钮点击\n",
                    "description": "<p>OK按钮点击</p>\n",
                    "line": 216,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxStartOnOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n弹出日历和关闭日历的回调\n",
                    "description": "<p>弹出日历和关闭日历的回调</p>\n",
                    "line": 206,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxStartOnPanelChange",
                    "defaultValue": "new EventEmitter<string | NzDateMode[] | string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n待选日期发生变化的回调\n",
                    "description": "<p>待选日期发生变化的回调</p>\n",
                    "line": 236,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultDisabledTime",
                    "defaultValue": "{\r\n    nzDisabledHours: () => [],\r\n    nzDisabledMinutes: () => [],\r\n    nzDisabledSeconds: () => []\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisabledTimeConfig",
                    "optional": false,
                    "description": "<p>默认配置</p>\n",
                    "line": 59,
                    "rawdescription": "\n\n默认配置\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "nzxEndDisabledDate",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>不可选择的日期</p>\n",
                    "line": 386,
                    "rawdescription": "\n\n不可选择的日期\n"
                },
                {
                    "name": "nzxEndDisabledTime",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisabledTimeFn",
                    "optional": true,
                    "description": "",
                    "line": 295
                },
                {
                    "name": "nzxStartDisabledDate",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>不可选择的日期</p>\n",
                    "line": 358,
                    "rawdescription": "\n\n不可选择的日期\n"
                },
                {
                    "name": "nzxStartDisabledTime",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisabledTimeFn",
                    "optional": false,
                    "description": "",
                    "line": 278
                },
                {
                    "name": "nzxValue",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatetimeValueType",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 484
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 485
                }
            ],
            "methodsClass": [
                {
                    "name": "getDisabledMaxDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValue",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValue",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisabledMinDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minValue",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 436,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minValue",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisabledTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minValue",
                            "type": "Date | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValue",
                            "type": "Date | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DisabledTimeConfig",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取禁用的时间部分\n",
                    "description": "<p>获取禁用的时间部分</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7349,
                                "end": 7353,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7343,
                                "end": 7348,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前日期</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7372,
                                "end": 7380,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minValue"
                            },
                            "type": "Date | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7366,
                                "end": 7371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最小日期值</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7400,
                                "end": 7408,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "maxValue"
                            },
                            "type": "Date | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7394,
                                "end": 7399,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最大日期值</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7422,
                                "end": 7429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngModelChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 463,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "DatetimeValueType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 476,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "DatetimeValueType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 480,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 472,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "DatetimeValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 467,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "DatetimeValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport {\r\n  DisabledTimeFn,\r\n  CompatibleDate,\r\n  SupportTimeOptions,\r\n  NzDateMode,\r\n  DisabledTimeConfig\r\n} from 'ng-zorro-antd/date-picker';\r\nimport { FunctionProp, NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzDatePickerI18nInterface } from 'ng-zorro-antd/i18n';\r\nimport { NzxBetweenComponent } from '@xmagic/nzx-antd/between';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport {\r\n  DatetimeValueType,\r\n  DisabledDateType,\r\n  getEndDate,\r\n  getEndMonthDate,\r\n  getEndWeekDate,\r\n  getEndYearDate,\r\n  getRealDateTime,\r\n  getStartDate,\r\n  getStartMonthDate,\r\n  getStartWeekDate,\r\n  getStartYearDate,\r\n  getTimeValue\r\n} from './datetime-utils';\r\n\r\n@Component({\r\n  selector: 'nzx-between-datetime',\r\n  exportAs: 'nzxBetweenDatetime',\r\n  templateUrl: './between-datetime.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => BetweenDatetimeComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class BetweenDatetimeComponent extends NzxBetweenComponent implements ControlValueAccessor {\r\n  nzxValue: DatetimeValueType = {};\r\n  /**\r\n   * 默认配置\r\n   */\r\n  readonly defaultDisabledTime: DisabledTimeConfig = {\r\n    nzDisabledHours: () => [],\r\n    nzDisabledMinutes: () => [],\r\n    nzDisabledSeconds: () => []\r\n  };\r\n\r\n  @Input() nzMode?: NzDateMode = 'date';\r\n  /**\r\n   * 开始字段Placeholder\r\n   */\r\n  @Input() nzxStartPlaceholder: string | string[] = '起始值';\r\n  /**\r\n   * 结束字段Placeholder\r\n   */\r\n  @Input() nzxEndPlaceholder: string | string[] = '结束值';\r\n\r\n  /**\r\n   * 开始字段重命名\r\n   */\r\n  @Input() nzxStartReName = 'start';\r\n  /**\r\n   * 结束字段重命名\r\n   */\r\n  @Input() nzxEndReName = 'end';\r\n\r\n  /**\r\n   * 组件内部 input 的 id 值\r\n   */\r\n  @Input() nzxStartId?: string;\r\n\r\n  /**\r\n   * 组件内部 input 的 id 值\r\n   */\r\n  @Input() nzxEndId?: string;\r\n  /**\r\n   * 是否显示清除按钮\r\n   */\r\n  @Input() nzxStartAllowClear?: boolean;\r\n\r\n  /**\r\n   * 是否显示清除按钮\r\n   */\r\n  @Input() nzxEndAllowClear?: boolean;\r\n  /**\r\n   * 自动获取焦点\r\n   */\r\n  @Input() nzxStartAutoFocus?: boolean;\r\n\r\n  /**\r\n   * 自动获取焦点\r\n   */\r\n  @Input() nzxEndAutoFocus?: boolean;\r\n  /**\r\n   * 浮层是否应带有背景板\r\n   */\r\n  @Input() nzxStartBackdrop?: boolean;\r\n\r\n  /**\r\n   * 浮层是否应带有背景板\r\n   */\r\n  @Input() nzxEndBackdrop?: boolean;\r\n  /**\r\n   * 默认面板日期\r\n   */\r\n  @Input() nzxStartDefaultPickerValue?: Date;\r\n\r\n  /**\r\n   * 默认面板日期\r\n   */\r\n  @Input() nzxEndDefaultPickerValue?: Date;\r\n\r\n  @Input() nzxStartSeparator?: string;\r\n  @Input() nzxEndSeparator?: string;\r\n\r\n  @Input() nzxStartShowNow = true;\r\n  @Input() nzxEndShowNow = true;\r\n\r\n  @Input() nzShowToday = true;\r\n  @Input() nzxStartShowToday?: boolean;\r\n  @Input() nzxEndShowToday?: boolean;\r\n\r\n  @Input() nzShowTime: SupportTimeOptions | boolean = false;\r\n  @Input() nzxStartShowTime?: SupportTimeOptions | boolean;\r\n  @Input() nzxEndShowTime?: SupportTimeOptions | boolean;\r\n\r\n  /**\r\n   * 额外的弹出日历 className\r\n   */\r\n  @Input() nzxStartDropdownClassName?: string;\r\n\r\n  /**\r\n   * 额外的弹出日历 className\r\n   */\r\n  @Input() nzxEndDropdownClassName?: string;\r\n  /**\r\n   * 展示的日期格式，见nzFormat特别说明\r\n   */\r\n  @Input() nzFormat?: string;\r\n\r\n  /**\r\n   * 为 input 标签设置只读属性（避免在移动设备上触发小键盘）\r\n   */\r\n  @Input() nzxStartInputReadOnly?: boolean;\r\n\r\n  /**\r\n   * 为 input 标签设置只读属性（避免在移动设备上触发小键盘）\r\n   */\r\n  @Input() nzxEndInputReadOnly?: boolean;\r\n  /**\r\n   * 国际化配置\r\n   */\r\n  @Input() nzLocale?: NzDatePickerI18nInterface;\r\n\r\n  /**\r\n   * 额外的弹出日历样式\r\n   */\r\n  @Input() nzxStartPopupStyle?: object;\r\n\r\n  /**\r\n   * 额外的弹出日历样式\r\n   */\r\n  @Input() nzxEndPopupStyle?: object;\r\n  /**\r\n   * 在面板中添加额外的页脚\r\n   */\r\n  @Input() nzxStartRenderExtraFooter?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<NzSafeAny> | string>;\r\n\r\n  /**\r\n   * 在面板中添加额外的页脚\r\n   */\r\n  @Input() nzxEndRenderExtraFooter?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<NzSafeAny> | string>;\r\n  /**\r\n   * 自定义的后缀图标\r\n   */\r\n  @Input() nzxStartSuffixIcon?: string | TemplateRef<NzSafeAny>;\r\n\r\n  /**\r\n   * 自定义的后缀图标\r\n   */\r\n  @Input() nzxEndSuffixIcon?: string | TemplateRef<NzSafeAny>;\r\n\r\n  @Input() nzxStartDateRender?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<Date> | string>;\r\n  @Input() nzxEndDateRender?: TemplateRef<NzSafeAny> | string | FunctionProp<TemplateRef<Date> | string>;\r\n\r\n  /**\r\n   * 弹出日历和关闭日历的回调\r\n   */\r\n  @Output() nzxStartOnOpenChange = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * 弹出日历和关闭日历的回调\r\n   */\r\n  @Output() nzxEndOnOpenChange = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * OK按钮点击\r\n   */\r\n  @Output() nzxStartOnOk = new EventEmitter<CompatibleDate | null>();\r\n\r\n  /**\r\n   * OK按钮点击\r\n   */\r\n  @Output() nzxEndOnOk = new EventEmitter<CompatibleDate | null>();\r\n\r\n  /**\r\n   * 待选日期发生变化的回调\r\n   */\r\n  @Output() nzxStartOnCalendarChange = new EventEmitter<(Date | null)[]>();\r\n\r\n  /**\r\n   * 待选日期发生变化的回调\r\n   */\r\n  @Output() nzxEndOnCalendarChange = new EventEmitter<(Date | null)[]>();\r\n\r\n  /**\r\n   * 待选日期发生变化的回调\r\n   */\r\n  @Output() nzxStartOnPanelChange = new EventEmitter<string | NzDateMode[] | string[]>();\r\n\r\n  /**\r\n   * 待选日期发生变化的回调\r\n   */\r\n  @Output() nzxEndOnPanelChange = new EventEmitter<string | NzDateMode[] | string[]>();\r\n\r\n  /**\r\n   * 最小时间\r\n   */\r\n  @Input() startMinDateTime?: DisabledDateType;\r\n\r\n  /**\r\n   * 最大时间\r\n   */\r\n  @Input() endMaxDateTime?: DisabledDateType;\r\n\r\n  /**\r\n   * 最大时间\r\n   */\r\n  @Input() startMaxDateTime?: DisabledDateType;\r\n\r\n  /**\r\n   * 最小时间\r\n   */\r\n  @Input() endMinDateTime?: DisabledDateType;\r\n\r\n  private get _defaultStartMaxDateTime(): Date | null {\r\n    return this.nzxValue[this.nzxEndReName];\r\n  }\r\n  private get _defaultEndMinDateTime(): Date | null {\r\n    return this.nzxValue[this.nzxStartReName];\r\n  }\r\n\r\n  get startDisabledTime() {\r\n    return this.nzxStartShowTime == null ? this.nzShowTime : this.nzxStartShowTime;\r\n  }\r\n\r\n  get endDisabledTime() {\r\n    return this.nzxEndShowTime == null ? this.nzShowTime : this.nzxEndShowTime;\r\n  }\r\n\r\n  nzxStartDisabledTime: DisabledTimeFn = current => {\r\n    if (!this.startDisabledTime || !current) {\r\n      return this.defaultDisabledTime;\r\n    }\r\n\r\n    const date = current as Date;\r\n    const minValue = getRealDateTime(date, this.startMinDateTime);\r\n    const maxValue = getRealDateTime(\r\n      date,\r\n      this.startMaxDateTime === undefined ? this._defaultStartMaxDateTime : this.startMaxDateTime\r\n    );\r\n    if (!minValue && !maxValue) {\r\n      return this.defaultDisabledTime;\r\n    }\r\n    return this.getDisabledTime(date, minValue, maxValue);\r\n  };\r\n\r\n  nzxEndDisabledTime?: DisabledTimeFn = current => {\r\n    if (!this.endDisabledTime || !current) {\r\n      return this.defaultDisabledTime;\r\n    }\r\n\r\n    const date = current as Date;\r\n    const minValue = getRealDateTime(\r\n      date,\r\n      this.endMinDateTime === undefined ? this._defaultEndMinDateTime : this.endMinDateTime\r\n    );\r\n    const maxValue = getRealDateTime(date, this.endMaxDateTime);\r\n    if (!minValue && !maxValue) {\r\n      return this.defaultDisabledTime;\r\n    }\r\n    return this.getDisabledTime(date, minValue, maxValue);\r\n  };\r\n\r\n  /**\r\n   * 获取禁用的时间部分\r\n   * @param date 当前日期\r\n   * @param minValue 最小日期值\r\n   * @param maxValue 最大日期值\r\n   * @private\r\n   */\r\n  private getDisabledTime(\r\n    date: Date,\r\n    minValue: Date | null | undefined,\r\n    maxValue: Date | null | undefined\r\n  ): DisabledTimeConfig {\r\n    const start = getTimeValue(date, minValue);\r\n\r\n    let hours: number[] = [];\r\n    let minutes: number[] = [];\r\n    let seconds: number[] = [];\r\n    if (start) {\r\n      const equalsHour = start.hour === date.getHours();\r\n      hours = Utils.range(0, start.hour);\r\n      minutes = equalsHour ? Utils.range(0, start.minute) : [];\r\n      seconds = equalsHour && start.minute === date.getMinutes() ? Utils.range(0, start.second) : [];\r\n    }\r\n\r\n    const end = getTimeValue(date, maxValue);\r\n    if (end) {\r\n      const equalsHour = end.hour === date.getHours();\r\n      hours = hours.concat(Utils.range(end.hour + 1, 24));\r\n      minutes = equalsHour ? minutes.concat(Utils.range(end.minute + 1, 60)) : minutes;\r\n      seconds =\r\n        equalsHour && end.minute === date.getMinutes() ? seconds.concat(Utils.range(end.second + 1, 60)) : seconds;\r\n    }\r\n\r\n    return {\r\n      nzDisabledHours: () => hours,\r\n      nzDisabledMinutes: hour => (hour === start?.hour || hour === end?.hour ? minutes : []),\r\n      nzDisabledSeconds: (hour, minute) =>\r\n        (hour === start?.hour && minute === start?.minute) || (hour === end?.hour && minute === end?.minute)\r\n          ? seconds\r\n          : []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 不可选择的日期\r\n   */\r\n  nzxStartDisabledDate: (current: Date) => boolean = date => {\r\n    if (!date) {\r\n      return false;\r\n    }\r\n\r\n    const minValue = getRealDateTime(date, this.startMinDateTime);\r\n    const maxValue = getRealDateTime(\r\n      date,\r\n      this.startMaxDateTime === undefined ? this._defaultStartMaxDateTime : this.startMaxDateTime\r\n    );\r\n    if (!maxValue && !minValue) {\r\n      return false;\r\n    }\r\n    // date < min\r\n    if (minValue && this.getDisabledMinDate(date, minValue)) {\r\n      return true;\r\n    }\r\n\r\n    // date > max\r\n    if (maxValue && this.getDisabledMaxDate(date, maxValue)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * 不可选择的日期\r\n   */\r\n  nzxEndDisabledDate: (current: Date) => boolean = date => {\r\n    if (!date) {\r\n      return false;\r\n    }\r\n\r\n    const minValue = getRealDateTime(\r\n      date,\r\n      this.endMinDateTime === undefined ? this._defaultEndMinDateTime : this.endMinDateTime\r\n    );\r\n    const maxValue = getRealDateTime(date, this.endMaxDateTime);\r\n    if (!maxValue && !minValue) {\r\n      return false;\r\n    }\r\n\r\n    // date > max\r\n    if (maxValue && this.getDisabledMaxDate(date, maxValue)) {\r\n      return true;\r\n    }\r\n\r\n    // date < min\r\n    if (minValue && this.getDisabledMinDate(date, minValue)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  private getDisabledMaxDate(date: Date, maxValue: Date) {\r\n    if (this.nzMode === 'date') {\r\n      if (getStartDate(date) > maxValue.getTime()) {\r\n        return true;\r\n      }\r\n    } else if (this.nzMode === 'week') {\r\n      if (getStartWeekDate(date) > maxValue.getTime()) {\r\n        return true;\r\n      }\r\n    } else if (this.nzMode === 'month') {\r\n      if (getStartMonthDate(date) > maxValue.getTime()) {\r\n        return true;\r\n      }\r\n    } else if (this.nzMode === 'year') {\r\n      if (getStartYearDate(date) > maxValue.getTime()) {\r\n        return true;\r\n      }\r\n    } else {\r\n      return date > maxValue;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getDisabledMinDate(date: Date, minValue: Date) {\r\n    if (this.nzMode === 'date') {\r\n      if (minValue.getTime() > getEndDate(date)) {\r\n        return true;\r\n      }\r\n    } else if (this.nzMode === 'week') {\r\n      if (minValue.getTime() > getEndWeekDate(date)) {\r\n        return true;\r\n      }\r\n    } else if (this.nzMode === 'month') {\r\n      if (minValue.getTime() > getEndMonthDate(date)) {\r\n        return true;\r\n      }\r\n    } else if (this.nzMode === 'year') {\r\n      if (minValue.getTime() > getEndYearDate(date)) {\r\n        return true;\r\n      }\r\n    } else {\r\n      return minValue > date;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  constructor(protected cdr: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngModelChange() {\r\n    this.onChange(this.nzxValue);\r\n  }\r\n\r\n  writeValue(value: DatetimeValueType): void {\r\n    this.nzxValue = value || {};\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.nzxDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: (_: DatetimeValueType) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  onChange: (value: DatetimeValueType) => void = () => null;\r\n  onTouched: () => void = () => null;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 457,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NzxBetweenComponent",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "_defaultStartMaxDateTime": {
                    "name": "_defaultStartMaxDateTime",
                    "getSignature": {
                        "name": "_defaultStartMaxDateTime",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 263
                    }
                },
                "_defaultEndMinDateTime": {
                    "name": "_defaultEndMinDateTime",
                    "getSignature": {
                        "name": "_defaultEndMinDateTime",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 266
                    }
                },
                "startDisabledTime": {
                    "name": "startDisabledTime",
                    "getSignature": {
                        "name": "startDisabledTime",
                        "type": "",
                        "returnType": "",
                        "line": 270
                    }
                },
                "endDisabledTime": {
                    "name": "endDisabledTime",
                    "getSignature": {
                        "name": "endDisabledTime",
                        "type": "",
                        "returnType": "",
                        "line": 274
                    }
                }
            },
            "templateData": "<nzx-between\r\n  [nzxDisabled]=\"nzxDisabled\"\r\n  [nzxStartDisabled]=\"nzxStartDisabled\"\r\n  [nzxEndDisabled]=\"nzxEndDisabled\"\r\n  [nzxSize]=\"nzxSize\"\r\n>\r\n  <ng-container\r\n    start\r\n\r\n    *ngTemplateOutlet=\"\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxStartReName,\r\n          disabled: nzxDisabled || nzxStartDisabled,\r\n          placeholder: nzxStartPlaceholder,\r\n          nzSuffixIcon: nzxStartSuffixIcon,\r\n          nzAllowClear: nzxStartAllowClear,\r\n          nzRenderExtraFooter: nzxStartRenderExtraFooter,\r\n          nzBackdrop: nzxStartBackdrop,\r\n          nzAutoFocus: nzxStartAutoFocus,\r\n          nzDateRender: nzxStartDateRender,\r\n          nzDefaultPickerValue: nzxStartDefaultPickerValue,\r\n          nzDisabledDate: nzxStartDisabledDate,\r\n          nzDisabledTime: nzxStartDisabledTime,\r\n          nzDropdownClassName: nzxStartDropdownClassName,\r\n          nzId: nzxStartId,\r\n          nzInputReadOnly: nzxStartInputReadOnly,\r\n          nzLocale: nzLocale,\r\n          nzPopupStyle: nzxStartPopupStyle,\r\n          nzSeparator: nzxStartSeparator,\r\n          nzShowNow: nzxStartShowNow,\r\n          nzShowTime: nzxStartShowTime,\r\n          nzShowToday: nzxStartShowToday,\r\n          nzOnOpenChange: nzxStartOnOpenChange,\r\n          nzOnOk: nzxStartOnOk,\r\n          nzOnCalendarChange: nzxStartOnCalendarChange,\r\n          nzOnPanelChange: nzxStartOnPanelChange\r\n        }\r\n      }\r\n    \"\r\n  ></ng-container>\r\n  <ng-container\r\n    end\r\n    *ngTemplateOutlet=\"\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxEndReName,\r\n          disabled: nzxDisabled || nzxEndDisabled,\r\n          placeholder: nzxEndPlaceholder,\r\n          nzSuffixIcon: nzxEndSuffixIcon,\r\n          nzAllowClear: nzxEndAllowClear,\r\n          nzRenderExtraFooter: nzxEndRenderExtraFooter,\r\n          nzBackdrop: nzxEndBackdrop,\r\n          nzAutoFocus: nzxEndAutoFocus,\r\n          nzDateRender: nzxEndDateRender,\r\n          nzDefaultPickerValue: nzxEndDefaultPickerValue,\r\n          nzDisabledDate: nzxEndDisabledDate,\r\n          nzDisabledTime: nzxEndDisabledTime,\r\n          nzDropdownClassName: nzxEndDropdownClassName,\r\n          nzId: nzxEndId,\r\n          nzInputReadOnly: nzxEndInputReadOnly,\r\n          nzLocale: nzLocale,\r\n          nzPopupStyle: nzxEndPopupStyle,\r\n          nzSeparator: nzxEndSeparator,\r\n          nzShowNow: nzxEndShowNow,\r\n          nzShowTime: nzxEndShowTime,\r\n          nzShowToday: nzxEndShowToday,\r\n          nzOnOpenChange: nzxEndOnOpenChange,\r\n          nzOnOk: nzxEndOnOk,\r\n          nzOnCalendarChange: nzxEndOnCalendarChange,\r\n          nzOnPanelChange: nzxEndOnPanelChange\r\n        }\r\n      }\r\n    \"\r\n  ></ng-container>\r\n</nzx-between>\r\n\r\n<ng-template #typeTemplate let-data>\r\n  <nz-date-picker\r\n    [(ngModel)]=\"nzxValue[data.dir]\"\r\n    (ngModelChange)=\"ngModelChange()\"\r\n    [nzDisabled]=\"data.disabled\"\r\n    [nzPlaceHolder]=\"data.placeholder\"\r\n    [nzSize]=\"nzxSize\"\r\n    [nzMode]=\"nzMode\"\r\n    [nzSuffixIcon]=\"data.nzSuffixIcon || 'calendar'\"\r\n    [nzAllowClear]=\"data.nzAllowClear == null ? true : data.nzAllowClear\"\r\n    [nzRenderExtraFooter]=\"data.nzRenderExtraFooter\"\r\n    [nzBackdrop]=\"data.nzBackdrop\"\r\n    [nzAutoFocus]=\"data.nzAutoFocus\"\r\n    [nzDateRender]=\"data.nzDateRender\"\r\n    [nzDefaultPickerValue]=\"data.nzDefaultPickerValue\"\r\n    [nzDisabledDate]=\"data.nzDisabledDate\"\r\n    [nzDisabledTime]=\"data.nzDisabledTime\"\r\n    [nzDropdownClassName]=\"data.nzDropdownClassName\"\r\n    [nzFormat]=\"nzFormat\"\r\n    [nzId]=\"data.nzId\"\r\n    [nzInputReadOnly]=\"data.nzInputReadOnly\"\r\n    [nzLocale]=\"nzLocale\"\r\n    [nzPopupStyle]=\"data.nzPopupStyle\"\r\n    [nzSeparator]=\"data.nzSeparator\"\r\n    [nzShowNow]=\"data.nzShowNow\"\r\n    [nzShowTime]=\"data.nzShowTime == null ? nzShowTime : data.nzShowTime\"\r\n    [nzShowToday]=\"data.nzShowToday == null ? nzShowToday : data.nzShowToday\"\r\n    (nzOnOpenChange)=\"data.nzOnOpenChange.emit($event)\"\r\n    (nzOnOk)=\"data.nzOnOk.emit($event)\"\r\n    (nzOnCalendarChange)=\"data.nzOnCalendarChange.emit($event)\"\r\n    (nzOnPanelChange)=\"data.nzOnPanelChange.emit($event)\"\r\n  ></nz-date-picker>\r\n</ng-template>\r\n"
        },
        {
            "name": "BetweenTimeComponent",
            "id": "component-BetweenTimeComponent-ffbe9d9b85c609cc29793e124f1d048ed36df71c0bb1498e3cd44e655e23af9517c281cbdd39b014201435541fc728b6cb277cdb8bb88c5dfddabdf57b535cf6",
            "file": "lib/between-time/between-time.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => BetweenTimeComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "nzx-between-time",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./between-time.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endMaxDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最大时间\n",
                    "description": "<p>最大时间</p>\n",
                    "line": 94,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "endMinDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最小时间\n",
                    "description": "<p>最小时间</p>\n",
                    "line": 104,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "nzFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndAddOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "nzxEndAllowEmpty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxEndAutoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxEndBackdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndClearText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndDefaultOpenValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "nzxEndHideDisabledOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxEndHourStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxEndId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "nzxEndMinuteStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxEndNowText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndOkText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndPlaceholder",
                    "defaultValue": "'结束值'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndPopupClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndReName",
                    "defaultValue": "'end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段重命名\n",
                    "description": "<p>结束字段重命名</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndSecondStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxEndStatus",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "NzStatus",
                    "decorators": []
                },
                {
                    "name": "nzxEndSuffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzxEndUse12Hours",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxStartAddOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "nzxStartAllowEmpty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxStartAutoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxStartBackdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxStartClearText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartDefaultOpenValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "nzxStartHideDisabledOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "nzxStartHourStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStartId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "nzxStartMinuteStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStartNowText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartOkText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartPlaceholder",
                    "defaultValue": "'起始值'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartPopupClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartReName",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段重命名\n",
                    "description": "<p>开始字段重命名</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartSecondStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStartStatus",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "NzStatus",
                    "decorators": []
                },
                {
                    "name": "nzxStartSuffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzxStartUse12Hours",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": [
                        {
                            "name": "InputBoolean",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "startMaxDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最大时间\n",
                    "description": "<p>最大时间</p>\n",
                    "line": 99,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "startMinDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最小时间\n",
                    "description": "<p>最小时间</p>\n",
                    "line": 89,
                    "type": "DisabledDateType",
                    "decorators": []
                },
                {
                    "name": "nzxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否禁用\n",
                    "description": "<p>是否禁用</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxEndDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段禁用\n",
                    "description": "<p>结束字段禁用</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxSize",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n控件大小\n",
                    "description": "<p>控件大小</p>\n",
                    "line": 20,
                    "type": "NzSizeLDSType",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxStartDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段禁用\n",
                    "description": "<p>开始字段禁用</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "nzxEndOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxStartOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "nzxEndDisabledHours",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "nzxEndDisabledMinutes",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "nzxEndDisabledSeconds",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "nzxStartDisabledHours",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "nzxStartDisabledMinutes",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "nzxStartDisabledSeconds",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "nzxValue",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatetimeValueType",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultMaxValue",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultMinValue",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisabledHour",
                    "args": [
                        {
                            "name": "minDateTime",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "maxDateTime",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取禁用的小时\n",
                    "description": "<p>获取禁用的小时</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5256,
                                "end": 5267,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minDateTime"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5250,
                                "end": 5255,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最小时间值</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5287,
                                "end": 5298,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "maxDateTime"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5281,
                                "end": 5286,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最大时间值</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5312,
                                "end": 5319,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getDisabledMinutes",
                    "args": [
                        {
                            "name": "hour",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDateTime",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "maxDateTime",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取禁用的分钟\n",
                    "description": "<p>获取禁用的分钟</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5878,
                                "end": 5882,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hour"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5872,
                                "end": 5877,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前小时</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5901,
                                "end": 5912,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minDateTime"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5895,
                                "end": 5900,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最小时间值</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5932,
                                "end": 5943,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "maxDateTime"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5926,
                                "end": 5931,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最大时间值</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5957,
                                "end": 5964,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getDisabledSeconds",
                    "args": [
                        {
                            "name": "hour",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minute",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDateTime",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "maxDateTime",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取禁用的秒数\n",
                    "description": "<p>获取禁用的秒数</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6620,
                                "end": 6624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hour"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6614,
                                "end": 6619,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前小时</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6643,
                                "end": 6649,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minute"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6637,
                                "end": 6642,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前分钟</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6668,
                                "end": 6679,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minDateTime"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6662,
                                "end": 6667,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最小时间值</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6699,
                                "end": 6710,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "maxDateTime"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6693,
                                "end": 6698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>最大时间值</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6724,
                                "end": 6731,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngModelChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "DatetimeValueType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "DatetimeValueType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "DatetimeValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "DatetimeValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { NzSafeAny, NzStatus } from 'ng-zorro-antd/core/types';\r\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NzxBetweenComponent } from '@xmagic/nzx-antd/between';\r\nimport { DatetimeValueType, DisabledDateType, getRealDateTime } from '@xmagic/nzx-antd/between-datetime';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\n\r\n@Component({\r\n  selector: 'nzx-between-time',\r\n  templateUrl: './between-time.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => BetweenTimeComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class BetweenTimeComponent extends NzxBetweenComponent implements ControlValueAccessor {\r\n  nzxValue: DatetimeValueType = {};\r\n  /**\r\n   * 开始字段重命名\r\n   */\r\n  @Input() nzxStartReName = 'start';\r\n  /**\r\n   * 结束字段重命名\r\n   */\r\n  @Input() nzxEndReName = 'end';\r\n\r\n  @Input() nzxStartId: string | null = null;\r\n  @Input() nzxStartStatus: NzStatus = '';\r\n  @Input() nzxStartHourStep = 1;\r\n  @Input() nzxStartMinuteStep = 1;\r\n  @Input() nzxStartSecondStep = 1;\r\n  @Input() nzxStartClearText?: string;\r\n  @Input() nzxStartNowText?: string;\r\n  @Input() nzxStartOkText?: string;\r\n  @Input() nzxStartPopupClassName?: string;\r\n  @Input() nzxStartPlaceholder = '起始值';\r\n  @Input() nzxStartAddOn?: TemplateRef<void>;\r\n  @Input() nzxStartDefaultOpenValue?: Date;\r\n  @Input() nzFormat?: string;\r\n  @Input() @InputBoolean() nzxStartUse12Hours = false;\r\n  @Input() nzxStartSuffixIcon?: string | TemplateRef<NzSafeAny>;\r\n  @Input() @InputBoolean() nzxStartHideDisabledOptions?: boolean;\r\n  @Input() @InputBoolean() nzxStartAllowEmpty?: boolean;\r\n  @Input() @InputBoolean() nzxStartAutoFocus?: boolean;\r\n  @Input() nzxStartBackdrop?: boolean;\r\n  @Output() readonly nzxStartOpenChange = new EventEmitter<boolean>();\r\n\r\n  @Input() nzxEndId: string | null = null;\r\n  @Input() nzxEndStatus: NzStatus = '';\r\n  @Input() nzxEndHourStep?: number;\r\n  @Input() nzxEndMinuteStep?: number;\r\n  @Input() nzxEndSecondStep?: number;\r\n  @Input() nzxEndClearText?: string;\r\n  @Input() nzxEndNowText?: string;\r\n  @Input() nzxEndOkText?: string;\r\n  @Input() nzxEndPopupClassName?: string;\r\n  @Input() nzxEndPlaceholder = '结束值';\r\n  @Input() nzxEndAddOn?: TemplateRef<void>;\r\n  @Input() nzxEndDefaultOpenValue?: Date;\r\n\r\n  @Input() @InputBoolean() nzxEndUse12Hours = false;\r\n  @Input() nzxEndSuffixIcon?: string | TemplateRef<NzSafeAny>;\r\n  @Input() @InputBoolean() nzxEndHideDisabledOptions?: boolean;\r\n  @Input() @InputBoolean() nzxEndAllowEmpty?: boolean;\r\n  @Input() @InputBoolean() nzxEndAutoFocus?: boolean;\r\n  @Input() nzxEndBackdrop?: boolean;\r\n  @Output() readonly nzxEndOpenChange = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * 最小时间\r\n   */\r\n  @Input() startMinDateTime?: DisabledDateType;\r\n\r\n  /**\r\n   * 最大时间\r\n   */\r\n  @Input() endMaxDateTime?: DisabledDateType;\r\n\r\n  /**\r\n   * 最大时间\r\n   */\r\n  @Input() startMaxDateTime?: DisabledDateType;\r\n\r\n  /**\r\n   * 最小时间\r\n   */\r\n  @Input() endMinDateTime?: DisabledDateType;\r\n\r\n  nzxStartDisabledHours = () =>\r\n    this.getDisabledHour(this.startMinDateTime, this.getDefaultMaxValue(this.startMaxDateTime as Date));\r\n  nzxStartDisabledMinutes = (hour: number) =>\r\n    this.getDisabledMinutes(hour, this.startMinDateTime, this.getDefaultMaxValue(this.startMaxDateTime as Date));\r\n  nzxStartDisabledSeconds = (hour: number, minute: number) =>\r\n    this.getDisabledSeconds(\r\n      hour,\r\n      minute,\r\n      this.startMinDateTime,\r\n      this.getDefaultMaxValue(this.startMaxDateTime as Date)\r\n    );\r\n\r\n  nzxEndDisabledHours: () => number[] = () =>\r\n    this.getDisabledHour(this.getDefaultMinValue(this.endMinDateTime as Date), this.endMaxDateTime);\r\n  nzxEndDisabledMinutes = (hour: number) =>\r\n    this.getDisabledMinutes(hour, this.getDefaultMinValue(this.endMinDateTime as Date), this.endMaxDateTime);\r\n  nzxEndDisabledSeconds = (hour: number, minute: number) =>\r\n    this.getDisabledSeconds(hour, minute, this.endMinDateTime, this.endMaxDateTime);\r\n\r\n  constructor(protected cdr: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngModelChange() {\r\n    this.onChange(this.nzxValue);\r\n  }\r\n\r\n  writeValue(value: DatetimeValueType): void {\r\n    this.nzxValue = value || {};\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.nzxDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: (_: DatetimeValueType) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  onChange: (value: DatetimeValueType) => void = () => null;\r\n  onTouched: () => void = () => null;\r\n\r\n  private getDefaultMinValue(date?: Date) {\r\n    return date === undefined ? this.nzxValue[this.nzxStartReName] : date;\r\n  }\r\n\r\n  private getDefaultMaxValue(date?: Date) {\r\n    return date === undefined ? this.nzxValue[this.nzxEndReName] : date;\r\n  }\r\n\r\n  /**\r\n   * 获取禁用的小时\r\n   * @param minDateTime 最小时间值\r\n   * @param maxDateTime 最大时间值\r\n   * @private\r\n   */\r\n  private getDisabledHour(minDateTime?: DisabledDateType, maxDateTime?: DisabledDateType) {\r\n    const minValue = getRealDateTime(new Date(), minDateTime);\r\n    const maxValue = getRealDateTime(new Date(), maxDateTime);\r\n    if (!maxValue && !minValue) {\r\n      return [];\r\n    }\r\n    let hours: number[] = [];\r\n    if (minValue) {\r\n      hours = Utils.range(0, minValue.getHours());\r\n    }\r\n    if (maxValue) {\r\n      hours = hours.concat(Utils.range(maxValue.getHours() + 1, 24));\r\n    }\r\n    return hours;\r\n  }\r\n\r\n  /**\r\n   * 获取禁用的分钟\r\n   * @param hour 当前小时\r\n   * @param minDateTime 最小时间值\r\n   * @param maxDateTime 最大时间值\r\n   * @private\r\n   */\r\n  private getDisabledMinutes(hour: number, minDateTime?: DisabledDateType, maxDateTime?: DisabledDateType) {\r\n    const minValue = getRealDateTime(new Date(), minDateTime);\r\n    const maxValue = getRealDateTime(new Date(), maxDateTime);\r\n    if (!maxValue && !minValue) {\r\n      return [];\r\n    }\r\n\r\n    let minutes: number[] = [];\r\n    if (minValue && minValue.getHours() === hour) {\r\n      minutes = Utils.range(0, minValue.getMinutes());\r\n    }\r\n    if (maxValue && maxValue.getHours() === hour) {\r\n      minutes = minutes.concat(Utils.range(maxValue.getMinutes() + 1, 60));\r\n    }\r\n    return minutes;\r\n  }\r\n\r\n  /**\r\n   * 获取禁用的秒数\r\n   * @param hour 当前小时\r\n   * @param minute 当前分钟\r\n   * @param minDateTime 最小时间值\r\n   * @param maxDateTime 最大时间值\r\n   * @private\r\n   */\r\n  private getDisabledSeconds(\r\n    hour: number,\r\n    minute: number,\r\n    minDateTime?: DisabledDateType,\r\n    maxDateTime?: DisabledDateType\r\n  ) {\r\n    const minValue = getRealDateTime(new Date(), minDateTime);\r\n    const maxValue = getRealDateTime(new Date(), maxDateTime);\r\n    if (!maxValue && !minValue) {\r\n      return [];\r\n    }\r\n\r\n    let seconds: number[] = [];\r\n    if (minValue && minValue.getHours() === hour && minValue.getMinutes() === minute) {\r\n      seconds = Utils.range(0, minValue.getSeconds());\r\n    }\r\n    if (maxValue && maxValue.getHours() === hour && maxValue.getMinutes() === minute) {\r\n      seconds = seconds.concat(Utils.range(maxValue.getSeconds() + 1, 60));\r\n    }\r\n    return seconds;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NzxBetweenComponent",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<nzx-between\r\n  [nzxDisabled]=\"nzxDisabled\"\r\n  [nzxStartDisabled]=\"nzxStartDisabled\"\r\n  [nzxEndDisabled]=\"nzxEndDisabled\"\r\n  [nzxSize]=\"nzxSize\"\r\n>\r\n  <ng-container\r\n    start\r\n    *ngTemplateOutlet=\"\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxStartReName,\r\n          disabled: nzxDisabled || nzxStartDisabled,\r\n          placeholder: nzxStartPlaceholder,\r\n          nzSuffixIcon: nzxStartSuffixIcon,\r\n          nzBackdrop: nzxStartBackdrop,\r\n          nzAutoFocus: nzxStartAutoFocus,\r\n          nzId: nzxStartId,\r\n          nzAddOn: nzxStartAddOn,\r\n          nzAllowEmpty: nzxStartAllowEmpty,\r\n          nzClearText: nzxStartClearText,\r\n          nzDefaultOpenValue: nzxStartDefaultOpenValue,\r\n          nzDisabledHours: nzxStartDisabledHours,\r\n          nzDisabledMinutes: nzxStartDisabledMinutes,\r\n          nzDisabledSeconds: nzxStartDisabledSeconds,\r\n          nzHideDisabledOptions: nzxStartHideDisabledOptions,\r\n          nzHourStep: nzxStartHourStep,\r\n          nzMinuteStep: nzxStartMinuteStep,\r\n          nzNowText: nzxStartNowText,\r\n          nzOkText: nzxStartOkText,\r\n          nzPopupClassName: nzxStartPopupClassName,\r\n          nzSecondStep: nzxStartSecondStep,\r\n          nzUse12Hours: nzxStartUse12Hours,\r\n          nzOpenChange: nzxStartOpenChange\r\n        }\r\n      }\r\n    \"\r\n  ></ng-container>\r\n  <ng-container\r\n    end\r\n    *ngTemplateOutlet=\"\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxEndReName,\r\n          disabled: nzxDisabled || nzxEndDisabled,\r\n          placeholder: nzxEndPlaceholder,\r\n          nzSuffixIcon: nzxEndSuffixIcon,\r\n          nzBackdrop: nzxEndBackdrop,\r\n          nzAutoFocus: nzxEndAutoFocus,\r\n          nzId: nzxEndId,\r\n          nzAddOn: nzxEndAddOn,\r\n          nzAllowEmpty: nzxEndAllowEmpty,\r\n          nzClearText: nzxEndClearText,\r\n          nzDefaultOpenValue: nzxEndDefaultOpenValue,\r\n          nzDisabledHours: nzxEndDisabledHours,\r\n          nzDisabledMinutes: nzxEndDisabledMinutes,\r\n          nzDisabledSeconds: nzxEndDisabledSeconds,\r\n          nzHideDisabledOptions: nzxEndHideDisabledOptions,\r\n          nzHourStep: nzxEndHourStep,\r\n          nzMinuteStep: nzxEndMinuteStep,\r\n          nzNowText: nzxEndNowText,\r\n          nzOkText: nzxEndOkText,\r\n          nzPopupClassName: nzxEndPopupClassName,\r\n          nzSecondStep: nzxEndSecondStep,\r\n          nzUse12Hours: nzxEndUse12Hours,\r\n          nzOpenChange: nzxEndOpenChange\r\n        }\r\n      }\r\n    \"\r\n  ></ng-container>\r\n</nzx-between>\r\n\r\n<ng-template #typeTemplate let-data>\r\n  <nz-time-picker\r\n    [(ngModel)]=\"nzxValue[data.dir]\"\r\n    (ngModelChange)=\"ngModelChange()\"\r\n    [nzDisabled]=\"data.disabled\"\r\n    [nzPlaceHolder]=\"data.placeholder\"\r\n    [nzSize]=\"nzxSize\"\r\n    [nzSuffixIcon]=\"data.nzSuffixIcon || 'clock-circle'\"\r\n    [nzBackdrop]=\"data.nzBackdrop\"\r\n    [nzAutoFocus]=\"data.nzAutoFocus\"\r\n    [nzFormat]=\"nzFormat == null ? 'HH:mm:ss' : nzFormat\"\r\n    [nzId]=\"data.nzId\"\r\n    [nzAddOn]=\"data.nzAddOn\"\r\n    [nzAllowEmpty]=\"data.nzAllowEmpty == null ? true : data.nzAllowEmpty\"\r\n    [nzClearText]=\"data.nzClearText == null ? 'clear' : data.nzClearText\"\r\n    [nzDefaultOpenValue]=\"data.nzDefaultOpenValue\"\r\n    [nzDisabledHours]=\"data.nzDisabledHours\"\r\n    [nzDisabledMinutes]=\"data.nzDisabledMinutes\"\r\n    [nzDisabledSeconds]=\"data.nzDisabledSeconds\"\r\n    [nzHideDisabledOptions]=\"data.nzHideDisabledOptions\"\r\n    [nzHourStep]=\"data.nzHourStep\"\r\n    [nzMinuteStep]=\"data.nzMinuteStep\"\r\n    [nzNowText]=\"data.nzNowText\"\r\n    [nzOkText]=\"data.nzOkText\"\r\n    [nzPopupClassName]=\"data.nzPopupClassName\"\r\n    [nzSecondStep]=\"data.nzSecondStep\"\r\n    [nzUse12Hours]=\"data.nzUse12Hours\"\r\n    (nzOpenChange)=\"data.nzOpenChange.emit($event)\"\r\n  ></nz-time-picker>\r\n</ng-template>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ColumnSettingComponent",
            "id": "component-ColumnSettingComponent-e3a69bda4a934b5d13210ce6fd3a30bfafabf30891d8b6a0b25c174d5fce50cf5baa5456aa9bdf16bc0ee49a03a15dbc35cb50d64da8a10abfd39d9e8cba1853",
            "file": "lib/table/header/column-setting/column-setting.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-column-setting",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./column-setting.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnNameVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示列名\n",
                    "description": "<p>显示列名</p>\n",
                    "line": 40,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "dragPreviewClass",
                    "defaultValue": "'nzx-column-setting__drag-preview'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n拖拽预览样式\n",
                    "description": "<p>拖拽预览样式</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "NzxColumn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "columnCheckedChange",
                    "defaultValue": "new EventEmitter<NzxColumn<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当个列选中事件\n",
                    "description": "<p>当个列选中事件</p>\n",
                    "line": 55,
                    "type": "EventEmitter"
                },
                {
                    "name": "columnNameCheckedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n列名选择Change\n",
                    "description": "<p>列名选择Change</p>\n",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "fixedClick",
                    "defaultValue": "new EventEmitter<NzxColumn<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n固定列\n",
                    "description": "<p>固定列</p>\n",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortedColumn",
                    "defaultValue": "new EventEmitter<CdkDragDrop<NzxColumn<T>, NzSafeAny>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n排序列触发\n",
                    "description": "<p>排序列触发</p>\n",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_columnNameChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "_indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "_nzxColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "cdkDragReleased",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragRelease",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束拖动\n",
                    "description": "<p>结束拖动</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2719,
                                "end": 2724,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "CdkDragRelease",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2713,
                                "end": 2718,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "cdkDragStarted",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始拖动\n",
                    "description": "<p>开始拖动</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2447,
                                "end": 2452,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2441,
                                "end": 2446,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "columnNameChange",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n展示列复选框 checked\n",
                    "description": "<p>展示列复选框 checked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3007,
                                "end": 3014,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "checked"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3001,
                                "end": 3006,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "columnVisible",
                    "args": [
                        {
                            "name": "item",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dropColumn",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<NzxColumn<T> | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "NzxColumn<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n拖动列排序\n",
                    "description": "<p>拖动列排序</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2185,
                                "end": 2190,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "CdkDragDrop<NzxColumn<T> | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2179,
                                "end": 2184,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2204,
                                "end": 2208,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "NzxColumn<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2198,
                                "end": 2203,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>排序数组</p>\n"
                        }
                    ]
                },
                {
                    "name": "fixedColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixed",
                            "type": "\"left\" | \"right\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n固定列\n",
                    "description": "<p>固定列</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1929,
                                "end": 1935,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "column"
                            },
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1923,
                                "end": 1928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1949,
                                "end": 1954,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fixed"
                            },
                            "type": "\"left\" | \"right\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1943,
                                "end": 1948,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshNameCheckedStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n更新展示列状态\n",
                    "description": "<p>更新展示列状态</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>列设置\n注意: 只在表头不分组的情况下有效</p>\n",
            "rawdescription": "\n\n列设置\n注意: 只在表头不分组的情况下有效\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { CdkDragDrop, CdkDragRelease, CdkDragStart } from '@angular/cdk/drag-drop/drag-events';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzxColumn } from '../../table.type';\r\n\r\n/**\r\n * 列设置\r\n * 注意: 只在表头不分组的情况下有效\r\n */\r\n@Component({\r\n  selector: 'nzx-column-setting',\r\n  templateUrl: './column-setting.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ColumnSettingComponent<T> implements OnInit /*, OnChanges*/ {\r\n  _nzxColumns: NzxColumn<T>[] = [];\r\n  _columnNameChecked!: boolean | null;\r\n  _indeterminate!: boolean | null;\r\n\r\n  /**\r\n   * 拖拽预览样式\r\n   */\r\n  @Input() dragPreviewClass = 'nzx-column-setting__drag-preview';\r\n  /**\r\n   * 显示列名\r\n   */\r\n  @Input() columnNameVisible: boolean | null = true;\r\n\r\n  @Input() set nzxColumns(value: NzxColumn<T>[]) {\r\n    if (value) {\r\n      this._nzxColumns = value;\r\n      this.refreshNameCheckedStatus();\r\n    }\r\n  }\r\n  get nzxColumns() {\r\n    return this._nzxColumns;\r\n  }\r\n\r\n  /**\r\n   * 当个列选中事件\r\n   */\r\n  @Output() columnCheckedChange = new EventEmitter<NzxColumn<T>>();\r\n  /**\r\n   * 排序列触发\r\n   */\r\n  @Output() sortedColumn = new EventEmitter<CdkDragDrop<NzxColumn<T>, NzSafeAny>>();\r\n  /**\r\n   * 列名选择Change\r\n   */\r\n  @Output() columnNameCheckedChange = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * 固定列\r\n   */\r\n  @Output() fixedClick = new EventEmitter<NzxColumn<T>>();\r\n\r\n  constructor(protected renderer: Renderer2) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  columnVisible(item: NzxColumn<T>, checked: boolean) {\r\n    this.refreshNameCheckedStatus();\r\n    this.columnCheckedChange.emit(item);\r\n  }\r\n\r\n  /**\r\n   * 固定列\r\n   * @param column\r\n   * @param fixed\r\n   */\r\n  fixedColumn(column: NzxColumn<T>, fixed?: 'left' | 'right') {\r\n    if (column.fixed === fixed) {\r\n      return;\r\n    }\r\n    column.fixed = fixed;\r\n    this.fixedClick.emit(column);\r\n  }\r\n\r\n  /**\r\n   * 拖动列排序\r\n   * @param event\r\n   * @param list 排序数组\r\n   */\r\n  dropColumn(event: CdkDragDrop<NzxColumn<T>, NzSafeAny>, list: NzxColumn<T>[]) {\r\n    moveItemInArray(list, event.previousIndex, event.currentIndex);\r\n    this.sortedColumn.emit(event);\r\n  }\r\n\r\n  /**\r\n   * 开始拖动\r\n   * @param event\r\n   */\r\n  cdkDragStarted(event: CdkDragStart) {\r\n    const preview = new ElementRef<HTMLElement>(document.querySelector('.cdk-drag.cdk-drag-preview')!);\r\n    this.renderer.addClass(preview.nativeElement, this.dragPreviewClass);\r\n  }\r\n\r\n  /**\r\n   * 结束拖动\r\n   * @param event\r\n   */\r\n  cdkDragReleased(event: CdkDragRelease) {\r\n    const preview = new ElementRef<HTMLElement>(document.querySelector('.cdk-drag.cdk-drag-preview')!);\r\n    this.renderer.removeClass(preview.nativeElement, this.dragPreviewClass);\r\n  }\r\n\r\n  /**\r\n   * 展示列复选框 checked\r\n   * @param checked\r\n   */\r\n  columnNameChange(checked: boolean) {\r\n    if (this._nzxColumns && this._nzxColumns.length) {\r\n      this._columnNameChecked = checked;\r\n      this._indeterminate = false;\r\n      this._nzxColumns.filter(v => v.settingVisible && v.settingDisabled !== true).forEach(v => (v.visible = checked));\r\n      this.columnNameCheckedChange.emit(checked);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新展示列状态\r\n   */\r\n  refreshNameCheckedStatus(): void {\r\n    if (this._nzxColumns && this._nzxColumns.length) {\r\n      const list = this._nzxColumns.filter(v => v.settingVisible && v.settingDisabled !== true);\r\n      this._columnNameChecked = list.every(item => item.visible);\r\n      this._indeterminate = !this._columnNameChecked && list.some(item => item.visible);\r\n    } else {\r\n      this._columnNameChecked = false;\r\n      this._indeterminate = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "nzxColumns": {
                    "name": "nzxColumns",
                    "setSignature": {
                        "name": "nzxColumns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "NzxColumn<T>[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "NzxColumn<T>[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "nzxColumns",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                }
            },
            "templateData": "<i\r\n  nz-icon\r\n  nzType=\"setting\"\r\n  nzTheme=\"outline\"\r\n  tabindex=\"-1\"\r\n  nz-popover\r\n  nzPopoverTrigger=\"click\"\r\n  nzPopoverOverlayClassName=\"nzx-column-setting__cloumn-box\"\r\n  [nzPopoverTitle]=\"titleTemplate\"\r\n  [nzPopoverPlacement]=\"'bottomRight'\"\r\n  [nzPopoverContent]=\"contentTemplate\"\r\n  nz-tooltip\r\n  nzTooltipTitle=\"列设置\"\r\n></i>\r\n\r\n<ng-template #titleTemplate>\r\n  <div class=\"nzx-column-setting__popover-title\">\r\n    <div class=\"nzx-column-setting__flex\" style=\"flex: 1\">\r\n      <label\r\n        *ngIf=\"columnNameVisible !== false\"\r\n        nz-checkbox\r\n        [(ngModel)]=\"_columnNameChecked\"\r\n        [nzIndeterminate]=\"_indeterminate\"\r\n        (ngModelChange)=\"columnNameChange($event)\"\r\n      >\r\n        展示列\r\n      </label>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #contentTemplate>\r\n  <ul\r\n    style=\"min-width: 315px\"\r\n    cdkDropList\r\n    (cdkDropListDropped)=\"dropColumn($event, _nzxColumns)\"\r\n    class=\"nzx-column-setting__column-list\"\r\n  >\r\n    <ng-container *ngFor=\"let item of _nzxColumns\">\r\n      <li\r\n        *ngIf=\"item.settingVisible !== false\"\r\n        class=\"nzx-column-setting__check-item\"\r\n        cdkDrag\r\n        cdkDragLockAxis=\"y\"\r\n        cdkDragBoundary=\".nzx-column-setting__column-list\"\r\n        (cdkDragStarted)=\"cdkDragStarted($event)\"\r\n        (cdkDragReleased)=\"cdkDragReleased($event)\"\r\n      >\r\n        <div class=\"drag-box\">\r\n          <i cdkDragHandle nz-icon nzType=\"drag\" class=\"nzx-column-setting__drag-icon\"></i>\r\n          <label\r\n            nz-checkbox\r\n            [nzDisabled]=\"item.settingDisabled === true\"\r\n            [(ngModel)]=\"item.visible\"\r\n            (ngModelChange)=\"columnVisible(item, $event)\"\r\n          >\r\n            {{ item.settingText || item.thText }}\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"nzx-column-setting__flex\">\r\n          <i\r\n            nz-icon\r\n            nzType=\"vertical-align-top\"\r\n            class=\"nzx-column-setting__fixed-left\"\r\n            [class.active]=\"item.fixed === 'left'\"\r\n            [class.disabled]=\"item.visible === false\"\r\n            (click)=\"fixedColumn(item, item.fixed == 'left' ? null : 'left')\"\r\n            nz-tooltip\r\n            nzTooltipTitle=\"固定到左侧\"\r\n          ></i>\r\n          <nz-divider nzType=\"vertical\"></nz-divider>\r\n          <i\r\n            nz-icon\r\n            nzType=\"vertical-align-bottom\"\r\n            class=\"nzx-column-setting__fixed-right\"\r\n            [class.active]=\"item.fixed === 'right'\"\r\n            [class.disabled]=\"item.visible === false\"\r\n            (click)=\"fixedColumn(item, item.fixed == 'right' ? null : 'right')\"\r\n            nz-tooltip\r\n            nzTooltipTitle=\"固定到右侧\"\r\n          ></i>\r\n        </div>\r\n      </li>\r\n    </ng-container>\r\n  </ul>\r\n</ng-template>\r\n"
        },
        {
            "name": "ContentComponent",
            "id": "component-ContentComponent-6b6bb52d969f2ba991c6e9d585c8f0a3626a8559e3c6f448cd000be1ee22441218e6c51187923e5276889a1d7f491d7fb8cf6cfb34ded6aab631e406bec5f22b",
            "file": "lib/layout-page/content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-content",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formItemBottomVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示验证占位符(是否显示form-item底部的空白)\n",
                    "description": "<p>显示验证占位符(是否显示form-item底部的空白)</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmargin\n",
                    "description": "<p>margin</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "marginTop",
                    "defaultValue": "'10px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmargin top\n",
                    "description": "<p>margin top</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.hide-form-item-bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.margin-top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'nzx-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    '[class.nzx-page-content]': 'true'\r\n  }\r\n})\r\nexport class ContentComponent {\r\n  /**\r\n   * 显示验证占位符(是否显示form-item底部的空白)\r\n   */\r\n  @Input() formItemBottomVisible = true;\r\n  /**\r\n   * margin\r\n   */\r\n  @Input() margin?: string;\r\n  /**\r\n   * margin top\r\n   */\r\n  @Input() marginTop = '10px';\r\n\r\n  @HostBinding('class.hide-form-item-bottom') get hideFormItemBottom() {\r\n    return !this.formItemBottomVisible;\r\n  }\r\n  @HostBinding('style.margin') get contentMargin() {\r\n    return this.margin;\r\n  }\r\n  @HostBinding('style.margin-top') get contentMarginTop() {\r\n    return this.marginTop;\r\n  }\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "accessors": {
                "hideFormItemBottom": {
                    "name": "hideFormItemBottom",
                    "getSignature": {
                        "name": "hideFormItemBottom",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "contentMargin": {
                    "name": "contentMargin",
                    "getSignature": {
                        "name": "contentMargin",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                },
                "contentMarginTop": {
                    "name": "contentMarginTop",
                    "getSignature": {
                        "name": "contentMarginTop",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a1cb0b7028002a6eee4051a113ceefc2efb4c8acd615d01cba23febc87473936a4a41406576d0c34a3d61c143b9cc5cdd5198a41a1000e975c0177ca83e03d90-1",
            "file": "lib/layout-page/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-header",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"page-header_row\">\n  <div class=\"page-header_col\">\n    <ng-content></ng-content>\n  </div>\n  <div\n    #divElement\n    (cdkObserveContent)=\"contentChanged(divElement)\"\n    [debounce]=\"200\"\n    [class.header-content-wrapper]=\"hasContent\"\n  >\n    <ng-content select=\"[buttons]\"></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonsVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示按钮区域\n",
                    "description": "<p>是否显示按钮区域</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasBottom",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示验证占位符(是否显示form-item底部的空白)\n",
                    "description": "<p>显示验证占位符(是否显示form-item底部的空白)</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hasContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "contentChanged",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.hide-form-item-bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\nimport { isContentEmpty } from './is-content-empty';\r\n\r\n@Component({\r\n  selector: 'nzx-header',\r\n  template: `\r\n    <div class=\"page-header_row\">\r\n      <div class=\"page-header_col\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n      <div\r\n        #divElement\r\n        (cdkObserveContent)=\"contentChanged(divElement)\"\r\n        [debounce]=\"200\"\r\n        [class.header-content-wrapper]=\"hasContent\"\r\n      >\r\n        <ng-content select=\"[buttons]\"></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n  host: {\r\n    '[class.nzx-page-header]': 'true'\r\n  }\r\n})\r\nexport class HeaderComponent {\r\n  hasContent = false;\r\n  /**\r\n   * 显示验证占位符(是否显示form-item底部的空白)\r\n   */\r\n  @Input() hasBottom = false;\r\n  /**\r\n   * 是否显示按钮区域\r\n   */\r\n  @Input() buttonsVisible = true;\r\n  @HostBinding('class.hide-form-item-bottom') get hideFormItemBottom() {\r\n    return !this.hasBottom;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  contentChanged(element: HTMLElement) {\r\n    this.hasContent = !isContentEmpty(element);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "accessors": {
                "hideFormItemBottom": {
                    "name": "hideFormItemBottom",
                    "getSignature": {
                        "name": "hideFormItemBottom",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1"
        },
        {
            "name": "NzxBetweenComponent",
            "id": "component-NzxBetweenComponent-a9677cdb884dcaaa5bbe6dc08c7c3e100b8c6ac258e8cacafefa1a5400cffcd823386acdb35290fbfb1f1c06e525db6cb87c165636e8e8be66f161ce2cde16a3",
            "file": "lib/between/between.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "nzxBetween",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-between",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./between.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nzxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否禁用\n",
                    "description": "<p>是否禁用</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxEndDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段禁用\n",
                    "description": "<p>结束字段禁用</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxSize",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n控件大小\n",
                    "description": "<p>控件大小</p>\n",
                    "line": 20,
                    "type": "NzSizeLDSType",
                    "decorators": []
                },
                {
                    "name": "nzxStartDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段禁用\n",
                    "description": "<p>开始字段禁用</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { NzSizeLDSType } from 'ng-zorro-antd/core/types';\r\n\r\n@Component({\r\n  selector: 'nzx-between',\r\n  exportAs: 'nzxBetween',\r\n  templateUrl: './between.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NzxBetweenComponent {\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  @Input() nzxDisabled = false;\r\n  /**\r\n   * 控件大小\r\n   */\r\n  @Input() nzxSize: NzSizeLDSType = 'default';\r\n  /**\r\n   * 开始字段禁用\r\n   */\r\n  @Input() nzxStartDisabled = false;\r\n  /**\r\n   * 结束字段禁用\r\n   */\r\n  @Input() nzxEndDisabled = false;\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "templateData": "<nz-input-group\r\n  nzCompact\r\n  class=\"nzx-between\"\r\n  [class.nzx-between-disabled]=\"nzxDisabled || (nzxStartDisabled && nzxEndDisabled)\"\r\n  [nzSize]=\"nzxSize\"\r\n>\r\n  <ng-content select=\"[start]\"></ng-content>\r\n  <input type=\"text\" disabled nz-input placeholder=\"~\" class=\"nzx-between-placeholder\" />\r\n  <ng-content select=\"[end]\"></ng-content>\r\n</nz-input-group>\r\n"
        },
        {
            "name": "NzxBetweenInputComponent",
            "id": "component-NzxBetweenInputComponent-af0e11ba67a0cb29ee4eae5b35655bdccd0930bc1395cb3a6dbdece7dc1effc47a5203c22af514c9e9297662fd414e07e94e66592d3b44c75f2a69954f0939d6",
            "file": "lib/between-input/between-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxBetweenInputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "nzx-between-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./between-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nzxEndFormatter",
                    "defaultValue": "v => v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzxEndId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndMax",
                    "defaultValue": "Infinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "nzxEndMin",
                    "defaultValue": "-Infinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxEndPlaceholder",
                    "defaultValue": "'结束值'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段Placeholder\n",
                    "description": "<p>结束字段Placeholder</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndPrecision",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxEndReName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段重命名\n",
                    "description": "<p>结束字段重命名</p>\n",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxEndStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStarId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStarPrecision",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t数值精度\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">数值精度</code></pre></div>",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStarStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\tStep\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">Step</code></pre></div>",
                    "line": 59,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStartFormatter",
                    "defaultValue": "v => v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n指定输入框展示值的格式\n",
                    "description": "<p>指定输入框展示值的格式</p>\n",
                    "line": 76,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzxStartMax",
                    "defaultValue": "Infinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最大值\n",
                    "description": "<p>最大值</p>\n",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "nzxStartMin",
                    "defaultValue": "-Infinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n最小值\n",
                    "description": "<p>最小值</p>\n",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxStartPlaceholder",
                    "defaultValue": "'起始值'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段Placeholder\n",
                    "description": "<p>开始字段Placeholder</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxStartReName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段重命名\n",
                    "description": "<p>开始字段重命名</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxType",
                    "defaultValue": "'input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n控件类型, 输入框 或 数字框\n",
                    "description": "<p>控件类型, 输入框 或 数字框</p>\n",
                    "line": 31,
                    "type": "\"input\" | \"number\"",
                    "decorators": []
                },
                {
                    "name": "nzxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否禁用\n",
                    "description": "<p>是否禁用</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxEndDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n结束字段禁用\n",
                    "description": "<p>结束字段禁用</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxSize",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n控件大小\n",
                    "description": "<p>控件大小</p>\n",
                    "line": 20,
                    "type": "NzSizeLDSType",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                },
                {
                    "name": "nzxStartDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开始字段禁用\n",
                    "description": "<p>开始字段禁用</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "NzxBetweenComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nzxValue",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputValueType",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "ngModelChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "InputValueType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "InputValueType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "InputValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "InputValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NzxBetweenComponent } from '@xmagic/nzx-antd/between';\r\n\r\n@Component({\r\n  selector: 'nzx-between-input',\r\n  templateUrl: './between-input.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NzxBetweenInputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class NzxBetweenInputComponent extends NzxBetweenComponent implements ControlValueAccessor {\r\n  nzxValue: InputValueType = {};\r\n  /**\r\n   * 控件类型, 输入框 或 数字框\r\n   */\r\n  @Input() nzxType: 'input' | 'number' = 'input';\r\n  /**\r\n   * 开始字段Placeholder\r\n   */\r\n  @Input() nzxStartPlaceholder = '起始值';\r\n  /**\r\n   * 结束字段Placeholder\r\n   */\r\n  @Input() nzxEndPlaceholder = '结束值';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  @Input() nzxStartMax = Infinity;\r\n  @Input() nzxEndMax = Infinity;\r\n  /**\r\n   * 最小值\r\n   */\r\n  @Input() nzxStartMin = -Infinity;\r\n  @Input() nzxEndMin = -Infinity;\r\n  /**\r\n   * \t数值精度\r\n   */\r\n  @Input() nzxStarPrecision?: number;\r\n  @Input() nzxEndPrecision?: number;\r\n  /**\r\n   * \tStep\r\n   */\r\n  @Input() nzxStarStep = 1;\r\n  @Input() nzxEndStep = 1;\r\n\r\n  @Input() nzxStarId?: string;\r\n  @Input() nzxEndId?: string;\r\n  /**\r\n   * 开始字段重命名\r\n   */\r\n  @Input() nzxStartReName?: string;\r\n  /**\r\n   * 结束字段重命名\r\n   */\r\n  @Input() nzxEndReName?: string;\r\n\r\n  /**\r\n   * 指定输入框展示值的格式\r\n   */\r\n  @Input() nzxStartFormatter: (value: number | string) => string | number = v => v;\r\n  @Input() nzxEndFormatter: (value: number | string) => string | number = v => v;\r\n\r\n  constructor(protected cdr: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngModelChange() {\r\n    this.onChange(this.nzxValue);\r\n  }\r\n\r\n  writeValue(value: InputValueType): void {\r\n    this.nzxValue = value || {};\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.nzxDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: (_: InputValueType) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  onChange: (value: InputValueType) => void = () => null;\r\n  onTouched: () => void = () => null;\r\n}\r\n\r\nexport type InputValueType = Record<string, string | number | null> | null\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NzxBetweenComponent",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<nzx-between\r\n  [nzxDisabled]=\"nzxDisabled\"\r\n  [nzxStartDisabled]=\"nzxStartDisabled\"\r\n  [nzxEndDisabled]=\"nzxEndDisabled\"\r\n  [nzxSize]=\"nzxSize\"\r\n>\r\n  <ng-container\r\n    start\r\n    *ngTemplateOutlet=\"\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxStartReName || 'start',\r\n          disabled: nzxDisabled || nzxStartDisabled,\r\n          placeholder: nzxStartPlaceholder,\r\n          step: nzxStarStep,\r\n          id: nzxStarId,\r\n          formatter: nzxStartFormatter,\r\n          max: nzxStartMax,\r\n          min: nzxStartMin\r\n        }\r\n      }\r\n    \"\r\n  ></ng-container>\r\n  <ng-container\r\n    end\r\n    *ngTemplateOutlet=\"\r\n      typeTemplate;\r\n      context: {\r\n        $implicit: {\r\n          dir: nzxEndReName || 'end',\r\n          disabled: nzxDisabled || nzxEndDisabled,\r\n          placeholder: nzxEndPlaceholder,\r\n          step: nzxEndStep,\r\n          id: nzxEndId,\r\n          formatter: nzxEndFormatter,\r\n          max: nzxEndMax,\r\n          min: nzxEndMin\r\n        }\r\n      }\r\n    \"\r\n  ></ng-container>\r\n</nzx-between>\r\n\r\n<ng-template #typeTemplate let-data>\r\n  <ng-container [ngSwitch]=\"nzxType\">\r\n    <input\r\n      *ngSwitchCase=\"'input'\"\r\n      nz-input\r\n      [disabled]=\"data.disabled\"\r\n      [nzSize]=\"nzxSize\"\r\n      [(ngModel)]=\"nzxValue[data.dir]\"\r\n      [attr.placeholder]=\"data.placeholder\"\r\n      (ngModelChange)=\"ngModelChange()\"\r\n    />\r\n    <nz-input-number\r\n      *ngSwitchCase=\"'number'\"\r\n      [nzDisabled]=\"data.disabled\"\r\n      [(ngModel)]=\"nzxValue[data.dir]\"\r\n      [nzPlaceHolder]=\"data.placeholder\"\r\n      [nzSize]=\"nzxSize\"\r\n      [nzStep]=\"data.step\"\r\n      [nzPrecision]=\"data.precision\"\r\n      [nzId]=\"data.id\"\r\n      [nzFormatter]=\"data.formatter\"\r\n      [nzMax]=\"data.max\"\r\n      [nzMin]=\"data.min\"\r\n      (ngModelChange)=\"ngModelChange()\"\r\n    ></nz-input-number>\r\n  </ng-container>\r\n</ng-template>\r\n"
        },
        {
            "name": "NzxCheckboxComponent",
            "id": "component-NzxCheckboxComponent-bc7c8cf14794485fe9090e81b5d3f6612a8123ee1fcbf09d16e453e20f5aa974f34d4cf848629d8c399995780b55401ebd9b7e3faca0702d0c43abe888f8ecf8",
            "file": "lib/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxCheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "nzx-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nzxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "NzxCheckboxOption<T>[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nzxBlur",
                    "defaultValue": "new EventEmitter<NzxCheckboxOption<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzxFocus",
                    "defaultValue": "new EventEmitter<NzxCheckboxOption<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "nzxValue",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "nzxDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseControl"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngModelChange",
                    "args": [
                        {
                            "name": "values",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControl } from '@xmagic/nzx-antd/util';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types'\r\n\r\n@Component({\r\n  selector: 'nzx-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NzxCheckboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class NzxCheckboxComponent<T> extends BaseControl<T[]> implements ControlValueAccessor, OnInit, OnChanges {\r\n  @Input() nzxOptions: NzxCheckboxOption<T>[] = [];\r\n  @Input() override nzxDisabled = false;\r\n  @Output() nzxFocus = new EventEmitter<NzxCheckboxOption<T>>();\r\n  @Output() nzxBlur = new EventEmitter<NzxCheckboxOption<T>>();\r\n  nzxValue: T[] = [];\r\n  constructor(protected cdr: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.nzxValue = this.nzxOptions.filter(v => v.checked).map(v => v.value);\r\n  }\r\n\r\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (changes.nzxOptions && !changes.nzxOptions.isFirstChange()) {\r\n      this.writeValue(this.nzxValue);\r\n    }\r\n  }\r\n\r\n  ngModelChange(values: T[]) {\r\n    this.nzxValue = values;\r\n    this.onTouched();\r\n    this.onChange(this.nzxValue);\r\n  }\r\n\r\n  writeValue(value: T[] | null): void {\r\n    this.nzxValue = value == null ? [] : Array.isArray(value) ? value : [value];\r\n    if (this.nzxOptions && this.nzxOptions.length) {\r\n      this.nzxOptions.forEach(v => (v.checked = this.nzxValue.indexOf(v.value) !== -1));\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n\r\n/**\r\n * 数据配置项\r\n */\r\nexport interface NzxCheckboxOption<T =  NzSafeAny> {\r\n  /**\r\n   *\r\n   */\r\n  label: string;\r\n  /**\r\n   * 值\r\n   */\r\n  value: T;\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * 是否隐藏\r\n   */\r\n  hide?: boolean;\r\n  /**\r\n   * 是否半选\r\n   */\r\n  indeterminate?: boolean;\r\n  /**\r\n   * 值变化的回调函数\r\n   * @param checked\r\n   */\r\n  ngModelChange?: (checked: boolean) => void;\r\n\r\n  [key: string]: NzSafeAny;\r\n}\r\n\r\nexport type OptionItem = Omit<NzxCheckboxOption, 'indeterminate' | 'ngModelChange'>;\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControl",
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<nz-checkbox-wrapper (nzOnChange)=\"ngModelChange($event)\">\r\n  <ng-container *ngFor=\"let item of nzxOptions\">\r\n    <label\r\n      *ngIf=\"item.hide !== false\"\r\n      nz-checkbox\r\n      (focus)=\"nzxFocus.emit(item)\"\r\n      (blur)=\"nzxBlur.emit(item)\"\r\n      [nzValue]=\"item.value\"\r\n      [ngModel]=\"item.checked\"\r\n      [nzDisabled]=\"nzxDisabled || item.disabled\"\r\n      [nzIndeterminate]=\"item.indeterminate\"\r\n      (ngModelChange)=\"item.ngModelChange?.($event)\"\r\n    >\r\n      <ng-container *nzStringTemplateOutlet=\"item.label; context: { $implicit: item, options: nzxOptions }\">\r\n        <div [innerHTML]=\"item.label\"></div>\r\n      </ng-container>\r\n    </label>\r\n  </ng-container>\r\n</nz-checkbox-wrapper>\r\n"
        },
        {
            "name": "NzxSwitchComponent",
            "id": "component-NzxSwitchComponent-baf8357501fe73d3d3b50142f9e23d77e673ad18575cba5bd2e1933c47de7a815fc5deea0f0047b163f368ccb18779e26c09ba6e11be79d81457fdfb38fc890f",
            "file": "lib/switch/switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxSwitchComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "nzx-switch",
            "styleUrls": [],
            "styles": [],
            "template": "<nz-switch\n  [(ngModel)]=\"nzxValue\"\n  [nzCheckedChildren]=\"nzCheckedChildren\"\n  [nzUnCheckedChildren]=\"nzUnCheckedChildren\"\n  [nzDisabled]=\"nzDisabled\"\n  [nzSize]=\"nzSize\"\n  [nzLoading]=\"nzLoading\"\n  [nzControl]=\"nzControl\"\n  (ngModelChange)=\"ngModelChange($event)\"\n  (click)=\"onTouched()\"\n  (focus)=\"onTouched()\"\n></nz-switch>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nzCheckedChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n选中时的内容\n",
                    "description": "<p>选中时的内容</p>\n",
                    "line": 56,
                    "type": "string | TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "nzControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t是否完全由用户控制状态, Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">是否完全由用户控制状态, Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。</code></pre></div>",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\tdisable 状态\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">disable 状态</code></pre></div>",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t加载中的开关\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">加载中的开关</code></pre></div>",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n开关大小\n",
                    "description": "<p>开关大小</p>\n",
                    "line": 64,
                    "type": "NzSizeDSType",
                    "decorators": []
                },
                {
                    "name": "nzUnCheckedChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n非选中时的内容\n",
                    "description": "<p>非选中时的内容</p>\n",
                    "line": 60,
                    "type": "string | TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "nzxCheckedValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n选中时的值\n",
                    "description": "<p>选中时的值</p>\n",
                    "line": 36,
                    "type": "NzSafeAny",
                    "decorators": []
                },
                {
                    "name": "nzxUnCheckedValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n非选中时的值\n",
                    "description": "<p>非选中时的值</p>\n",
                    "line": 40,
                    "type": "NzSafeAny",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nzxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "nzxDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseControl"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngModelChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "NzSafeAny | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "NzSafeAny | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NzSafeAny, NzSizeDSType } from 'ng-zorro-antd/core/types';\r\nimport { BaseControl } from '@xmagic/nzx-antd/util';\r\n\r\n@Component({\r\n  selector: 'nzx-switch',\r\n  template: `\r\n    <nz-switch\r\n      [(ngModel)]=\"nzxValue\"\r\n      [nzCheckedChildren]=\"nzCheckedChildren\"\r\n      [nzUnCheckedChildren]=\"nzUnCheckedChildren\"\r\n      [nzDisabled]=\"nzDisabled\"\r\n      [nzSize]=\"nzSize\"\r\n      [nzLoading]=\"nzLoading\"\r\n      [nzControl]=\"nzControl\"\r\n      (ngModelChange)=\"ngModelChange($event)\"\r\n      (click)=\"onTouched()\"\r\n      (focus)=\"onTouched()\"\r\n    ></nz-switch>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NzxSwitchComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class NzxSwitchComponent extends BaseControl<NzSafeAny> implements ControlValueAccessor {\r\n  nzxValue!: boolean;\r\n  /**\r\n   * 选中时的值\r\n   */\r\n  @Input() nzxCheckedValue: NzSafeAny = true;\r\n  /**\r\n   * 非选中时的值\r\n   */\r\n  @Input() nzxUnCheckedValue: NzSafeAny = false;\r\n  /**\r\n   * \tdisable 状态\r\n   */\r\n  @Input() nzDisabled?: boolean;\r\n  /**\r\n   * \t加载中的开关\r\n   */\r\n  @Input() nzLoading?: boolean;\r\n  /**\r\n   * \t是否完全由用户控制状态, Switch 的状态完全由用户接管，不再自动根据点击事件改变数据。\r\n   */\r\n  @Input() nzControl?: boolean;\r\n  /**\r\n   * 选中时的内容\r\n   */\r\n  @Input() nzCheckedChildren?: string | TemplateRef<void>;\r\n  /**\r\n   * 非选中时的内容\r\n   */\r\n  @Input() nzUnCheckedChildren?: string | TemplateRef<void>;\r\n  /**\r\n   * 开关大小\r\n   */\r\n  @Input() nzSize?: NzSizeDSType;\r\n\r\n  ngModelChange(val: boolean) {\r\n    this.onChange(val ? this.nzxCheckedValue : this.nzxUnCheckedValue);\r\n  }\r\n\r\n  writeValue(value: NzSafeAny | null): void {\r\n    this.nzxValue = value === this.nzxCheckedValue;\r\n  }\r\n\r\n  override setDisabledState(isDisabled: boolean): void {\r\n    this.nzDisabled = isDisabled;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "BaseControl",
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "NzxTableComponent",
            "id": "component-NzxTableComponent-40e5797ebf4f83256aeaff89e80cb576ea0910ed2087685694e03a6c6175bf1e7a819a9459e1f842742bf1ebcd1e13e870be3f8b9cd54f57a535a5a1b370768b",
            "file": "lib/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示操作按钮小图标\n",
                    "description": "<p>是否显示操作按钮小图标</p>\n",
                    "line": 256,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "afterFetch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求之后处理函数\n",
                    "description": "<p>请求之后处理函数</p>\n",
                    "line": 89,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求处理\n",
                    "description": "<p>请求处理</p>\n",
                    "line": 76,
                    "type": "string | Promise<T[]> | Observable<T[]>",
                    "decorators": []
                },
                {
                    "name": "beforeFetch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求之前处理函数\n",
                    "description": "<p>请求之前处理函数</p>\n",
                    "line": 85,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "fetchSetting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求配置\n",
                    "description": "<p>请求配置</p>\n",
                    "line": 94,
                    "type": "FetchSetting",
                    "decorators": []
                },
                {
                    "name": "nzBordered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否展示外边框和列边框\n",
                    "description": "<p>是否展示外边框和列边框</p>\n",
                    "line": 231,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表格数据\n",
                    "description": "<p>表格数据</p>\n",
                    "line": 187,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "nzFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表格尾部\n",
                    "description": "<p>表格尾部</p>\n",
                    "line": 143,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzFrontPagination",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false\n",
                    "description": "<p>是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false</p>\n",
                    "line": 207,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzHideOnSinglePage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n只有一页时是否隐藏分页器\n",
                    "description": "<p>只有一页时是否隐藏分页器</p>\n",
                    "line": 243,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzItemRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n用于自定义页码的结构，用法参照 Pagination 组件\n",
                    "description": "<p>用于自定义页码的结构，用法参照 Pagination 组件</p>\n",
                    "line": 135,
                    "type": "TemplateRef<PaginationItemRenderContext>",
                    "decorators": []
                },
                {
                    "name": "nzLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n页面是否加载中\n",
                    "description": "<p>页面是否加载中</p>\n",
                    "line": 219,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzLoadingDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n延迟显示加载效果的时间（防止闪烁）\n",
                    "description": "<p>延迟显示加载效果的时间（防止闪烁）</p>\n",
                    "line": 167,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzLoadingIndicator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n加载指示符\n",
                    "description": "<p>加载指示符</p>\n",
                    "line": 227,
                    "type": "TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzNoResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n无数据时显示内容\n",
                    "description": "<p>无数据时显示内容</p>\n",
                    "line": 147,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzOuterBordered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示外边框\n",
                    "description": "<p>是否显示外边框</p>\n",
                    "line": 223,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzPageIndex",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t当前页码，可双向绑定\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">当前页码，可双向绑定</code></pre></div>",
                    "line": 171,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzPageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n每页展示多少数据，可双向绑定\n",
                    "description": "<p>每页展示多少数据，可双向绑定</p>\n",
                    "line": 175,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzPageSizeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t页数选择器可选值\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">页数选择器可选值</code></pre></div>",
                    "line": 151,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "nzPaginationPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n指定分页显示的位置\n",
                    "description": "<p>指定分页显示的位置</p>\n",
                    "line": 191,
                    "type": "NzTablePaginationPosition",
                    "decorators": []
                },
                {
                    "name": "nzPaginationType",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n指定分页显示的尺寸\n",
                    "description": "<p>指定分页显示的尺寸</p>\n",
                    "line": 203,
                    "type": "NzTablePaginationType",
                    "decorators": []
                },
                {
                    "name": "nzShowPagination",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t是否显示分页器\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">是否显示分页器</code></pre></div>",
                    "line": 215,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzShowQuickJumper",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否可以快速跳转至某页\n",
                    "description": "<p>是否可以快速跳转至某页</p>\n",
                    "line": 247,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzShowSizeChanger",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否可以改变 nzPageSize\n",
                    "description": "<p>是否可以改变 nzPageSize</p>\n",
                    "line": 239,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzShowTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n用于显示数据总量和当前数据范围，用法参照 Pagination 组件\n",
                    "description": "<p>用于显示数据总量和当前数据范围，用法参照 Pagination 组件</p>\n",
                    "line": 131,
                    "type": "TemplateRef<literal type>",
                    "decorators": []
                },
                {
                    "name": "nzSimple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当添加该属性时，显示为简单分页\n",
                    "description": "<p>当添加该属性时，显示为简单分页</p>\n",
                    "line": 251,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzSize",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表格大小, 正常或迷你类型\n",
                    "description": "<p>表格大小, 正常或迷你类型</p>\n",
                    "line": 235,
                    "type": "NzTableSize",
                    "decorators": []
                },
                {
                    "name": "nzTableLayout",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表格布局\n",
                    "description": "<p>表格布局</p>\n",
                    "line": 127,
                    "type": "NzTableLayout",
                    "decorators": []
                },
                {
                    "name": "nzTemplateMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n模板模式，无需将数据传递给 nzData\n",
                    "description": "<p>模板模式，无需将数据传递给 nzData</p>\n",
                    "line": 211,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表格标题\n",
                    "description": "<p>表格标题</p>\n",
                    "line": 139,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当前总数据，在服务器渲染时需要传入\n",
                    "description": "<p>当前总数据，在服务器渲染时需要传入</p>\n",
                    "line": 179,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzVirtualForTrackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n虚拟滚动数据 TrackByFunction 函数\n",
                    "description": "<p>虚拟滚动数据 TrackByFunction 函数</p>\n",
                    "line": 269,
                    "type": "TrackByFunction<T>",
                    "decorators": []
                },
                {
                    "name": "nzVirtualItemSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n虚拟滚动时每一列的高度，与 cdk itemSize 相同\n",
                    "description": "<p>虚拟滚动时每一列的高度，与 cdk itemSize 相同</p>\n",
                    "line": 155,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzVirtualMaxBufferPx",
                    "defaultValue": "200",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t缓冲区最大像素高度，与 cdk maxBufferPx 相同\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">缓冲区最大像素高度，与 cdk maxBufferPx 相同</code></pre></div>",
                    "line": 159,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzVirtualMinBufferPx",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n缓冲区最小像素高度，低于该值时将加载新结构，与 cdk minBufferPx 相同\n",
                    "description": "<p>缓冲区最小像素高度，低于该值时将加载新结构，与 cdk minBufferPx 相同</p>\n",
                    "line": 163,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzWidthConfig",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表头分组时指定每列宽度，与 th 的 [nzWidth] 不可混用\n",
                    "description": "<p>表头分组时指定每列宽度，与 th 的 [nzWidth] 不可混用</p>\n",
                    "line": 183,
                    "type": "ReadonlyArray<string | null>",
                    "decorators": []
                },
                {
                    "name": "nzxColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n配置列\n",
                    "description": "<p>配置列</p>\n",
                    "line": 103,
                    "type": "NzxColumn<T>[]",
                    "decorators": []
                },
                {
                    "name": "nzxDefaultRenderHeader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n默认渲染表头\n",
                    "description": "<p>默认渲染表头</p>\n",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxResizable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否能调整列大小\n",
                    "description": "<p>是否能调整列大小</p>\n",
                    "line": 123,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxSettingVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示配置列, 只在非合并表头时可用\n",
                    "description": "<p>显示配置列, 只在非合并表头时可用</p>\n",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n请求参数\n",
                    "description": "<p>请求参数</p>\n",
                    "line": 81,
                    "type": "FetchParams<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "scrollX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n横向支持滚动\n",
                    "description": "<p>横向支持滚动</p>\n",
                    "line": 195,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scrollY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n纵向支持滚动\n",
                    "description": "<p>纵向支持滚动</p>\n",
                    "line": 199,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sortFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n排序函数\n",
                    "description": "<p>排序函数</p>\n",
                    "line": 98,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n标题\n",
                    "description": "<p>标题</p>\n",
                    "line": 115,
                    "type": "string | TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "toolbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n工具栏\n",
                    "description": "<p>工具栏</p>\n",
                    "line": 119,
                    "type": "string | TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "toolbarVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示顶部标题\n",
                    "description": "<p>是否显示顶部标题</p>\n",
                    "line": 260,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tplMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n由外部传入模板列表\n",
                    "description": "<p>由外部传入模板列表</p>\n",
                    "line": 265,
                    "type": "Map<string | TemplateRef<NzSafeAny>>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cellClick",
                    "defaultValue": "new EventEmitter<CellEventArg<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n单元格点击事件\n",
                    "description": "<p>单元格点击事件</p>\n",
                    "line": 303,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellContextmenu",
                    "defaultValue": "new EventEmitter<CellEventArg<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n单元格右键菜单事件\n",
                    "description": "<p>单元格右键菜单事件</p>\n",
                    "line": 311,
                    "type": "EventEmitter"
                },
                {
                    "name": "cellDblclick",
                    "defaultValue": "new EventEmitter<CellEventArg<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n单元格双击事件\n",
                    "description": "<p>单元格双击事件</p>\n",
                    "line": 307,
                    "type": "EventEmitter"
                },
                {
                    "name": "headerClick",
                    "defaultValue": "new EventEmitter<HeaderEventArg>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表头单元格事件\n",
                    "description": "<p>表头单元格事件</p>\n",
                    "line": 316,
                    "type": "EventEmitter"
                },
                {
                    "name": "headerContextmenu",
                    "defaultValue": "new EventEmitter<HeaderEventArg>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表头单元格右键菜单事件\n",
                    "description": "<p>表头单元格右键菜单事件</p>\n",
                    "line": 324,
                    "type": "EventEmitter"
                },
                {
                    "name": "headerDblclick",
                    "defaultValue": "new EventEmitter<HeaderEventArg>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表头单元格双击事件\n",
                    "description": "<p>表头单元格双击事件</p>\n",
                    "line": 320,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzCurrentPageDataChange",
                    "defaultValue": "new EventEmitter<readonly T[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当前页面展示数据改变的回调函数\n",
                    "description": "<p>当前页面展示数据改变的回调函数</p>\n",
                    "line": 285,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzPageIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n当前页码改变时的回调函数\n",
                    "description": "<p>当前页码改变时的回调函数</p>\n",
                    "line": 277,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzPageSizeChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n页数改变时的回调函数\n",
                    "description": "<p>页数改变时的回调函数</p>\n",
                    "line": 273,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzQueryParams",
                    "defaultValue": "new EventEmitter<NzTableQueryParams>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\t当服务端分页、筛选、排序时，用于获得参数\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">当服务端分页、筛选、排序时，用于获得参数</code></pre></div>",
                    "line": 281,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowClick",
                    "defaultValue": "new EventEmitter<RowEventArg<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n数据行点击事件\n",
                    "description": "<p>数据行点击事件</p>\n",
                    "line": 290,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowContextmenu",
                    "defaultValue": "new EventEmitter<RowEventArg<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n数据行右键菜单事件\n",
                    "description": "<p>数据行右键菜单事件</p>\n",
                    "line": 298,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowDblclick",
                    "defaultValue": "new EventEmitter<RowEventArg<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n数据行双击事件\n",
                    "description": "<p>数据行双击事件</p>\n",
                    "line": 294,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_allColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "_bodyColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "_currentPageData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>当前页数据</p>\n",
                    "line": 66,
                    "rawdescription": "\n\n当前页数据\n"
                },
                {
                    "name": "_headerColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzxColumn[][]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NamedTemplate<NzSafeAny>>",
                    "optional": false,
                    "description": "",
                    "line": 326,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "NamedTemplate"
                        }
                    ]
                },
                {
                    "name": "defaultPageSizeOptions",
                    "defaultValue": "[10, 15, 20, 30, 40, 50, 100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "nzTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzTableComponent<T>",
                    "optional": false,
                    "description": "",
                    "line": 327,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'basicTable'"
                        }
                    ]
                },
                {
                    "name": "sortInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterResult",
                    "optional": true,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "doFetch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "params",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PageInfo<T>>",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "reset",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 410,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n发起请求\n",
                    "description": "<p>发起请求</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9082,
                                "end": 9087,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "reset"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 9076,
                                "end": 9081,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否重置</p>\n"
                        }
                    ]
                },
                {
                    "name": "fixedClick",
                    "args": [
                        {
                            "name": "column",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 382,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n固定列\n",
                    "description": "<p>固定列</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8489,
                                "end": 8495,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "column"
                            },
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8483,
                                "end": 8488,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "formatColumnData",
                    "args": [
                        {
                            "name": "list",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 500,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n格式化数据\n",
                    "description": "<p>格式化数据</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12021,
                                "end": 12025,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12015,
                                "end": 12020,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 12033,
                                "end": 12040,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getLinkHref",
                    "args": [
                        {
                            "name": "btn",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取链接地址\n",
                    "description": "<p>获取链接地址</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7843,
                                "end": 7846,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "btn"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7837,
                                "end": 7842,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>btn配置</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7866,
                                "end": 7869,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "row"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7860,
                                "end": 7865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前行</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7887,
                                "end": 7891,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7881,
                                "end": 7886,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>上下文信息</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRowColumns",
                    "args": [
                        {
                            "name": "originColumns",
                            "type": "NzxColumn<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 703,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n获取合并表头\n",
                    "description": "<p>获取合并表头</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 17469,
                                "end": 17482,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "originColumns"
                            },
                            "type": "NzxColumn<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 17463,
                                "end": 17468,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>原始列配置</p>\n"
                        }
                    ]
                },
                {
                    "name": "isAsync",
                    "args": [
                        {
                            "name": "obj",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 550,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否是异步数据\n",
                    "description": "<p>是否是异步数据</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13352,
                                "end": 13355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13346,
                                "end": 13351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "mergeParams",
                    "args": [
                        {
                            "name": "reset",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "fetchSetting",
                            "type": "FetchSetting",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Record<string, NzSafeAny>",
                    "typeParameters": [],
                    "line": 531,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "reset",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fetchSetting",
                            "type": "FetchSetting",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 668,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 673,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "normalProps",
                    "args": [
                        {
                            "name": "col",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 754,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n规范化属性\n",
                    "description": "<p>规范化属性</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 18741,
                                "end": 18744,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "col"
                            },
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 18735,
                                "end": 18740,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>列</p>\n"
                        }
                    ]
                },
                {
                    "name": "onCurrentPageDataChange",
                    "args": [
                        {
                            "name": "list",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 646,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "type": "NzResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "col",
                            "type": "NzxColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 359,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "NzResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "col",
                            "type": "NzxColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "reset",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n刷新\n",
                    "description": "<p>刷新</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8388,
                                "end": 8393,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "reset"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 8382,
                                "end": 8387,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "refreshCheckedStatus",
                    "args": [
                        {
                            "name": "col",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 657,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n点击刷新按钮\n",
                    "description": "<p>点击刷新按钮</p>\n"
                },
                {
                    "name": "resolveColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 558,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n处理表头合并单元格和 body的列\n",
                    "description": "<p>处理表头合并单元格和 body的列</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "resolveTemplateColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 570,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n处理参数为模板的参数, 从字符串中找到真正的模板对象\n",
                    "description": "<p>处理参数为模板的参数, 从字符串中找到真正的模板对象</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "setFetchResult",
                    "args": [
                        {
                            "name": "res",
                            "type": "Record<string | NzSafeAny> | T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fetchSetting",
                            "type": "FetchSetting",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 462,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "Record<string | NzSafeAny> | T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fetchSetting",
                            "type": "FetchSetting",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPageInfo",
                    "args": [
                        {
                            "name": "pageInfo",
                            "type": "PageInfo<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 486,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageInfo",
                            "type": "PageInfo<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortedColumn",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<NzxColumn<T> | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 694,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<NzxColumn<T> | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortOrderChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "NzTableSortOrder",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "col",
                            "type": "NzxColumn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n排序\n",
                    "description": "<p>排序</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8705,
                                "end": 8710,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "NzTableSortOrder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8699,
                                "end": 8704,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8724,
                                "end": 8727,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "col"
                            },
                            "type": "NzxColumn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8718,
                                "end": 8723,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "stringToTemplate",
                    "args": [
                        {
                            "name": "col",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nameTemplateMap",
                            "type": "Record<string | TemplateRef<NzSafeAny>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 595,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n字符串查找对应的模版\n",
                    "description": "<p>字符串查找对应的模版</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14517,
                                "end": 14520,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "col"
                            },
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14511,
                                "end": 14516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14534,
                                "end": 14537,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14528,
                                "end": 14533,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14551,
                                "end": 14566,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "nameTemplateMap"
                            },
                            "type": "Record<string | TemplateRef<NzSafeAny>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14545,
                                "end": 14550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "tdCheckedChange",
                    "args": [
                        {
                            "name": "evt",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "col",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowIndex",
                            "type": "IndexAttr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 636,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntd触发CheckBox change\n",
                    "description": "<p>td触发CheckBox change</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15512,
                                "end": 15515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "evt"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15506,
                                "end": 15511,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 15529,
                                "end": 15532,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "col"
                            },
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15523,
                                "end": 15528,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 15546,
                                "end": 15549,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "row"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15540,
                                "end": 15545,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 15563,
                                "end": 15571,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rowIndex"
                            },
                            "type": "IndexAttr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15557,
                                "end": 15562,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "thCheckedChange",
                    "args": [
                        {
                            "name": "evt",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "col",
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 616,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n表头触发CheckBox change\n",
                    "description": "<p>表头触发CheckBox change</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15056,
                                "end": 15059,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "evt"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15050,
                                "end": 15055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 15073,
                                "end": 15076,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "col"
                            },
                            "type": "NzxColumn<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15067,
                                "end": 15072,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  NzTableComponent,\r\n  NzTableLayout,\r\n  NzTablePaginationPosition,\r\n  NzTablePaginationType,\r\n  NzTableQueryParams,\r\n  NzTableSize,\r\n  NzTableSortOrder\r\n} from 'ng-zorro-antd/table';\r\nimport { PaginationItemRenderContext } from 'ng-zorro-antd/pagination';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/drag-events';\r\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { NzResizeEvent } from 'ng-zorro-antd/resizable';\r\nimport {\r\n  CellEventArg,\r\n  FetchSetting,\r\n  HeaderEventArg,\r\n  IndexAttr,\r\n  NzxColumn,\r\n  PageInfo,\r\n  RowEventArg,\r\n  SorterResult\r\n} from './table.type';\r\nimport { FETCH_SETTING } from './const';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NzxAntdService } from '@xmagic/nzx-antd';\r\nimport { FetcherService, FetchParams } from '@xmagic/nzx-antd/service';\r\nimport { NamedTemplate } from '@xmagic/nzx-antd/directive';\r\n\r\n@Component({\r\n  selector: 'nzx-table',\r\n  templateUrl: './table.component.html',\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: { '[class.nzx-table]': 'true' }\r\n})\r\nexport class NzxTableComponent<T extends Record<string, NzSafeAny>> implements OnInit, AfterContentInit, OnChanges {\r\n  /**\r\n   * 当前页数据\r\n   */\r\n  _currentPageData: readonly T[] = [];\r\n  _headerColumns: NzxColumn<T>[][] = [];\r\n  _bodyColumns: NzxColumn<T>[] = [];\r\n  _allColumns: NzxColumn<T>[] = [];\r\n  sortInfo?: SorterResult;\r\n  defaultPageSizeOptions = [10, 15, 20, 30, 40, 50, 100];\r\n\r\n  /**\r\n   * 请求处理\r\n   */\r\n  @Input() api!: string | Promise<T[]> | Observable<T[]>;\r\n\r\n  /**\r\n   * 请求参数\r\n   */\r\n  @Input() params?: FetchParams<NzSafeAny>;\r\n  /**\r\n   * 请求之前处理函数\r\n   */\r\n  @Input() beforeFetch?: (params: Record<string, NzSafeAny>) => Record<string, NzSafeAny> | Promise<NzSafeAny>;\r\n  /**\r\n   * 请求之后处理函数\r\n   */\r\n  @Input() afterFetch?: (res: NzSafeAny, pageIndex: number) => PageInfo<T> | Promise<PageInfo<T>>;\r\n\r\n  /**\r\n   * 请求配置\r\n   */\r\n  @Input() fetchSetting?: FetchSetting;\r\n  /**\r\n   * 排序函数\r\n   */\r\n  @Input() sortFn!: (data: SorterResult) => SorterResult;\r\n\r\n  /**\r\n   * 配置列\r\n   */\r\n  @Input() nzxColumns: NzxColumn<T>[] = [];\r\n  /**\r\n   * 显示配置列, 只在非合并表头时可用\r\n   */\r\n  @Input() nzxSettingVisible = true;\r\n  /**\r\n   * 默认渲染表头\r\n   */\r\n  @Input() nzxDefaultRenderHeader = false;\r\n  /**\r\n   * 标题\r\n   */\r\n  @Input() title?: string | TemplateRef<void>;\r\n  /**\r\n   * 工具栏\r\n   */\r\n  @Input() toolbar?: string | TemplateRef<void>;\r\n  /**\r\n   * 是否能调整列大小\r\n   */\r\n  @Input() nzxResizable = true;\r\n  /**\r\n   * 表格布局\r\n   */\r\n  @Input() nzTableLayout: NzTableLayout = 'auto';\r\n  /**\r\n   * 用于显示数据总量和当前数据范围，用法参照 Pagination 组件\r\n   */\r\n  @Input() nzShowTotal?: TemplateRef<{ $implicit: number; range: [number, number] }>;\r\n  /**\r\n   * 用于自定义页码的结构，用法参照 Pagination 组件\r\n   */\r\n  @Input() nzItemRender?: TemplateRef<PaginationItemRenderContext>;\r\n  /**\r\n   * 表格标题\r\n   */\r\n  @Input() nzTitle?: string | TemplateRef<NzSafeAny>;\r\n  /**\r\n   * 表格尾部\r\n   */\r\n  @Input() nzFooter?: string | TemplateRef<NzSafeAny>;\r\n  /**\r\n   * 无数据时显示内容\r\n   */\r\n  @Input() nzNoResult?: string | TemplateRef<NzSafeAny>;\r\n  /**\r\n   * \t页数选择器可选值\r\n   */\r\n  @Input() nzPageSizeOptions?: number[];\r\n  /**\r\n   * 虚拟滚动时每一列的高度，与 cdk itemSize 相同\r\n   */\r\n  @Input() nzVirtualItemSize = 0;\r\n  /**\r\n   * \t缓冲区最大像素高度，与 cdk maxBufferPx 相同\r\n   */\r\n  @Input() nzVirtualMaxBufferPx = 200;\r\n  /**\r\n   * 缓冲区最小像素高度，低于该值时将加载新结构，与 cdk minBufferPx 相同\r\n   */\r\n  @Input() nzVirtualMinBufferPx = 100;\r\n  /**\r\n   * 延迟显示加载效果的时间（防止闪烁）\r\n   */\r\n  @Input() nzLoadingDelay = 0;\r\n  /**\r\n   * \t当前页码，可双向绑定\r\n   */\r\n  @Input() nzPageIndex = 1;\r\n  /**\r\n   * 每页展示多少数据，可双向绑定\r\n   */\r\n  @Input() nzPageSize?: number;\r\n  /**\r\n   * 当前总数据，在服务器渲染时需要传入\r\n   */\r\n  @Input() nzTotal = 0;\r\n  /**\r\n   * 表头分组时指定每列宽度，与 th 的 [nzWidth] 不可混用\r\n   */\r\n  @Input() nzWidthConfig: ReadonlyArray<string | null> = [];\r\n  /**\r\n   * 表格数据\r\n   */\r\n  @Input() nzData: readonly T[] = [];\r\n  /**\r\n   * 指定分页显示的位置\r\n   */\r\n  @Input() nzPaginationPosition: NzTablePaginationPosition = 'bottom';\r\n  /**\r\n   * 横向支持滚动\r\n   */\r\n  @Input() scrollX?: string;\r\n  /**\r\n   * 纵向支持滚动\r\n   */\r\n  @Input() scrollY?: string;\r\n  /**\r\n   * 指定分页显示的尺寸\r\n   */\r\n  @Input() nzPaginationType: NzTablePaginationType = 'default';\r\n  /**\r\n   * 是否在前端对数据进行分页，如果在服务器分页数据或者需要在前端显示全部数据时传入 false\r\n   */\r\n  @Input() nzFrontPagination = false;\r\n  /**\r\n   * 模板模式，无需将数据传递给 nzData\r\n   */\r\n  @Input() nzTemplateMode = false;\r\n  /**\r\n   * \t是否显示分页器\r\n   */\r\n  @Input() nzShowPagination = true;\r\n  /**\r\n   * 页面是否加载中\r\n   */\r\n  @Input() nzLoading = false;\r\n  /**\r\n   * 是否显示外边框\r\n   */\r\n  @Input() nzOuterBordered = false;\r\n  /**\r\n   * 加载指示符\r\n   */\r\n  @Input() nzLoadingIndicator?: TemplateRef<NzSafeAny>;\r\n  /**\r\n   * 是否展示外边框和列边框\r\n   */\r\n  @Input() nzBordered = false;\r\n  /**\r\n   * 表格大小, 正常或迷你类型\r\n   */\r\n  @Input() nzSize: NzTableSize = 'small';\r\n  /**\r\n   * 是否可以改变 nzPageSize\r\n   */\r\n  @Input() nzShowSizeChanger = true;\r\n  /**\r\n   * 只有一页时是否隐藏分页器\r\n   */\r\n  @Input() nzHideOnSinglePage = false;\r\n  /**\r\n   * 是否可以快速跳转至某页\r\n   */\r\n  @Input() nzShowQuickJumper = true;\r\n  /**\r\n   * 当添加该属性时，显示为简单分页\r\n   */\r\n  @Input() nzSimple = false;\r\n\r\n  /**\r\n   * 是否显示操作按钮小图标\r\n   */\r\n  @Input() actionVisible?: boolean;\r\n  /**\r\n   * 是否显示顶部标题\r\n   */\r\n  @Input() toolbarVisible?: boolean;\r\n\r\n  /**\r\n   * 由外部传入模板列表\r\n   */\r\n  @Input() tplMap?: Map<string, TemplateRef<NzSafeAny>>;\r\n  /**\r\n   * 虚拟滚动数据 TrackByFunction 函数\r\n   */\r\n  @Input() nzVirtualForTrackBy?: TrackByFunction<T>;\r\n  /**\r\n   * 页数改变时的回调函数\r\n   */\r\n  @Output() readonly nzPageSizeChange = new EventEmitter<number>();\r\n  /**\r\n   * 当前页码改变时的回调函数\r\n   */\r\n  @Output() readonly nzPageIndexChange = new EventEmitter<number>();\r\n  /**\r\n   * \t当服务端分页、筛选、排序时，用于获得参数\r\n   */\r\n  @Output() readonly nzQueryParams = new EventEmitter<NzTableQueryParams>();\r\n  /**\r\n   * 当前页面展示数据改变的回调函数\r\n   */\r\n  @Output() readonly nzCurrentPageDataChange = new EventEmitter<readonly T[]>();\r\n\r\n  /**\r\n   * 数据行点击事件\r\n   */\r\n  @Output() readonly rowClick = new EventEmitter<RowEventArg<T>>();\r\n  /**\r\n   * 数据行双击事件\r\n   */\r\n  @Output() readonly rowDblclick = new EventEmitter<RowEventArg<T>>();\r\n  /**\r\n   * 数据行右键菜单事件\r\n   */\r\n  @Output() readonly rowContextmenu = new EventEmitter<RowEventArg<T>>();\r\n\r\n  /**\r\n   * 单元格点击事件\r\n   */\r\n  @Output() readonly cellClick = new EventEmitter<CellEventArg<T>>();\r\n  /**\r\n   * 单元格双击事件\r\n   */\r\n  @Output() readonly cellDblclick = new EventEmitter<CellEventArg<T>>();\r\n  /**\r\n   * 单元格右键菜单事件\r\n   */\r\n  @Output() readonly cellContextmenu = new EventEmitter<CellEventArg<T>>();\r\n\r\n  /**\r\n   * 表头单元格事件\r\n   */\r\n  @Output() readonly headerClick = new EventEmitter<HeaderEventArg>();\r\n  /**\r\n   * 表头单元格双击事件\r\n   */\r\n  @Output() readonly headerDblclick = new EventEmitter<HeaderEventArg>();\r\n  /**\r\n   * 表头单元格右键菜单事件\r\n   */\r\n  @Output() readonly headerContextmenu = new EventEmitter<HeaderEventArg>();\r\n\r\n  @ContentChildren(NamedTemplate) children!: QueryList<NamedTemplate<NzSafeAny>>;\r\n  @ViewChild('basicTable') nzTable!: NzTableComponent<T>;\r\n\r\n  constructor(\r\n    protected cdr: ChangeDetectorRef,\r\n    protected render: Renderer2,\r\n    protected http: HttpClient,\r\n    private antdService: NzxAntdService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.nzPageSize = this.nzPageSize || this.antdService.table?.nzPageSize || 10;\r\n    this.resolveColumns();\r\n    this.fetch();\r\n  }\r\n\r\n  /**\r\n   * 获取链接地址\r\n   * @param btn btn配置\r\n   * @param row 当前行\r\n   * @param data 上下文信息\r\n   */\r\n  getLinkHref(btn: { href: string | ((row: T, data: T[]) => string) }, row: T, data: T[]): string | undefined {\r\n    if (!btn.href) {\r\n      return undefined;\r\n    }\r\n    if (typeof btn.href === 'string') {\r\n      return btn.href;\r\n    }\r\n\r\n    return btn.href(row, data);\r\n  }\r\n\r\n  onResize({ width }: NzResizeEvent, col: NzxColumn) {\r\n    col.nzWidth = width + 'px';\r\n  }\r\n\r\n  /**\r\n   * 点击刷新按钮\r\n   */\r\n  reloadClick() {\r\n    this.fetch(false);\r\n  }\r\n\r\n  /**\r\n   * 刷新\r\n   * @param reset\r\n   */\r\n  refresh(reset = true) {\r\n    this.fetch(reset);\r\n  }\r\n\r\n  /**\r\n   * 固定列\r\n   * @param column\r\n   */\r\n  fixedClick(column: NzxColumn<T>) {\r\n    const hasFixed = this._allColumns.filter(value => value.fixed).length;\r\n    this.scrollX = hasFixed ? '100vw' : undefined;\r\n  }\r\n\r\n  /**\r\n   * 排序\r\n   * @param value\r\n   * @param col\r\n   */\r\n  sortOrderChange(value: NzTableSortOrder, col: NzxColumn) {\r\n    if (col.nzSortOrderChange) {\r\n      col.nzSortOrderChange(value, col);\r\n    }\r\n\r\n    const key = col.nzColumnKey! || col.name!;\r\n    this.sortInfo = {\r\n      column: col,\r\n      order: value,\r\n      field: key\r\n    };\r\n    this.fetch(false);\r\n  }\r\n\r\n  /**\r\n   * 发起请求\r\n   * @param reset 是否重置\r\n   */\r\n  fetch<T>(reset = true): void {\r\n    if (!this.api) {\r\n      return;\r\n    }\r\n\r\n    const fetchSetting = Object.assign({}, FETCH_SETTING, this.antdService.table, this.fetchSetting);\r\n    const setResult: (value: Record<string, NzSafeAny> | T[]) => void = res =>\r\n      this.setFetchResult(res, fetchSetting, reset);\r\n    if (Utils.isString(this.api)) {\r\n      FetcherService.resolveParams(this.params)\r\n        .pipe(\r\n          switchMap(_params => {\r\n            const commonParams = this.mergeParams(reset, fetchSetting);\r\n            const data = Object.assign({}, _params, commonParams);\r\n            if (!this.beforeFetch) {\r\n              return this.doFetch(this.api as string, fetchSetting.method, commonParams, data);\r\n            }\r\n\r\n            return FetcherService.resolveParams(this.beforeFetch(data)).pipe(_data =>\r\n              this.doFetch(this.api as string, fetchSetting.method, commonParams, _data)\r\n            );\r\n          })\r\n        )\r\n        .subscribe(setResult);\r\n      return;\r\n    }\r\n\r\n    if (Utils.isObservable(this.api)) {\r\n      (this.api as Observable<T[]>).subscribe(setResult);\r\n      return;\r\n    }\r\n    if (Utils.isPromise(this.api)) {\r\n      (this.api as Promise<T[]>).then(setResult);\r\n      return;\r\n    }\r\n\r\n    setResult([]);\r\n    return;\r\n  }\r\n\r\n  protected doFetch(url: string, method?: string, params?: NzSafeAny, data?: NzSafeAny): Observable<PageInfo<T>> {\r\n    const option: { params?: NzSafeAny; body?: NzSafeAny } = {};\r\n    method ||= 'post';\r\n    if (/^post|put$/i.test(method)) {\r\n      option.params = params;\r\n      option.body = data;\r\n    } else {\r\n      option.params = Object.assign({}, data, params);\r\n    }\r\n    return this.http.request<PageInfo<T>>(method, url, option);\r\n  }\r\n\r\n  private setFetchResult(res: Record<string, NzSafeAny> | T[], fetchSetting: FetchSetting, reset: boolean): void {\r\n    let result: PageInfo<T> = { total: 0, list: [] };\r\n    if (this.afterFetch && Utils.isFunction(this.afterFetch)) {\r\n      const data = this.afterFetch(res, this.nzPageIndex);\r\n      if (Utils.isPromise(data)) {\r\n        data.then(v => this.setPageInfo(v));\r\n        return;\r\n      }\r\n      result = data as PageInfo<T>;\r\n    } else {\r\n      if (Array.isArray(res)) {\r\n        result.list = res;\r\n        result.total = res.length;\r\n      } else {\r\n        result.list = Utils.get(res, fetchSetting.listField);\r\n        result.total = Utils.get(res, fetchSetting.totalField);\r\n        result.pageIndex = reset ? 1 : Utils.get(res, fetchSetting.pageIndexField);\r\n      }\r\n    }\r\n\r\n    this.formatColumnData(result.list);\r\n    this.setPageInfo(result);\r\n  }\r\n\r\n  private setPageInfo(pageInfo: PageInfo<T>): void {\r\n    this.nzData = pageInfo.list || [];\r\n    this.nzTotal = pageInfo.total || 0;\r\n    if (pageInfo.pageIndex != null) {\r\n      this.nzPageIndex = pageInfo.pageIndex;\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * 格式化数据\r\n   * @param list\r\n   * @private\r\n   */\r\n  private formatColumnData(list: T[]) {\r\n    if (!list) {\r\n      return;\r\n    }\r\n\r\n    const formatMap = this.nzxColumns.reduce((prev, curr) => {\r\n      if (curr.name && curr.format) {\r\n        prev[curr.name] = curr.format;\r\n      }\r\n      return prev;\r\n    }, {});\r\n\r\n    list.forEach((value, index) => {\r\n      if (value) {\r\n        Object.keys(value).forEach(key => {\r\n          if (formatMap[key]) {\r\n            const formatValue = formatMap[key](value[key], value, index);\r\n            if (this.isAsync(formatValue)) {\r\n              // 异步数据\r\n              // @ts-ignore\r\n              value['$async-' + key] = formatValue;\r\n            } else {\r\n              // @ts-ignore\r\n              value[key] = formatValue;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private mergeParams(reset = true, fetchSetting: FetchSetting) {\r\n    const params: Record<string, NzSafeAny> = {\r\n      [fetchSetting.pageIndexField!]: reset ? 1 : this.nzPageIndex,\r\n      [fetchSetting.pageSizeField!]: this.nzPageSize\r\n    };\r\n\r\n    if (this.sortInfo) {\r\n      const sortInfo = Utils.isFunction(this.sortFn) ? this.sortFn(this.sortInfo) : this.sortInfo;\r\n      delete sortInfo.column;\r\n      Object.assign(params, sortInfo);\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * 是否是异步数据\r\n   * @param obj\r\n   * @protected\r\n   */\r\n  protected isAsync(obj: NzSafeAny): boolean {\r\n    return Utils.isObservable(obj) || Utils.isPromise(obj);\r\n  }\r\n\r\n  /**\r\n   * 处理表头合并单元格和 body的列\r\n   * @protected\r\n   */\r\n  protected resolveColumns() {\r\n    const { headerRows, bodyRows, allColumns } = this.getRowColumns(this.nzxColumns);\r\n    this._headerColumns = headerRows;\r\n    this._allColumns = allColumns;\r\n    // 没有合并表头, 使用同一对象\r\n    this._bodyColumns = headerRows.length ? bodyRows : headerRows[0];\r\n  }\r\n\r\n  /**\r\n   * 处理参数为模板的参数, 从字符串中找到真正的模板对象\r\n   * @protected\r\n   */\r\n  protected resolveTemplateColumn() {\r\n    const nameTemplateMap: Record<string, TemplateRef<NzSafeAny>> = {};\r\n    for (const tpl of this.children) {\r\n      nameTemplateMap[tpl.named] = tpl.template;\r\n    }\r\n\r\n    if (this.tplMap) {\r\n      this.tplMap.forEach((value, key) => (nameTemplateMap[key] = value));\r\n    }\r\n\r\n    this._allColumns.forEach(col =>\r\n      Object.keys(col)\r\n        .filter(v => /Template$/.test(v))\r\n        .forEach(tplName => this.stringToTemplate(col, tplName, nameTemplateMap))\r\n    );\r\n    setTimeout(() => this.cdr.markForCheck());\r\n  }\r\n\r\n  /**\r\n   * 字符串查找对应的模版\r\n   * @param col\r\n   * @param key\r\n   * @param nameTemplateMap\r\n   * @protected\r\n   */\r\n  protected stringToTemplate(\r\n    col: NzxColumn<T>,\r\n    key: keyof NzxColumn,\r\n    nameTemplateMap: Record<string, TemplateRef<NzSafeAny>>\r\n  ) {\r\n    const newKey = '_' + key;\r\n    if (typeof col[key] === 'string') {\r\n      const tpl = nameTemplateMap[col[key]];\r\n      if (tpl) {\r\n        col[newKey] = tpl;\r\n      }\r\n    } else if (col[key] instanceof TemplateRef) {\r\n      col[newKey] = col[key];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 表头触发CheckBox change\r\n   * @param evt\r\n   * @param col\r\n   */\r\n  thCheckedChange(evt: boolean, col: NzxColumn<T>): void {\r\n    if (col.enableCheckAll !== false) {\r\n      col.checked = evt;\r\n      col.nzIndeterminate = false;\r\n      // @ts-ignore\r\n      this._currentPageData.forEach(v => !v.disabled && (v.checked = evt));\r\n    }\r\n    if (col.thCheckedChange) {\r\n      col.thCheckedChange(evt, col);\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * td触发CheckBox change\r\n   * @param evt\r\n   * @param col\r\n   * @param row\r\n   * @param rowIndex\r\n   */\r\n  tdCheckedChange(evt: boolean, col: NzxColumn<T>, row: T, rowIndex: IndexAttr) {\r\n    if (col.enableCheckAll !== false) {\r\n      this.refreshCheckedStatus(col);\r\n    }\r\n    if (col.tdCheckedChange) {\r\n      col.tdCheckedChange(evt, col, row, rowIndex);\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  onCurrentPageDataChange(list: readonly T[]): void {\r\n    this._currentPageData = list;\r\n    const col = this._bodyColumns.filter(v => v.nzShowCheckbox)[0];\r\n    if (col) {\r\n      this.refreshCheckedStatus(col);\r\n    }\r\n\r\n    this.nzCurrentPageDataChange.emit(list);\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  refreshCheckedStatus(col: NzxColumn<T>): void {\r\n    const list = this._currentPageData.filter(v => !v.disabled);\r\n    if (list.length) {\r\n      col.checked = list.every(v => v.checked);\r\n      col.nzIndeterminate = !col.checked && list.some(v => v.checked);\r\n    } else {\r\n      col.checked = false;\r\n      col.nzIndeterminate = false;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.children.changes.subscribe(() => this.resolveTemplateColumn());\r\n    this.resolveTemplateColumn();\r\n  }\r\n\r\n  ngOnChanges(changes: { [P in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (\r\n      (changes.nzxColumns && !changes.nzxColumns.isFirstChange()) ||\r\n      (changes.tplMap && !changes.tplMap.isFirstChange())\r\n    ) {\r\n      this.resolveColumns();\r\n      this.resolveTemplateColumn();\r\n    }\r\n\r\n    if (changes.api && !changes.api.isFirstChange()) {\r\n      this.fetch(true);\r\n    }\r\n\r\n    if (\r\n      (changes.nzPageIndex && !changes.nzPageIndex.isFirstChange()) ||\r\n      (changes.nzPageSize && !changes.nzPageSize.isFirstChange())\r\n    ) {\r\n      this.fetch();\r\n    }\r\n  }\r\n\r\n  sortedColumn(event: CdkDragDrop<NzxColumn<T>, NzSafeAny>) {\r\n    moveItemInArray(this._headerColumns[0], event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  /**\r\n   * 获取合并表头\r\n   * @param originColumns 原始列配置\r\n   * @protected\r\n   */\r\n  protected getRowColumns(originColumns: NzxColumn<T>[]): {\r\n    headerRows: NzxColumn<T>[][];\r\n    bodyRows: NzxColumn<T>[];\r\n    allColumns: NzxColumn<T>[];\r\n  } {\r\n    let maxLevel = 0;\r\n    const allColumns: NzxColumn<T>[] = [];\r\n    Utils.forEachTree(originColumns, (node, parent, level) => {\r\n      this.normalProps(node);\r\n\r\n      allColumns.push(node);\r\n      node.colspan = node.children && node.children.length ? 0 : 1;\r\n      node.level = level;\r\n\r\n      if (level > maxLevel) {\r\n        maxLevel = level;\r\n      }\r\n\r\n      node.parent = parent;\r\n      if (parent && !node.children) {\r\n        let p = parent;\r\n        while (p) {\r\n          p.colspan++;\r\n          p = p.parent;\r\n        }\r\n      }\r\n    });\r\n\r\n    const headerRows: NzxColumn<T>[][] = Array.from({ length: maxLevel + 1 })\r\n      .fill(0)\r\n      .map(() => []) as NzSafeAny;\r\n\r\n    const bodyRows: NzxColumn<T>[] = [];\r\n    allColumns.forEach(col => {\r\n      if (!col.children) {\r\n        col.rowspan = maxLevel - col.level + 1;\r\n        bodyRows.push(col);\r\n      } else {\r\n        col.rowspan = 1;\r\n      }\r\n      headerRows[col.level].push(col);\r\n    });\r\n\r\n    return { headerRows, bodyRows, allColumns };\r\n  }\r\n\r\n  /**\r\n   * 规范化属性\r\n   * @param col 列\r\n   * @protected\r\n   */\r\n  protected normalProps(col: NzxColumn<T>) {\r\n    if (col.visible == null) {\r\n      col.visible = true;\r\n    }\r\n    if (col.settingVisible == null) {\r\n      col.settingVisible = true;\r\n    }\r\n    if (col.thText == null && col.isIndex) {\r\n      col.thText = '序号';\r\n    }\r\n    if (col.nzWidth == null && col.isIndex) {\r\n      col.nzWidth = '60px';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 327,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "antdService",
                        "type": "NzxAntdService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnChanges"
            ],
            "templateData": "<nzx-table-header\r\n  *ngIf=\"toolbarVisible !== false\"\r\n  [actionVisible]=\"actionVisible\"\r\n  [tableSize]=\"nzSize\"\r\n  (tableSizeChange)=\"nzSize = $event\"\r\n  (reloadClick)=\"reloadClick()\"\r\n>\r\n  <ng-container *nzStringTemplateOutlet=\"title; context: { $implicit: { context: this } }\">\r\n    <div [innerHTML]=\"title\"></div>\r\n  </ng-container>\r\n  <ng-content select=\"[title]\"></ng-content>\r\n\r\n  <ng-container *nzStringTemplateOutlet=\"toolbar; context: { $implicit: { context: this } }\">\r\n    <div [innerHTML]=\"toolbar\"></div>\r\n  </ng-container>\r\n  <ng-container toolbar>\r\n    <ng-content select=\"[toolbar]\"></ng-content>\r\n  </ng-container>\r\n\r\n  <nzx-column-setting\r\n    *ngIf=\"nzxSettingVisible\"\r\n    setting\r\n    [nzxColumns]=\"_bodyColumns\"\r\n    (sortedColumn)=\"sortedColumn($event)\"\r\n    (fixedClick)=\"fixedClick($event)\"\r\n  ></nzx-column-setting>\r\n</nzx-table-header>\r\n\r\n<nz-table\r\n  #basicTable\r\n  [nzData]=\"nzData\"\r\n  [nzTableLayout]=\"nzTableLayout\"\r\n  [nzFrontPagination]=\"nzFrontPagination\"\r\n  [nzTotal]=\"nzTotal\"\r\n  [(nzPageIndex)]=\"nzPageIndex\"\r\n  [(nzPageSize)]=\"nzPageSize\"\r\n  [nzShowPagination]=\"nzShowPagination\"\r\n  [nzPaginationPosition]=\"nzPaginationPosition\"\r\n  [nzPaginationType]=\"nzPaginationType\"\r\n  [nzBordered]=\"nzBordered\"\r\n  [nzOuterBordered]=\"nzOuterBordered\"\r\n  [nzWidthConfig]=\"nzWidthConfig\"\r\n  [nzSize]=\"nzSize\"\r\n  [nzLoading]=\"nzLoading\"\r\n  [nzLoadingIndicator]=\"nzLoadingIndicator\"\r\n  [nzLoadingDelay]=\"nzLoadingDelay\"\r\n  [nzScroll]=\"{ x: scrollX, y: scrollY }\"\r\n  [nzTitle]=\"nzTitle\"\r\n  [nzFooter]=\"nzFooter\"\r\n  [nzNoResult]=\"nzNoResult\"\r\n  [nzPageSizeOptions]=\"nzPageSizeOptions || defaultPageSizeOptions\"\r\n  [nzShowQuickJumper]=\"nzShowQuickJumper\"\r\n  [nzShowSizeChanger]=\"nzShowSizeChanger\"\r\n  [nzShowTotal]=\"nzShowTotal === undefined ? totalTemplate : nzShowTotal\"\r\n  [nzItemRender]=\"nzItemRender\"\r\n  [nzHideOnSinglePage]=\"nzHideOnSinglePage\"\r\n  [nzSimple]=\"nzSimple\"\r\n  [nzTemplateMode]=\"nzTemplateMode\"\r\n  [nzVirtualItemSize]=\"nzVirtualItemSize\"\r\n  [nzVirtualMaxBufferPx]=\"nzVirtualMaxBufferPx\"\r\n  [nzVirtualMinBufferPx]=\"nzVirtualMinBufferPx\"\r\n  [nzVirtualForTrackBy]=\"nzVirtualForTrackBy\"\r\n  (nzPageIndexChange)=\"nzPageIndexChange.emit($event); fetch(false)\"\r\n  (nzPageSizeChange)=\"nzPageSizeChange.emit($event); fetch(false)\"\r\n  (nzCurrentPageDataChange)=\"onCurrentPageDataChange($event)\"\r\n  (nzQueryParams)=\"nzQueryParams.emit($event)\"\r\n>\r\n  <thead>\r\n    <ng-container *ngIf=\"!nzxDefaultRenderHeader\">\r\n      <tr *ngFor=\"let row of _headerColumns\">\r\n        <ng-container *ngFor=\"let col of row\">\r\n          <th\r\n            *ngIf=\"!col.nzShowCheckbox && col.visible !== false\"\r\n            nz-resizable\r\n            [nzDisabled]=\"nzxResizable === false\"\r\n            nzBounds=\"window\"\r\n            (nzResize)=\"onResize($event, col)\"\r\n            (click.once)=\"headerClick.emit({ column: col, event: $event })\"\r\n            (dblclick)=\"headerDblclick.emit({ column: col, event: $event })\"\r\n            (contextmenu)=\"headerContextmenu.emit({ column: col, event: $event })\"\r\n            [nzShowSort]=\"col.nzShowSort\"\r\n            [nzCustomFilter]=\"col.nzCustomFilter\"\r\n            [nzSortFn]=\"col.nzSortFn == null ? true : col.nzSortFn\"\r\n            [nzSortDirections]=\"col.nzSortDirections\"\r\n            [(nzSortOrder)]=\"col.nzSortOrder\"\r\n            (nzSortOrderChange)=\"sortOrderChange($event, col)\"\r\n            [nzColumnKey]=\"col.nzColumnKey || col.name\"\r\n            [nzShowFilter]=\"col.nzShowFilter\"\r\n            [nzSortPriority]=\"col.nzSortPriority\"\r\n            [nzFilterFn]=\"col.nzFilterFn\"\r\n            [nzFilters]=\"col.nzFilters\"\r\n            [nzFilterMultiple]=\"col.nzFilterMultiple !== false\"\r\n            [nzWidth]=\"col.nzWidth\"\r\n            [nzLeft]=\"col.fixed === 'left'\"\r\n            [nzRight]=\"col.fixed === 'right'\"\r\n            [nzAlign]=\"col.nzAlign\"\r\n            [nzBreakWord]=\"col.nzBreakWord\"\r\n            [nzEllipsis]=\"col.nzEllipsis\"\r\n            [colspan]=\"col.colspan\"\r\n            [rowspan]=\"col.rowspan\"\r\n            [ngClass]=\"col.thNgClass\"\r\n            [ngStyle]=\"col.thNgStyle\"\r\n          >\r\n            <nz-resize-handles [nzDirections]=\"['right']\"></nz-resize-handles>\r\n            <ng-container\r\n              *ngTemplateOutlet=\"\r\n                thRenderTemplate;\r\n                context: { $implicit: { col: col, row: row, context: this }, row: row }\r\n              \"\r\n            ></ng-container>\r\n          </th>\r\n\r\n          <th\r\n            *ngIf=\"col.nzShowCheckbox && col.visible !== false\"\r\n            nz-resizable\r\n            [nzDisabled]=\"nzxResizable === false\"\r\n            nzBounds=\"window\"\r\n            (nzResize)=\"onResize($event, col)\"\r\n            (click.once)=\"headerClick.emit({ column: col, event: $event })\"\r\n            (dblclick)=\"headerDblclick.emit({ column: col, event: $event })\"\r\n            (contextmenu)=\"headerContextmenu.emit({ column: col, event: $event })\"\r\n            [nzShowCheckbox]=\"col.nzShowCheckbox\"\r\n            [nzIndeterminate]=\"col.nzIndeterminate\"\r\n            [(nzChecked)]=\"col.checked\"\r\n            (nzCheckedChange)=\"thCheckedChange($event, col)\"\r\n            [nzShowRowSelection]=\"col.nzShowRowSelection\"\r\n            [nzSelections]=\"col.nzSelections\"\r\n            [nzWidth]=\"col.nzWidth == null && col.isIndex ? '60px' : col.nzWidth\"\r\n            [nzLeft]=\"col.fixed === 'left'\"\r\n            [nzRight]=\"col.fixed === 'right'\"\r\n            [nzAlign]=\"col.nzAlign\"\r\n            [nzBreakWord]=\"col.nzBreakWord\"\r\n            [nzEllipsis]=\"col.nzEllipsis\"\r\n            [colspan]=\"col.colspan\"\r\n            [rowspan]=\"col.rowspan\"\r\n            [ngClass]=\"col.thClassName\"\r\n            [ngStyle]=\"col.thStyle\"\r\n          >\r\n            <nz-resize-handles [nzDirections]=\"['right']\"></nz-resize-handles>\r\n            <ng-container\r\n              *ngTemplateOutlet=\"\r\n                thRenderTemplate;\r\n                context: { $implicit: { col: col, row: row, context: this }, row: row }\r\n              \"\r\n            ></ng-container>\r\n          </th>\r\n        </ng-container>\r\n      </tr>\r\n    </ng-container>\r\n  </thead>\r\n\r\n  <tbody>\r\n    <ng-container\r\n      *ngFor=\"let row of basicTable.data; index as index; first as first; last as last; even as even; odd as odd\"\r\n    >\r\n      <tr\r\n        *ngIf=\"row.parent?.expand || !row.parent\"\r\n        (click.once)=\"\r\n          rowClick.emit({\r\n            row: row,\r\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n            event: $event\r\n          })\r\n        \"\r\n        (dblclick)=\"\r\n          rowDblclick.emit({\r\n            row: row,\r\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n            event: $event\r\n          })\r\n        \"\r\n        (contextmenu)=\"\r\n          rowContextmenu.emit({\r\n            row: row,\r\n            rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n            event: $event\r\n          })\r\n        \"\r\n        [ngClass]=\"row.className\"\r\n        [ngStyle]=\"row.style\"\r\n      >\r\n        <ng-container\r\n          *ngFor=\"let col of _bodyColumns; index as _index; first as _first; last as _last; even as _even; odd as _odd\"\r\n        >\r\n          <td\r\n            *ngIf=\"col.visible !== false\"\r\n            (click.once)=\"\r\n              cellClick.emit({\r\n                row: row,\r\n                column: col,\r\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n                columnIndex: {\r\n                  index: _index,\r\n                  first: _first,\r\n                  last: _last,\r\n                  even: _even,\r\n                  odd: _odd\r\n                },\r\n                event: $event\r\n              })\r\n            \"\r\n            (dblclick)=\"\r\n              cellDblclick.emit({\r\n                row: row,\r\n                column: col,\r\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n                columnIndex: {\r\n                  index: _index,\r\n                  first: _first,\r\n                  last: _last,\r\n                  even: _even,\r\n                  odd: _odd\r\n                },\r\n                event: $event\r\n              })\r\n            \"\r\n            (contextmenu)=\"\r\n              cellContextmenu.emit({\r\n                row: row,\r\n                column: col,\r\n                rowIndex: { index: index, first: first, last: last, even: even, odd: odd },\r\n                columnIndex: {\r\n                  index: _index,\r\n                  first: _first,\r\n                  last: _last,\r\n                  even: _even,\r\n                  odd: _odd\r\n                },\r\n                event: $event\r\n              })\r\n            \"\r\n            [nzShowCheckbox]=\"col.nzShowCheckbox || row.showCheckbox\"\r\n            [nzDisabled]=\"row.disabled\"\r\n            [nzIndeterminate]=\"row.indeterminate\"\r\n            [(nzChecked)]=\"row.checked\"\r\n            (nzCheckedChange)=\"tdCheckedChange($event, col, row, {index, first, last, even, odd})\"\r\n            [nzShowExpand]=\"col.showExpand && row.showExpand\"\r\n            [(nzExpand)]=\"row.expand\"\r\n            (nzExpandChange)=\"col.nzExpandChange && col.nzExpandChange($event, col, row, {index, first, last, even, odd})\"\r\n            [nzIndentSize]=\"col.showExpand && row.nzIndentSize ? row.nzIndentSize : null\"\r\n            [nzLeft]=\"col.fixed === 'left'\"\r\n            [nzRight]=\"col.fixed === 'right'\"\r\n            [nzAlign]=\"col.tdAlign || col.nzAlign\"\r\n            [nzBreakWord]=\"col.nzBreakWord\"\r\n            [nzEllipsis]=\"col.nzEllipsis\"\r\n            [attr.colspan]=\"row.colspan\"\r\n            [attr.rowspan]=\"row.rowspan\"\r\n            [ngClass]=\"col.tdNgClass\"\r\n            [ngStyle]=\"col.tdNgStyle\"\r\n          >\r\n            <ng-container\r\n              *ngTemplateOutlet=\"\r\n                tdDataRender;\r\n                context: {\r\n                  $implicit: {\r\n                    col: col,\r\n                    row: row,\r\n                    context: this,\r\n                    indexAttr: { index: index, first: first, last: last, even: even, odd: odd }\r\n                  },\r\n                  row: row\r\n                }\r\n              \"\r\n            ></ng-container>\r\n          </td>\r\n        </ng-container>\r\n      </tr>\r\n    </ng-container>\r\n  </tbody>\r\n</nz-table>\r\n\r\n<ng-template #thRenderTemplate let-data>\r\n  <ng-container *ngIf=\"data.col._thTemplate; else textThTemplate\">\r\n    <ng-container *ngTemplateOutlet=\"data.col._thTemplate; context: { $implicit: data }\"></ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #textThTemplate>\r\n    {{ data.col.thText }}\r\n  </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #tdDataRender let-data let-row=\"row\">\r\n  <ng-container *ngIf=\"!data.col.isIndex; else tdTemplateTemplate\">\r\n    <ng-container *ngIf=\"data.col._tdTemplate; else buttonControlTemplate\">\r\n      <ng-container *ngTemplateOutlet=\"data.col._tdTemplate; context: { $implicit: data, row: row }\"></ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #tdTemplateTemplate>\r\n    {{ nzPageSize * (nzPageIndex - 1) + data.indexAttr.index + 1 }}\r\n  </ng-template>\r\n\r\n  <ng-template #buttonControlTemplate>\r\n    <ng-container *ngIf=\"data.col.buttons?.length; else textValueTemplate\">\r\n      <ng-container *ngFor=\"let btn of data.col.buttons; index as index; count as count; last as last\">\r\n        <button\r\n          *ngIf=\"btn.link === false && (btn.visible !== false || row.buttons?.[index]?.visible !== false)\"\r\n          type=\"button\"\r\n          nz-button\r\n          [type]=\"btn.type\"\r\n          [nzBlock]=\"btn.nzBlock\"\r\n          [nzDanger]=\"btn.nzDanger\"\r\n          [nzGhost]=\"btn.nzGhost\"\r\n          [nzSize]=\"btn.nzSize || 'small'\"\r\n          [nzLoading]=\"btn.nzLoading || row.buttons?.[index]?.nzLoading\"\r\n          [nzSearch]=\"btn.nzSearch\"\r\n          [nzShape]=\"btn.nzShape\"\r\n          [nzType]=\"btn.nzType || 'link'\"\r\n          [disabled]=\"row.buttons?.[index]?.disabled\"\r\n          (click.once)=\"btn.click && btn.click(row, data, $event)\"\r\n        >\r\n          {{ row.buttons?.[index]?.text || btn.text }}\r\n        </button>\r\n        <a\r\n          *ngIf=\"btn.link !== false && (btn.visible !== false || row.buttons?.[index]?.visible !== false)\"\r\n          [attr.href]=\"getLinkHref(btn, row, data)\"\r\n          [attr.target]=\"btn.target || row.buttons?.[index]?.target\"\r\n          (click.once)=\"btn.click && row.buttons?.[index]?.disabled !== true && btn.click(row, data, $event)\"\r\n        >\r\n          {{ btn.text || row.buttons?.[index]?.text }}\r\n        </a>\r\n        <nz-divider nzType=\"vertical\" *ngIf=\"count > 1 && !last\"></nz-divider>\r\n      </ng-container>\r\n\r\n      <ng-container *ngTemplateOutlet=\"data.col._tdTemplate; context: { $implicit: data, row: row }\"></ng-container>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #textValueTemplate>\r\n    <ng-container *ngIf=\"data.col.name\">\r\n      <!--处理异步数据-->\r\n      <ng-container *ngIf=\"data.row['$async-' + data.col.name]; else simpleValue\">\r\n        {{ data.row['$async-' + data.col.name] | async | defaultify }}\r\n      </ng-container>\r\n\r\n      <ng-template #simpleValue>\r\n        {{ data.row[data.col.name] | async | defaultify }}\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #totalTemplate let-range=\"range\" let-total>\r\n  第 {{ range[0] / nzPageSize | math: 'ceil' }}/{{ total / nzPageSize | math: 'ceil' }} 页 共 {{ total }} 条\r\n</ng-template>\r\n"
        },
        {
            "name": "NzxUploadComponent",
            "id": "component-NzxUploadComponent-bb065b118c924988dd307037ebe56e062c070b0cdbd8f1d93576f3bcddbfe36f556da25857af9d81efb32f8eb7f8decb454f403f19daa3d431009119e2bfeddc",
            "file": "lib/upload/upload.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NzxUploadComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "NzBytesPipe",
                    "type": "pipe"
                }
            ],
            "selector": "nzx-upload",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nzAccept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "nzAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "string | ",
                    "decorators": []
                },
                {
                    "name": "nzBeforeUpload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzCustomRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "literal type | ",
                    "decorators": []
                },
                {
                    "name": "nzDirectory",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzDownload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 135,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzFileListRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 137,
                    "type": "TemplateRef<void>",
                    "decorators": []
                },
                {
                    "name": "nzFileType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "nzFilter",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "UploadFilter[]",
                    "decorators": []
                },
                {
                    "name": "nzHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "literal type | ",
                    "decorators": []
                },
                {
                    "name": "nzIconRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "NzIconRenderTemplate | null",
                    "decorators": []
                },
                {
                    "name": "nzLimit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n上传的文件个数限制\n",
                    "description": "<p>上传的文件个数限制</p>\n",
                    "line": 87,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzListType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "NzUploadListType",
                    "decorators": []
                },
                {
                    "name": "nzMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzName",
                    "defaultValue": "'file'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 126,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzOpenFileDialogOnClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzPreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzPreviewFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 132,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzPreviewIsImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 133,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzRemove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzShowButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 128,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzShowUploadList",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "boolean | NzShowUploadList",
                    "decorators": []
                },
                {
                    "name": "nzSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n文件大小,单位kb\n",
                    "description": "<p>文件大小,单位kb</p>\n",
                    "line": 99,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzTotalSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n总文件大小,单位kb\n",
                    "description": "<p>总文件大小,单位kb</p>\n",
                    "line": 103,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzTransformFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 134,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "nzType",
                    "defaultValue": "'select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "NzUploadType",
                    "decorators": []
                },
                {
                    "name": "nzWithCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxFileNameDuplicate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n文件名重复验证\n",
                    "description": "<p>文件名重复验证</p>\n",
                    "line": 91,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxFileNameLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n文件名长度\n",
                    "description": "<p>文件名长度</p>\n",
                    "line": 95,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nzxHint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n上传的提示信息\n",
                    "description": "<p>上传的提示信息</p>\n",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxShowUploadButtonIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示上传按钮, 如果是nzType=\"drag\" 隐藏按钮\n",
                    "description": "<p>是否显示上传按钮, 如果是nzType=&quot;drag&quot; 隐藏按钮</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxShowValidateMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示验证错误提示信息\n",
                    "description": "<p>是否显示验证错误提示信息</p>\n",
                    "line": 112,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nzxUploadButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n自定义按钮或显示内容\n",
                    "description": "<p>自定义按钮或显示内容</p>\n",
                    "line": 66,
                    "type": "string | TemplateRef<NzSafeAny>",
                    "decorators": []
                },
                {
                    "name": "nzxUploadButtonIcon",
                    "defaultValue": "'cloud-upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n上传按钮的图标\n",
                    "description": "<p>上传按钮的图标</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nzxValidateMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n错误信息映射\n",
                    "description": "<p>错误信息映射</p>\n",
                    "line": 82,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nzChange",
                    "defaultValue": "new EventEmitter<NzUploadChangeParam>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 139,
                    "type": "EventEmitter"
                },
                {
                    "name": "nzFileListChange",
                    "defaultValue": "new EventEmitter<NzUploadFile[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 140,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_nzBeforeUpload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "defaultValidateMessage",
                    "defaultValue": "{\r\n    FILE_SIZE: '文件 \"{fileName}\" 大小不能超过{fileSize}',\r\n    FILE_TOTAL_SIZE: '总上传文件大小不能超过{totalSize}',\r\n    FILE_TYPE: '上传的文件格式只能是 \"{fileType}',\r\n    FILE_LIMIT: '最多允许上传{fileLimit}个文件',\r\n    FILE_NAME_LENGTH: '文件 \"{fileName}\" 名称长度不能大于{fileNameLength}个字符',\r\n    FILE_NAME_DUPLICATE: '已上传名称 \"{fileName}\" 相同的文件，不能重复上传'\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "nzFileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NzUploadFile[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "nzxDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseControl"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "beforeUploadValidator",
                    "args": [
                        {
                            "name": "file",
                            "type": "NzUploadFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileList",
                            "type": "NzUploadFile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FileValidateError | null",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n文件验证\n",
                    "description": "<p>文件验证</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7154,
                                "end": 7158,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "NzUploadFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7148,
                                "end": 7153,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前文件</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7177,
                                "end": 7185,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileList"
                            },
                            "type": "NzUploadFile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7171,
                                "end": 7176,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>文件列表</p>\n"
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorType",
                            "type": "ErrorType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "NzUploadFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messages",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fmtData",
                            "type": "Record<string | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FileValidateError",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorType",
                            "type": "ErrorType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "NzUploadFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messages",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fmtData",
                            "type": "Record<string | NzSafeAny>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNzBeforeUpload",
                    "args": [],
                    "optional": false,
                    "returnType": " | undefined",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n重新包装zBeforeUpload\n",
                    "description": "<p>重新包装zBeforeUpload</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNzChange",
                    "args": [
                        {
                            "name": "evt",
                            "type": "NzUploadChangeParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "NzUploadChangeParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaultFileFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "setNzBeforeUpload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showFileErrorMessage",
                    "args": [
                        {
                            "name": "file",
                            "type": "NzUploadFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileList",
                            "type": "NzUploadFile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showValidateMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FileValidateError | null",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n显示文件验证错误\n",
                    "description": "<p>显示文件验证错误</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9096,
                                "end": 9100,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "NzUploadFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9090,
                                "end": 9095,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>当前文件</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9119,
                                "end": 9127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileList"
                            },
                            "type": "NzUploadFile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9113,
                                "end": 9118,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>文件列表</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9146,
                                "end": 9165,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "showValidateMessage"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 9140,
                                "end": 9145,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>是否显示</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 9178,
                                "end": 9185,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "NzUploadFile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "NzUploadFile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControl"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport {\r\n  NzIconRenderTemplate,\r\n  NzUploadChangeParam,\r\n  NzUploadFile,\r\n  NzUploadListType,\r\n  NzUploadTransformFileType,\r\n  NzUploadType,\r\n  NzUploadXHRArgs,\r\n  UploadFilter,\r\n  NzShowUploadList\r\n} from 'ng-zorro-antd/upload';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControl } from '@xmagic/nzx-antd/util';\r\nimport { NzMessageService } from 'ng-zorro-antd/message';\r\nimport { Utils } from '@xmagic/nzx-antd/util';\r\nimport { NzBytesPipe } from 'ng-zorro-antd/pipes';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\n\r\nexport enum ErrorType {\r\n  /**\r\n   * 单文件大小限制,单位KB\r\n   */\r\n  FILE_SIZE = 'FILE_SIZE',\r\n  /**\r\n   * 总文件大小限制\r\n   */\r\n  FILE_TOTAL_SIZE = 'FILE_TOTAL_SIZE',\r\n  FILE_TYPE = 'FILE_TYPE',\r\n  FILE_LIMIT = 'FILE_LIMIT',\r\n  FILE_NAME_LENGTH = 'FILE_NAME_LENGTH',\r\n  FILE_NAME_DUPLICATE = 'FILE_NAME_DUPLICATE'\r\n}\r\n\r\n@Component({\r\n  selector: 'nzx-upload',\r\n  templateUrl: './upload.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NzxUploadComponent),\r\n      multi: true\r\n    },\r\n    NzBytesPipe\r\n  ]\r\n})\r\nexport class NzxUploadComponent extends BaseControl<NzUploadFile[]> implements ControlValueAccessor, OnInit, OnChanges {\r\n  nzFileList: NzUploadFile[] = [];\r\n  /**\r\n   * 自定义按钮或显示内容\r\n   */\r\n  @Input() nzxUploadButton?: string | TemplateRef<NzSafeAny>;\r\n  /**\r\n   * 上传的提示信息\r\n   */\r\n  @Input() nzxHint?: string;\r\n  /**\r\n   * 是否显示上传按钮, 如果是nzType=\"drag\" 隐藏按钮\r\n   */\r\n  @Input() nzxShowUploadButtonIcon?: boolean;\r\n  /**\r\n   * 上传按钮的图标\r\n   */\r\n  @Input() nzxUploadButtonIcon = 'cloud-upload';\r\n  /**\r\n   * 错误信息映射\r\n   */\r\n  @Input() nzxValidateMessage?: { [validateKey: string]: string };\r\n  @Input() nzType: NzUploadType = 'select';\r\n  /**\r\n   * 上传的文件个数限制\r\n   */\r\n  @Input() nzLimit = 0;\r\n  /**\r\n   * 文件名重复验证\r\n   */\r\n  @Input() nzxFileNameDuplicate?: boolean;\r\n  /**\r\n   * 文件名长度\r\n   */\r\n  @Input() nzxFileNameLength?: number;\r\n  /**\r\n   * 文件大小,单位kb\r\n   */\r\n  @Input() nzSize = 0;\r\n  /**\r\n   * 总文件大小,单位kb\r\n   */\r\n  @Input() nzTotalSize?: number;\r\n  @Input() nzFileType?: string | string[];\r\n  @Input() nzAccept?: string | string[];\r\n  @Input() nzAction?: string | ((file: NzUploadFile) => string | Observable<string>);\r\n  @Input() nzDirectory = false;\r\n  @Input() nzOpenFileDialogOnClick = true;\r\n  /**\r\n   * 是否显示验证错误提示信息\r\n   */\r\n  @Input() nzxShowValidateMessage?: boolean;\r\n  @Input() nzBeforeUpload?: (\r\n    file: NzUploadFile,\r\n    fileList: NzUploadFile[],\r\n    error: FileValidateError | null\r\n  ) => boolean | Observable<boolean>;\r\n  _nzBeforeUpload?: (file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>;\r\n  @Input() nzCustomRequest?: (item: NzUploadXHRArgs) => Subscription;\r\n  @Input() nzData?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\r\n  @Input() nzFilter: UploadFilter[] = [];\r\n  @Input() nzDisabled?: boolean;\r\n  @Input() nzHeaders?: {} | ((file: NzUploadFile) => {} | Observable<{}>);\r\n  @Input() nzListType: NzUploadListType = 'text';\r\n  @Input() nzMultiple?: boolean;\r\n  @Input() nzName = 'file';\r\n  @Input() nzShowUploadList: boolean | NzShowUploadList = true;\r\n  @Input() nzShowButton = true;\r\n  @Input() nzWithCredentials?: boolean;\r\n  @Input() nzRemove?: (file: NzUploadFile) => boolean | Observable<boolean>;\r\n  @Input() nzPreview?: (file: NzUploadFile) => void;\r\n  @Input() nzPreviewFile?: (file: NzUploadFile) => Observable<string>;\r\n  @Input() nzPreviewIsImage?: (file: NzUploadFile) => boolean;\r\n  @Input() nzTransformFile?: (file: NzUploadFile) => NzUploadTransformFileType;\r\n  @Input() nzDownload?: (file: NzUploadFile) => void;\r\n  @Input() nzIconRender!: NzIconRenderTemplate | null;\r\n  @Input() nzFileListRender?: TemplateRef<void>;\r\n\r\n  @Output() readonly nzChange = new EventEmitter<NzUploadChangeParam>();\r\n  @Output() readonly nzFileListChange = new EventEmitter<NzUploadFile[]>();\r\n\r\n  readonly defaultValidateMessage: { [K: string]: string } = {\r\n    FILE_SIZE: '文件 \"{fileName}\" 大小不能超过{fileSize}',\r\n    FILE_TOTAL_SIZE: '总上传文件大小不能超过{totalSize}',\r\n    FILE_TYPE: '上传的文件格式只能是 \"{fileType}',\r\n    FILE_LIMIT: '最多允许上传{fileLimit}个文件',\r\n    FILE_NAME_LENGTH: '文件 \"{fileName}\" 名称长度不能大于{fileNameLength}个字符',\r\n    FILE_NAME_DUPLICATE: '已上传名称 \"{fileName}\" 相同的文件，不能重复上传'\r\n  };\r\n\r\n  get isTemplateUploadButton() {\r\n    return this.nzxUploadButton instanceof TemplateRef;\r\n  }\r\n\r\n  constructor(protected messageService: NzMessageService, protected bytesPipe: NzBytesPipe) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setDefaultFileFilter();\r\n    this.setNzBeforeUpload();\r\n  }\r\n\r\n  protected setDefaultFileFilter() {\r\n    const defaultFilter: UploadFilter = {\r\n      name: 'defaultFilter',\r\n      fn: (fileList: NzUploadFile[]) => {\r\n        let error: FileValidateError | null = null;\r\n        const allFiles = (this.nzFileList || []).concat(fileList);\r\n        const list = [];\r\n\r\n        for (const file of fileList) {\r\n          const err = this.beforeUploadValidator(file, allFiles);\r\n          if (!err) {\r\n            list.push(file);\r\n          } else if (!error || err.errorType === ErrorType.FILE_TOTAL_SIZE) {\r\n            error = err;\r\n          }\r\n        }\r\n\r\n        if (error && this.nzxShowValidateMessage !== false) {\r\n          this.messageService.error(error.message || '文件不合法，请重新选择');\r\n        }\r\n        return list;\r\n      }\r\n    };\r\n\r\n    if (!this.nzFilter) {\r\n      this.nzFilter = [defaultFilter];\r\n    }\r\n\r\n    if (!this.nzFilter.find(f => f.name === 'defaultFilter')) {\r\n      this.nzFilter.push(defaultFilter);\r\n    }\r\n  }\r\n\r\n  setNzBeforeUpload() {\r\n    this._nzBeforeUpload = this.getNzBeforeUpload();\r\n  }\r\n\r\n  onNzChange(evt: NzUploadChangeParam) {\r\n    this.onTouched();\r\n    if (evt.type === 'error') {\r\n      this.nzFileList = this.nzFileList.filter(f => !f.error);\r\n    }\r\n\r\n    if (evt.type === 'success' || evt.type === 'removed') {\r\n      this.onChange(evt.fileList);\r\n    }\r\n    this.nzChange.emit(evt);\r\n  }\r\n\r\n  writeValue(value: NzUploadFile[]): void {\r\n    this.nzFileList = value || [];\r\n  }\r\n\r\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (changes.nzFilter && !changes.nzFilter.isFirstChange()) {\r\n      this.setDefaultFileFilter();\r\n    }\r\n\r\n    if (changes.nzBeforeUpload && !changes.nzBeforeUpload.isFirstChange()) {\r\n      this.setNzBeforeUpload();\r\n    }\r\n  }\r\n\r\n  override setDisabledState(isDisabled: boolean) {\r\n    this.nzDisabled = isDisabled;\r\n  }\r\n\r\n  /**\r\n   * 重新包装zBeforeUpload\r\n   */\r\n  protected getNzBeforeUpload():\r\n    | ((file: NzUploadFile, fileList: NzUploadFile[]) => boolean | Observable<boolean>)\r\n    | undefined {\r\n    if (this.nzBeforeUpload) {\r\n      return (file, fileList) => this.nzBeforeUpload!(file, fileList, this.beforeUploadValidator(file, fileList));\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 文件验证\r\n   * @param file 当前文件\r\n   * @param fileList 文件列表\r\n   * @protected\r\n   */\r\n  protected beforeUploadValidator(file: NzUploadFile, fileList: NzUploadFile[]): FileValidateError | null {\r\n    const messages = Object.assign({}, this.defaultValidateMessage, this.nzxValidateMessage);\r\n\r\n    // 文件类型\r\n    if (this.nzFileType != null) {\r\n      const nzFileTypes = typeof this.nzFileType === 'string' ? [this.nzFileType] : this.nzFileType;\r\n      if (nzFileTypes.length > 0 && !nzFileTypes.includes(file.type!)) {\r\n        return this.getError(ErrorType.FILE_TYPE, file, messages, { fileType: this.nzFileType });\r\n      }\r\n    }\r\n\r\n    // 单个文件大小\r\n    if (this.nzSize != null && this.nzSize > 0 && (file.size || 0) / 1024 > this.nzSize) {\r\n      return this.getError(ErrorType.FILE_SIZE, file, messages, {\r\n        fileSize: this.bytesPipe.transform(this.nzSize, 2, 'kB'),\r\n        fileName: file.name\r\n      });\r\n    }\r\n\r\n    // 文件名长度\r\n    if (this.nzxFileNameLength && file.name.length > this.nzxFileNameLength) {\r\n      return this.getError(ErrorType.FILE_NAME_LENGTH, file, messages, {\r\n        fileNameLength: this.nzxFileNameLength,\r\n        fileName: file.name\r\n      });\r\n    }\r\n\r\n    // 文件名重复\r\n    if (this.nzxFileNameDuplicate === false && fileList.filter(f => f !== file).find(it => it.name === file.name)) {\r\n      return this.getError(ErrorType.FILE_NAME_DUPLICATE, file, messages, { fileName: file.name });\r\n    }\r\n\r\n    // 最大上传个数\r\n    if (this.nzLimit && fileList.length > this.nzLimit) {\r\n      return this.getError(ErrorType.FILE_LIMIT, file, messages, { fileLimit: this.nzLimit });\r\n    }\r\n\r\n    // 总文件大小\r\n    if (this.nzTotalSize && fileList.reduce((prev, curr) => (prev += curr.size || 0), 0) / 1024 > this.nzTotalSize) {\r\n      return this.getError(ErrorType.FILE_TOTAL_SIZE, file, messages, {\r\n        totalSize: this.bytesPipe.transform(this.nzTotalSize, 2, 'kB')\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 显示文件验证错误\r\n   * @param file 当前文件\r\n   * @param fileList 文件列表\r\n   * @param showValidateMessage 是否显示\r\n   * @private\r\n   */\r\n  private showFileErrorMessage(\r\n    file: NzUploadFile,\r\n    fileList: NzUploadFile[],\r\n    showValidateMessage?: boolean\r\n  ): FileValidateError | null {\r\n    const error = this.beforeUploadValidator(file, fileList);\r\n    if (error && showValidateMessage !== false) {\r\n      this.messageService.error(error.message || '文件不合法');\r\n    }\r\n    return error;\r\n  }\r\n\r\n  private getError(\r\n    errorType: ErrorType,\r\n    file: NzUploadFile,\r\n    messages: { [K: string]: string },\r\n    fmtData?: Record<string, NzSafeAny>\r\n  ): FileValidateError {\r\n    return {\r\n      errorType,\r\n      file,\r\n      message: Utils.format(messages[errorType], fmtData)\r\n    };\r\n  }\r\n}\r\n\r\nexport interface FileValidateError {\r\n  /**\r\n   * 验证错误类型\r\n   */\r\n  errorType: ErrorType;\r\n  /**\r\n   * 错误信息\r\n   */\r\n  message: string;\r\n  /**\r\n   * 错误的文件\r\n   */\r\n  file: NzUploadFile;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bytesPipe",
                        "type": "NzBytesPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 153,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bytesPipe",
                        "type": "NzBytesPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControl",
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "isTemplateUploadButton": {
                    "name": "isTemplateUploadButton",
                    "getSignature": {
                        "name": "isTemplateUploadButton",
                        "type": "",
                        "returnType": "",
                        "line": 151
                    }
                }
            },
            "templateData": "<nz-upload\r\n  [nzType]=\"nzType\"\r\n  [nzAccept]=\"nzAccept\"\r\n  [nzAction]=\"nzAction\"\r\n  [nzDirectory]=\"nzDirectory\"\r\n  [nzOpenFileDialogOnClick]=\"nzOpenFileDialogOnClick\"\r\n  [nzBeforeUpload]=\"_nzBeforeUpload\"\r\n  [nzCustomRequest]=\"nzCustomRequest\"\r\n  [nzData]=\"nzData\"\r\n  [nzFilter]=\"nzFilter\"\r\n  [(nzFileList)]=\"nzFileList\"\r\n  [nzDisabled]=\"nzDisabled\"\r\n  [nzHeaders]=\"nzHeaders\"\r\n  [nzListType]=\"nzListType\"\r\n  [nzMultiple]=\"nzMultiple\"\r\n  [nzName]=\"nzName\"\r\n  [nzShowUploadList]=\"nzShowUploadList\"\r\n  [nzShowButton]=\"nzShowButton\"\r\n  [nzWithCredentials]=\"nzWithCredentials\"\r\n  [nzRemove]=\"nzRemove\"\r\n  [nzPreview]=\"nzPreview\"\r\n  [nzPreviewFile]=\"nzPreviewFile\"\r\n  [nzPreviewIsImage]=\"nzPreviewIsImage\"\r\n  [nzTransformFile]=\"nzTransformFile\"\r\n  [nzDownload]=\"nzDownload\"\r\n  [nzIconRender]=\"nzIconRender\"\r\n  [nzFileListRender]=\"nzFileListRender\"\r\n  (nzChange)=\"onNzChange($event)\"\r\n  (nzFileListChange)=\"nzFileListChange.emit($event)\"\r\n>\r\n  <ng-container *nzStringTemplateOutlet=\"nzxUploadButton; context: { $implicit: this, nzFileList: nzFileList }\">\r\n    <button nz-button [disabled]=\"nzDisabled\" type=\"button\" *ngIf=\"nzType === 'select' && nzxShowUploadButtonIcon !== false\">\r\n      <i *ngIf=\"nzxUploadButtonIcon\" nz-icon [nzType]=\"nzxUploadButtonIcon\"></i>\r\n      {{ nzxUploadButton || '上传' }}\r\n    </button>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"nzType === 'drag'\">\r\n    <p class=\"ant-upload-drag-icon\">\r\n      <i *ngIf=\"nzxUploadButtonIcon\" nz-icon [nzType]=\"nzxUploadButtonIcon\"></i>\r\n    </p>\r\n    <p class=\"ant-upload-text\">点击或拖拽上传文件</p>\r\n    <p class=\"ant-upload-hint\">{{ nzxHint }}</p>\r\n  </ng-container>\r\n</nz-upload>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-99df40d19a09ae73372074ef4cc9e08950a3a01a8174e61e71b46e5551049706293c65bf74cd791d670665188813f8a78153671919f70be81215bd8a0a35c6bf-1",
            "file": "lib/layout-page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-page",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'nzx-page',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    '[class.nzx-page]': 'true'\r\n  }\r\n})\r\nexport class PageComponent {\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageComponent-1"
        },
        {
            "name": "RepeatComponent",
            "id": "component-RepeatComponent-b288c37f76dee6f1645442ae541aa3697c5074dcd6fb6f355379aa4531381efb90d5783b218b874a2df78e3e5993f669128a21d9fcc5c62ce1adb73456121483",
            "file": "lib/repeat/repeat.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-repeat",
            "styleUrls": [
                "./repeat.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./repeat.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'nzx-repeat',\r\n  templateUrl: './repeat.component.html',\r\n  styleUrls: ['./repeat.component.less']\r\n})\r\nexport class RepeatComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./repeat.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>repeat works!</p>\r\n"
        },
        {
            "name": "TableHeaderComponent",
            "id": "component-TableHeaderComponent-fd2d108ccaf4e08bfd3787cac449195430e0f051a2ec71c83cdf163aa0406347b6b4ee9c057a6626b339492d9204de0ed3b454483d3bea882a8c094ef7823331",
            "file": "lib/table/header/table-header/table-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nzx-table-header",
            "styleUrls": [],
            "styles": [
                ":host{display: block}"
            ],
            "templateUrl": [
                "./table-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n是否显示操作按钮小图标\n",
                    "description": "<p>是否显示操作按钮小图标</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tableSize",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "NzTableSize",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "reloadClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "tableSizeChange",
                    "defaultValue": "new EventEmitter<NzTableSize>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tableSizeOptions",
                    "defaultValue": "[\r\n    { sizeName: '大号', selected: false, value: 'default' },\r\n    { sizeName: '中等', selected: false, value: 'middle' },\r\n    { sizeName: '紧凑', selected: true, value: 'small' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { NzTableSize } from 'ng-zorro-antd/table';\r\n\r\n@Component({\r\n  selector: 'nzx-table-header',\r\n  templateUrl: './table-header.component.html',\r\n  styles: [':host{display: block}'],\r\n  preserveWhitespaces: false,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableHeaderComponent implements OnInit, OnChanges {\r\n  @Input() tableSize: NzTableSize = 'small';\r\n  /**\r\n   * 是否显示操作按钮小图标\r\n   */\r\n  @Input() actionVisible?: boolean;\r\n\r\n  @Output() tableSizeChange = new EventEmitter<NzTableSize>();\r\n  @Output() reloadClick = new EventEmitter<void>();\r\n\r\n  readonly tableSizeOptions = [\r\n    { sizeName: '大号', selected: false, value: 'default' },\r\n    { sizeName: '中等', selected: false, value: 'middle' },\r\n    { sizeName: '紧凑', selected: true, value: 'small' }\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.tableSizeOptions.forEach(v => {\r\n      if (v.value === this.tableSize) {\r\n        v.selected = true;\r\n      } else {\r\n        v.selected = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: { [K in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n    if (changes.tableSize && !changes.tableSize.isFirstChange()) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host{display: block}\n",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"nzx-table__header\">\r\n  <div class=\"nzx-table__title\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <div class=\"nzx-table__toolbar\">\r\n    <ng-content select=\"[toolbar]\"></ng-content>\r\n    <ng-container *ngIf=\"actionVisible !== false\">\r\n      <i\r\n        (click.once)=\"reloadClick.emit()\"\r\n        nz-icon\r\n        nzType=\"reload\"\r\n        nzTheme=\"outline\"\r\n        nz-tooltip\r\n        nzTooltipTitle=\"刷新\"\r\n        tabindex=\"-1\"\r\n      ></i>\r\n      <i\r\n        nzTrigger=\"click\"\r\n        nz-dropdown\r\n        [nzDropdownMenu]=\"tableSizeMenu\"\r\n        nz-icon\r\n        nzType=\"column-height\"\r\n        nzTheme=\"outline\"\r\n        nz-tooltip\r\n        tabindex=\"-1\"\r\n        nzTooltipTitle=\"密度\"\r\n      ></i>\r\n\r\n      <ng-content select=\"[setting]\"></ng-content>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<nz-dropdown-menu #tableSizeMenu>\r\n  <ul nz-menu>\r\n    <li\r\n      nz-menu-item\r\n      (click)=\"item.value !== tableSize && tableSizeChange.emit(item.value)\"\r\n      [nzSelected]=\"item.selected\"\r\n      *ngFor=\"let item of tableSizeOptions\"\r\n    >\r\n      <span>{{ item.sizeName }}</span>\r\n    </li>\r\n  </ul>\r\n</nz-dropdown-menu>\r\n"
        }
    ],
    "modules": [
        {
            "name": "BetweenDatetimeModule",
            "id": "module-BetweenDatetimeModule-7e119e6a12dc86d88eb5a86695e395811d60682ba98730ce7e4e602736b5407614377872111d21208c98d4ac6aba7f7c6bd1ee4cfe0ed55cc361e313df88b061",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/between-datetime/between-datetime.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BetweenDatetimeComponent } from './between-datetime.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NzDatePickerModule } from 'ng-zorro-antd/date-picker';\r\nimport { NzxBetweenModule } from '@xmagic/nzx-antd/between'\r\n\r\n@NgModule({\r\n  declarations: [BetweenDatetimeComponent],\r\n  imports: [CommonModule, FormsModule, NzxBetweenModule, NzDatePickerModule],\r\n  exports: [BetweenDatetimeComponent]\r\n})\r\nexport class BetweenDatetimeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BetweenDatetimeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NzxBetweenModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BetweenDatetimeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BetweenTimeModule",
            "id": "module-BetweenTimeModule-b694a4647a87136f1f25d3100ca112ac16f3241e9099d4a9def8df80abc79ca5dd172f665e1eb2c7c493d3a2518700bccc8978f879592dd2591b0a10f0d85909",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/between-time/between-time.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BetweenTimeComponent } from './between-time.component';\r\nimport { NzTimePickerModule } from 'ng-zorro-antd/time-picker';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NzxBetweenModule } from '@xmagic/nzx-antd/between'\r\n\r\n@NgModule({\r\n  declarations: [BetweenTimeComponent],\r\n  imports: [CommonModule, NzTimePickerModule, FormsModule, NzxBetweenModule],\r\n  exports: [BetweenTimeComponent]\r\n})\r\nexport class BetweenTimeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BetweenTimeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NzxBetweenModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BetweenTimeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutPageModule",
            "id": "module-LayoutPageModule-fc38c93e1f544bb68e063660ceb836dd679f6e2980e31776f72780dd4d3b365634cbef034fd653d94bf428eac52f5311d5ad11ee3bfd28f4346d4bb4e88365ee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/layout-page/layout-page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContentComponent } from './content.component';\r\nimport { PageComponent } from './page.component';\r\nimport { HeaderComponent } from './header.component';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\n\r\nconst COMPONENTS = [ContentComponent, PageComponent, HeaderComponent];\r\n\r\n@NgModule({\r\n  declarations: [COMPONENTS],\r\n  imports: [CommonModule, ObserversModule],\r\n  exports: [COMPONENTS]\r\n})\r\nexport class LayoutPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxBetweenInputModule",
            "id": "module-NzxBetweenInputModule-67c917cee7ce51b532bacdadf8252ea8a1080ac7f8223f7592e71208bd67486938da04382b9d750ed90ba1916dce3a9bd6cb4f7ff0d93e7237179a9b589ae380",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/between-input/between-input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzxBetweenInputComponent } from './between-input.component';\r\nimport { NzInputModule } from 'ng-zorro-antd/input';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NzInputNumberModule } from 'ng-zorro-antd/input-number';\r\nimport { NzxBetweenModule } from '@xmagic/nzx-antd/between';\r\n\r\n@NgModule({\r\n  declarations: [NzxBetweenInputComponent],\r\n  imports: [CommonModule, FormsModule, NzxBetweenModule, NzInputModule, NzInputNumberModule],\r\n  exports: [NzxBetweenInputComponent]\r\n})\r\nexport class NzxBetweenInputModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NzxBetweenInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NzxBetweenModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NzxBetweenInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxBetweenModule",
            "id": "module-NzxBetweenModule-3d485e4a136317cb726fe529ab36aa2fb1a8f6e6e18e32f65872aa5c706c49c4994a367bce1d0f946eb43130acf535b1a908c6165f95893f8248bed1784de4a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/between/between.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzxBetweenComponent } from './between.component';\r\nimport { NzInputModule } from 'ng-zorro-antd/input';\r\n\r\n@NgModule({\r\n  declarations: [NzxBetweenComponent],\r\n  imports: [CommonModule, NzInputModule],\r\n  exports: [NzxBetweenComponent]\r\n})\r\nexport class NzxBetweenModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NzxBetweenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NzxBetweenComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxCheckboxModule",
            "id": "module-NzxCheckboxModule-f3bfd3fcd228e6b2b31db805438d4c8c40cde556ec515c274b9a9b260913911bb0c5e0a797e816859b3636c550e02655bbca61ec131ed05ea9539d76f058d5f6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NzxCheckboxComponent } from './checkbox.component';\r\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\r\n\r\n@NgModule({\r\n  declarations: [NzxCheckboxComponent],\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, NzCheckboxModule, NzOutletModule],\r\n  exports: [NzxCheckboxComponent]\r\n})\r\nexport class NzxCheckboxModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NzxCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NzxCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxDirectiveModule",
            "id": "module-NzxDirectiveModule-7ab95f2d48e1043991b3bb0b1000c31aabb0f4912b5d9052374aa3d36ee0fb098053da13fbbab3eeecc594b7d16f60bb57c8373b054fed7c64c3c214e6d6abb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/directive/directive.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NamedTemplate } from './named-template';\r\nimport { ClickOnceDirective } from './click.once.directive';\r\nimport { FaIconDirective } from './fa-icon.directive';\r\nimport { ClickOutsideDirective } from './click-outside.directive';\r\nimport { LetDirective } from './let.directive';\r\nimport { DownFileDirective } from './down-file.directive';\r\nimport { AuthDirective } from './auth.directive';\r\nimport { AuthNotDirective } from './auth.not.directive';\r\nimport { NzxServiceModule } from '@xmagic/nzx-antd/service';\r\n\r\nconst DIRECTIVE = [\r\n  NamedTemplate,\r\n  ClickOnceDirective,\r\n  FaIconDirective,\r\n  ClickOutsideDirective,\r\n  LetDirective,\r\n  DownFileDirective,\r\n  AuthDirective,\r\n  AuthNotDirective\r\n];\r\n@NgModule({\r\n  declarations: [DIRECTIVE],\r\n  imports: [CommonModule, NzxServiceModule],\r\n  exports: [DIRECTIVE]\r\n})\r\nexport class NzxDirectiveModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthDirective"
                        },
                        {
                            "name": "AuthNotDirective"
                        },
                        {
                            "name": "ClickOnceDirective"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "DownFileDirective"
                        },
                        {
                            "name": "FaIconDirective"
                        },
                        {
                            "name": "LetDirective"
                        },
                        {
                            "name": "NamedTemplate"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NzxServiceModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthDirective"
                        },
                        {
                            "name": "AuthNotDirective"
                        },
                        {
                            "name": "ClickOnceDirective"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "DownFileDirective"
                        },
                        {
                            "name": "FaIconDirective"
                        },
                        {
                            "name": "LetDirective"
                        },
                        {
                            "name": "NamedTemplate"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxHttpInterceptorModule",
            "id": "module-NzxHttpInterceptorModule-23c0dcbf66028eccea6aaef741b03c385c7dd93a3c93e8f4eb7757e8238199fedb2a7cdb635bbbe4bbb2ab4da712366787101f649bb2ccb644441ec6c7171e80",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/http-interceptor/http-interceptor.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { HttpBackend, HttpClientModule } from '@angular/common/http';\r\nimport { httpInterceptors } from './http-interceptor.config';\r\nimport { AsyncHttpXhrBackend } from './xhr';\r\n\r\n@NgModule({\r\n  imports: [HttpClientModule],\r\n  providers: [httpInterceptors, AsyncHttpXhrBackend, { provide: HttpBackend, useExisting: AsyncHttpXhrBackend }]\r\n})\r\nexport class NzxHttpInterceptorModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AsyncHttpXhrBackend"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxModalModule",
            "id": "module-NzxModalModule-f5771333b9362b7542449cf51a07d1ffb599e602b31cf3378b80c4f078cda28803873c3b9c893b30cb2bb15128c00ecc1295643c7945722c59b6929b39c63ed8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/modal/modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { NzModalWrapService } from './nz-modal-wrap.service';\r\nimport { NzModalModule } from 'ng-zorro-antd/modal';\r\nimport { ModalDragDirective } from './modal-drag.directive';\r\nimport { ModalDragService } from './modal-drag.service';\r\n\r\n@NgModule({\r\n  declarations: [ModalDragDirective],\r\n  imports: [NzModalModule],\r\n  exports: [ModalDragDirective],\r\n  providers: [NzModalWrapService, ModalDragService]\r\n})\r\nexport class NzxModalModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ModalDragService"
                        },
                        {
                            "name": "NzModalWrapService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalDragDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ModalDragDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxPipeModule",
            "id": "module-NzxPipeModule-d30d78db27d936416100db8508fe8a18f4c06fe28945116fdb4d184664cad99fa70c1365bbb874fd5d930de7f180de9f9a3a261e2f38862308aed7cca4a0cfdc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/pipe/pipe.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MathPipe } from './math.pipe';\r\nimport { DefaultifyPipe } from './defaultify.pipe';\r\nimport { TrustHtmlPipe, TrustScriptPipe, TrustStylePipe, TrustUrlPipe } from './trust-resource.pipe';\r\nimport { TimeUnitPipe } from './time-unit.pipe';\r\nimport { ToAsyncPipe } from './to-async.pipe';\r\nimport { FilterPipe } from './filter.pipe';\r\n\r\nconst PIPE = [\r\n  MathPipe,\r\n  DefaultifyPipe,\r\n  TrustUrlPipe,\r\n  TrustHtmlPipe,\r\n  TrustScriptPipe,\r\n  TrustStylePipe,\r\n  TimeUnitPipe,\r\n  ToAsyncPipe,\r\n  FilterPipe\r\n];\r\n@NgModule({\r\n  declarations: [PIPE],\r\n  imports: [CommonModule],\r\n  exports: [PIPE]\r\n})\r\nexport class NzxPipeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultifyPipe"
                        },
                        {
                            "name": "FilterPipe"
                        },
                        {
                            "name": "MathPipe"
                        },
                        {
                            "name": "TimeUnitPipe"
                        },
                        {
                            "name": "ToAsyncPipe"
                        },
                        {
                            "name": "TrustHtmlPipe"
                        },
                        {
                            "name": "TrustScriptPipe"
                        },
                        {
                            "name": "TrustStylePipe"
                        },
                        {
                            "name": "TrustUrlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultifyPipe"
                        },
                        {
                            "name": "FilterPipe"
                        },
                        {
                            "name": "MathPipe"
                        },
                        {
                            "name": "TimeUnitPipe"
                        },
                        {
                            "name": "ToAsyncPipe"
                        },
                        {
                            "name": "TrustHtmlPipe"
                        },
                        {
                            "name": "TrustScriptPipe"
                        },
                        {
                            "name": "TrustStylePipe"
                        },
                        {
                            "name": "TrustUrlPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxServiceModule",
            "id": "module-NzxServiceModule-906c3a896b1bcf14b3774ca6a938b1a45a2d22cf1b0247f0d6fa1d50dc15078ac5d0f04fa00606e3b595d87e6017c4d2d36fe311471dfbe4ea7ef082c65553f1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/service/service.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FetcherService } from './fetcher.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DownloadService } from './download.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [FetcherService, DownloadService]\r\n})\r\nexport class NzxServiceModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DownloadService"
                        },
                        {
                            "name": "FetcherService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxSwitchModule",
            "id": "module-NzxSwitchModule-5c205969956bff3d90a1df93bf863fb6796dd37cd3dc182c913234efbc320f1db4b12970a6828e61848e59ab8e5d32dde2459d9fe98dc5bbbdeb7393a78cb1f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzxSwitchComponent } from './switch.component';\r\nimport { NzSwitchModule } from 'ng-zorro-antd/switch';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [NzxSwitchComponent],\r\n  imports: [CommonModule, FormsModule, NzSwitchModule],\r\n  exports: [NzxSwitchComponent]\r\n})\r\nexport class NzxSwitchModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NzxSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NzxSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxTableModule",
            "id": "module-NzxTableModule-0009ba611237820fc03ef2f00cfd36fa062d95cdb92515e54d946fea679b32ae851e9d9984877a739181331a0dae2c1e938bd4c34e74a47995c0ebd224006233",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzTableModule } from 'ng-zorro-antd/table';\r\nimport { NzxTableComponent } from './table.component';\r\nimport { TableHeaderComponent } from './header/table-header/table-header.component';\r\nimport { ColumnSettingComponent } from './header/column-setting/column-setting.component';\r\nimport { NzResizableModule } from 'ng-zorro-antd/resizable';\r\nimport { NzxDirectiveModule } from '@xmagic/nzx-antd/directive';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\nimport { NzPopoverModule } from 'ng-zorro-antd/popover';\r\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { NzDividerModule } from 'ng-zorro-antd/divider';\r\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\r\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\r\nimport { NzxPipeModule } from '@xmagic/nzx-antd/pipe';\r\nimport { NzxServiceModule } from '@xmagic/nzx-antd/service';\r\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\r\nimport { NzButtonModule } from 'ng-zorro-antd/button';\r\n\r\nconst COMPONENT = [NzxTableComponent, TableHeaderComponent, ColumnSettingComponent];\r\n@NgModule({\r\n  declarations: [COMPONENT],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NzTableModule,\r\n    NzResizableModule,\r\n    NzIconModule,\r\n    NzPopoverModule,\r\n    NzCheckboxModule,\r\n    DragDropModule,\r\n    NzDividerModule,\r\n    NzDropDownModule,\r\n    NzToolTipModule,\r\n    NzxDirectiveModule,\r\n    NzxPipeModule,\r\n    NzxServiceModule,\r\n    NzOutletModule,\r\n    NzButtonModule\r\n  ],\r\n  exports: [COMPONENT]\r\n})\r\nexport class NzxTableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColumnSettingComponent"
                        },
                        {
                            "name": "NzxTableComponent"
                        },
                        {
                            "name": "TableHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NzxDirectiveModule"
                        },
                        {
                            "name": "NzxServiceModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColumnSettingComponent"
                        },
                        {
                            "name": "NzxTableComponent"
                        },
                        {
                            "name": "TableHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NzxUploadModule",
            "id": "module-NzxUploadModule-3f27565e179000bb370210a1660033926b32f2ea79587b71ff87bd8d1ed6a6276e7a562c8d90463238e2b3094f4f8e465101a2fd36815a1bf54fb5253f745b0d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/upload/upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzxUploadComponent } from './upload.component';\r\nimport { NzUploadModule } from 'ng-zorro-antd/upload';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NzButtonModule } from 'ng-zorro-antd/button';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\nimport { NzMessageModule } from 'ng-zorro-antd/message';\r\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\r\n\r\nconst COMPONENT = [NzxUploadComponent];\r\n\r\n@NgModule({\r\n  declarations: [COMPONENT],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NzUploadModule,\r\n    NzMessageModule,\r\n    NzButtonModule,\r\n    NzIconModule,\r\n    NzOutletModule\r\n  ],\r\n  exports: [COMPONENT]\r\n})\r\nexport class NzxUploadModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColumnSettingComponent"
                        },
                        {
                            "name": "NzxTableComponent"
                        },
                        {
                            "name": "TableHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColumnSettingComponent"
                        },
                        {
                            "name": "NzxTableComponent"
                        },
                        {
                            "name": "TableHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RepeatModule",
            "id": "module-RepeatModule-76081bd878129c8a194adba14312ae51ba35c373b6ddcf84457299e509cb2bbe5cdbe0efd6718891c33fef9fe51921e9fcb29023ffc256ff594b3fea883bfad6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "lib/repeat/repeat.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RepeatComponent } from './repeat.component';\r\n\r\n@NgModule({\r\n  declarations: [RepeatComponent],\r\n  imports: [CommonModule],\r\n  exports: [RepeatComponent]\r\n})\r\nexport class RepeatModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RepeatComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RepeatComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "COMPONENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/table/table.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[NzxTableComponent, TableHeaderComponent, ColumnSettingComponent]"
            },
            {
                "name": "COMPONENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/upload/upload.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[NzxUploadComponent]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/layout-page/layout-page.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ContentComponent, PageComponent, HeaderComponent]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_RESPONSE_SETTING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/nzx-antd.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResponseSetting",
                "defaultValue": "{\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n}",
                "rawdescription": "默认配置",
                "description": "<p>默认配置</p>\n"
            },
            {
                "name": "defineProperty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/util/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.defineProperty"
            },
            {
                "name": "DIRECTIVE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/directive/directive.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  NamedTemplate,\r\n  ClickOnceDirective,\r\n  FaIconDirective,\r\n  ClickOutsideDirective,\r\n  LetDirective,\r\n  DownFileDirective,\r\n  AuthDirective,\r\n  AuthNotDirective\r\n]"
            },
            {
                "name": "FETCH_SETTING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/table/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FetchSetting",
                "defaultValue": "{\r\n  pageIndexField: 'pageIndex',\r\n  pageSizeField: 'pageSize',\r\n  listField: 'list',\r\n  totalField: 'total',\r\n  method: 'post',\r\n  responseType: 'json'\r\n}"
            },
            {
                "name": "FormUtils",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/util/form-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormUtilsClass()"
            },
            {
                "name": "gOPD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/util/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.getOwnPropertyDescriptor"
            },
            {
                "name": "hasOwn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/util/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.prototype.hasOwnProperty"
            },
            {
                "name": "HttpDefaultCodec",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/http-interceptor/http-default-encoder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpParameterCodec",
                "defaultValue": "{\r\n  decodeKey: (key: string): string => {\r\n    return key;\r\n  },\r\n\r\n  decodeValue(value: string): string {\r\n    return value;\r\n  },\r\n\r\n  encodeKey(key: string): string {\r\n    return key;\r\n  },\r\n\r\n  encodeValue(value: string): string {\r\n    return value;\r\n  }\r\n}"
            },
            {
                "name": "httpInterceptors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/http-interceptor/http-interceptor.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpLoadingInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpUrlInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpHeaderInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpParamsInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpCustomServerErrorInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpResponseParseInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\r\n]",
                "rawdescription": "注意，中间件是有序的，谨慎调整下列中间件的顺序",
                "description": "<p>注意，中间件是有序的，谨慎调整下列中间件的顺序</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LOADING_ENABLED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/service/fetcher.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpContextToken<boolean>(() => true)",
                "rawdescription": "是否启用loading",
                "description": "<p>是否启用loading</p>\n"
            },
            {
                "name": "loadingService",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/service/loading.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new LoadingService()"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PIPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/pipe/pipe.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MathPipe,\r\n  DefaultifyPipe,\r\n  TrustUrlPipe,\r\n  TrustHtmlPipe,\r\n  TrustScriptPipe,\r\n  TrustStylePipe,\r\n  TimeUnitPipe,\r\n  ToAsyncPipe,\r\n  FilterPipe\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SYNCED_ENABLED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/service/fetcher.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpContextToken<boolean>(() => false)",
                "rawdescription": "启用同步请求",
                "description": "<p>启用同步请求</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "toStr",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/util/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.prototype.toString"
            },
            {
                "name": "Utils",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/util/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new UtilsClass()"
            },
            {
                "name": "XSSI_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "lib/http-interceptor/xhr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^\\)]}',?\\n/"
            }
        ],
        "functions": [
            {
                "name": "assertTemplate",
                "file": "lib/directive/auth.directive.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEndDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEndMonthDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEndWeekDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEndYearDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRealDateTime",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>获取Datetime 真实值</p>\n",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "disabledDateType",
                        "type": "DisabledDateType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Date | null | undefined",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1899,
                            "end": 1903,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "date"
                        },
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1893,
                            "end": 1898,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>,</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1916,
                            "end": 1932,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "disabledDateType"
                        },
                        "type": "DisabledDateType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 1910,
                            "end": 1915,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "getResponseUrl",
                "file": "lib/http-interceptor/xhr.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Determine an appropriate URL for the response, by checking either\nXMLHttpRequest.responseURL or the X-Request-URL header.</p>\n",
                "args": [
                    {
                        "name": "xhr",
                        "type": "NzSafeAny",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string | null",
                "jsdoctags": [
                    {
                        "name": "xhr",
                        "type": "NzSafeAny",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getStartDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getStartMonthDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getStartWeekDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getStartYearDate",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTimeValue",
                "file": "lib/between-datetime/datetime-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isContentEmpty",
                "file": "lib/layout-page/is-content-empty.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>用于校验 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 是否为空，自定义组件时蛮有用。</p>\n",
                "args": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "synced",
                "file": "lib/service/fetcher.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>模板字符串函数, 构造同步请求URL</p>\n",
                "args": [
                    {
                        "name": "url",
                        "type": "TemplateStringsArray",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "TemplateStringsArray",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "tagName": {
                            "pos": 432,
                            "end": 439,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "example"
                        },
                        "comment": "<p>let value!: string;\nthis.http.get<string>(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res =&gt; (value = res));\nconsole.log(value);</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AsyncOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "lib/pipe/to-async.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>异步请求信息</p>\n",
                "kind": 187
            },
            {
                "name": "AuthGuardFnType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "lib/service/auth-guard.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>权限路由守卫 使用函数处理</p>\n",
                "kind": 178
            },
            {
                "name": "AuthGuardType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AuthGuardFnType | T",
                "file": "lib/service/auth-guard.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>权限路由守卫配置</p>\n",
                "kind": 186
            },
            {
                "name": "CellSpanArgType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "lib/table/table.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CellSpanType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "lib/table/table.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>合并单元格参数类型</p>\n",
                "kind": 178
            },
            {
                "name": "DatetimeValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | Date | null>",
                "file": "lib/between-datetime/datetime-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "DisabledDateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Date | null | ",
                "file": "lib/between-datetime/datetime-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DownloadOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "lib/service/download.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>下载文件配置信息</p>\n",
                "kind": 187
            },
            {
                "name": "FetchParams",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | Promise<T> | T",
                "file": "lib/service/fetcher.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>请求参数</p>\n",
                "kind": 186
            },
            {
                "name": "FetchValidatorParams",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | Promise<T> | T",
                "file": "lib/service/fetcher.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>验证器请求参数</p>\n",
                "kind": 186
            },
            {
                "name": "FilterMatcherFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "lib/pipe/filter.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "IconSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"lg\" | \"sm\" | \"1x\" | \"2x\" | \"3x\" | \"4x\" | \"5x\" | \"6x\" | \"7x\" | \"8x\" | \"9x\" | \"10x\"",
                "file": "lib/directive/fa-icon.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "InputValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | string | number | null> | null",
                "file": "lib/between-input/between-input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Method",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"get\" | \"GET\" | \"delete\" | \"DELETE\" | \"head\" | \"HEAD\" | \"options\" | \"OPTIONS\" | \"post\" | \"POST\" | \"put\" | \"PUT\" | \"patch\" | \"PATCH\" | \"purge\" | \"PURGE\" | \"link\" | \"LINK\" | \"unlink\" | \"UNLINK\"",
                "file": "lib/service/fetcher.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "NzxClassType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | string[] | Set<string> | literal type",
                "file": "lib/table/table.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "NzxStyleType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type | null",
                "file": "lib/table/table.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "OptionItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<NzxCheckboxOption | \"indeterminate\" | \"ngModelChange\">",
                "file": "lib/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "TreeChildren",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "lib/util/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ValidatorOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "lib/service/fetcher.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>远程验证器配置</p>\n",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "ErrorType",
                "childs": [
                    {
                        "name": "FILE_SIZE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE_SIZE"
                    },
                    {
                        "name": "FILE_TOTAL_SIZE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE_TOTAL_SIZE"
                    },
                    {
                        "name": "FILE_TYPE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE_TYPE"
                    },
                    {
                        "name": "FILE_LIMIT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE_LIMIT"
                    },
                    {
                        "name": "FILE_NAME_LENGTH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE_NAME_LENGTH"
                    },
                    {
                        "name": "FILE_NAME_DUPLICATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE_NAME_DUPLICATE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "lib/upload/upload.component.ts"
            }
        ],
        "groupedVariables": {
            "lib/table/table.module.ts": [
                {
                    "name": "COMPONENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/table/table.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[NzxTableComponent, TableHeaderComponent, ColumnSettingComponent]"
                }
            ],
            "lib/upload/upload.module.ts": [
                {
                    "name": "COMPONENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/upload/upload.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[NzxUploadComponent]"
                }
            ],
            "lib/layout-page/layout-page.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/layout-page/layout-page.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ContentComponent, PageComponent, HeaderComponent]"
                }
            ],
            "lib/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "lib/nzx-antd.service.ts": [
                {
                    "name": "DEFAULT_RESPONSE_SETTING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/nzx-antd.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseSetting",
                    "defaultValue": "{\r\n  code: 'code',\r\n  message: 'message',\r\n  data: 'result',\r\n  // tslint:disable-next-line:triple-equals\r\n  success: response => response.body.code == 200,\r\n  // tslint:disable-next-line:triple-equals\r\n  timeout: error => error.code == 401,\r\n  forceLogout: () => false,\r\n  defaultError: error => error.code < 1024\r\n}",
                    "rawdescription": "默认配置",
                    "description": "<p>默认配置</p>\n"
                }
            ],
            "lib/util/utils.ts": [
                {
                    "name": "defineProperty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/util/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.defineProperty"
                },
                {
                    "name": "gOPD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/util/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.getOwnPropertyDescriptor"
                },
                {
                    "name": "hasOwn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/util/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.prototype.hasOwnProperty"
                },
                {
                    "name": "toStr",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/util/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.prototype.toString"
                },
                {
                    "name": "Utils",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/util/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new UtilsClass()"
                }
            ],
            "lib/directive/directive.module.ts": [
                {
                    "name": "DIRECTIVE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/directive/directive.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  NamedTemplate,\r\n  ClickOnceDirective,\r\n  FaIconDirective,\r\n  ClickOutsideDirective,\r\n  LetDirective,\r\n  DownFileDirective,\r\n  AuthDirective,\r\n  AuthNotDirective\r\n]"
                }
            ],
            "lib/table/const.ts": [
                {
                    "name": "FETCH_SETTING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/table/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FetchSetting",
                    "defaultValue": "{\r\n  pageIndexField: 'pageIndex',\r\n  pageSizeField: 'pageSize',\r\n  listField: 'list',\r\n  totalField: 'total',\r\n  method: 'post',\r\n  responseType: 'json'\r\n}"
                }
            ],
            "lib/util/form-utils.ts": [
                {
                    "name": "FormUtils",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/util/form-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormUtilsClass()"
                }
            ],
            "lib/http-interceptor/http-default-encoder.ts": [
                {
                    "name": "HttpDefaultCodec",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/http-interceptor/http-default-encoder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "defaultValue": "{\r\n  decodeKey: (key: string): string => {\r\n    return key;\r\n  },\r\n\r\n  decodeValue(value: string): string {\r\n    return value;\r\n  },\r\n\r\n  encodeKey(key: string): string {\r\n    return key;\r\n  },\r\n\r\n  encodeValue(value: string): string {\r\n    return value;\r\n  }\r\n}"
                }
            ],
            "lib/http-interceptor/http-interceptor.config.ts": [
                {
                    "name": "httpInterceptors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/http-interceptor/http-interceptor.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpLoadingInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpUrlInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpHeaderInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpParamsInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpCustomServerErrorInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpResponseParseInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\r\n]",
                    "rawdescription": "注意，中间件是有序的，谨慎调整下列中间件的顺序",
                    "description": "<p>注意，中间件是有序的，谨慎调整下列中间件的顺序</p>\n"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "lib/service/fetcher.service.ts": [
                {
                    "name": "LOADING_ENABLED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/service/fetcher.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpContextToken<boolean>(() => true)",
                    "rawdescription": "是否启用loading",
                    "description": "<p>是否启用loading</p>\n"
                },
                {
                    "name": "SYNCED_ENABLED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/service/fetcher.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpContextToken<boolean>(() => false)",
                    "rawdescription": "启用同步请求",
                    "description": "<p>启用同步请求</p>\n"
                }
            ],
            "lib/service/loading.service.ts": [
                {
                    "name": "loadingService",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/service/loading.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new LoadingService()"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "lib/pipe/pipe.module.ts": [
                {
                    "name": "PIPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/pipe/pipe.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MathPipe,\r\n  DefaultifyPipe,\r\n  TrustUrlPipe,\r\n  TrustHtmlPipe,\r\n  TrustScriptPipe,\r\n  TrustStylePipe,\r\n  TimeUnitPipe,\r\n  ToAsyncPipe,\r\n  FilterPipe\r\n]"
                }
            ],
            "lib/http-interceptor/xhr.ts": [
                {
                    "name": "XSSI_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "lib/http-interceptor/xhr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^\\)]}',?\\n/"
                }
            ]
        },
        "groupedFunctions": {
            "lib/directive/auth.directive.ts": [
                {
                    "name": "assertTemplate",
                    "file": "lib/directive/auth.directive.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "templateRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "templateRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "lib/between-datetime/datetime-utils.ts": [
                {
                    "name": "getEndDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndMonthDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndWeekDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndYearDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRealDateTime",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>获取Datetime 真实值</p>\n",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabledDateType",
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Date | null | undefined",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1899,
                                "end": 1903,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1893,
                                "end": 1898,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>,</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1916,
                                "end": 1932,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "disabledDateType"
                            },
                            "type": "DisabledDateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1910,
                                "end": 1915,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getStartDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartMonthDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartWeekDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartYearDate",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeValue",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "lib/http-interceptor/xhr.ts": [
                {
                    "name": "getResponseUrl",
                    "file": "lib/http-interceptor/xhr.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Determine an appropriate URL for the response, by checking either\nXMLHttpRequest.responseURL or the X-Request-URL header.</p>\n",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string | null",
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "NzSafeAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "lib/layout-page/is-content-empty.ts": [
                {
                    "name": "isContentEmpty",
                    "file": "lib/layout-page/is-content-empty.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>用于校验 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 是否为空，自定义组件时蛮有用。</p>\n",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "lib/service/fetcher.service.ts": [
                {
                    "name": "synced",
                    "file": "lib/service/fetcher.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>模板字符串函数, 构造同步请求URL</p>\n",
                    "args": [
                        {
                            "name": "url",
                            "type": "TemplateStringsArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "TemplateStringsArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 432,
                                "end": 439,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>let value!: string;\nthis.http.get<string>(&#39;url&#39;, { context: new HttpContext().set(SYNCED_ENABLED, true)}).subscribe(res =&gt; (value = res));\nconsole.log(value);</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "lib/upload/upload.component.ts": [
                {
                    "name": "ErrorType",
                    "childs": [
                        {
                            "name": "FILE_SIZE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE_SIZE"
                        },
                        {
                            "name": "FILE_TOTAL_SIZE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE_TOTAL_SIZE"
                        },
                        {
                            "name": "FILE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE_TYPE"
                        },
                        {
                            "name": "FILE_LIMIT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE_LIMIT"
                        },
                        {
                            "name": "FILE_NAME_LENGTH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE_NAME_LENGTH"
                        },
                        {
                            "name": "FILE_NAME_DUPLICATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE_NAME_DUPLICATE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "lib/upload/upload.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "lib/pipe/to-async.pipe.ts": [
                {
                    "name": "AsyncOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "lib/pipe/to-async.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>异步请求信息</p>\n",
                    "kind": 187
                }
            ],
            "lib/service/auth-guard.service.ts": [
                {
                    "name": "AuthGuardFnType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "lib/service/auth-guard.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>权限路由守卫 使用函数处理</p>\n",
                    "kind": 178
                },
                {
                    "name": "AuthGuardType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AuthGuardFnType | T",
                    "file": "lib/service/auth-guard.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>权限路由守卫配置</p>\n",
                    "kind": 186
                }
            ],
            "lib/table/table.type.ts": [
                {
                    "name": "CellSpanArgType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "lib/table/table.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CellSpanType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "lib/table/table.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>合并单元格参数类型</p>\n",
                    "kind": 178
                },
                {
                    "name": "NzxClassType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | string[] | Set<string> | literal type",
                    "file": "lib/table/table.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "NzxStyleType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type | null",
                    "file": "lib/table/table.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "lib/between-datetime/datetime-utils.ts": [
                {
                    "name": "DatetimeValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | Date | null>",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "DisabledDateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Date | null | ",
                    "file": "lib/between-datetime/datetime-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "lib/service/download.service.ts": [
                {
                    "name": "DownloadOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "lib/service/download.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>下载文件配置信息</p>\n",
                    "kind": 187
                }
            ],
            "lib/service/fetcher.service.ts": [
                {
                    "name": "FetchParams",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | Promise<T> | T",
                    "file": "lib/service/fetcher.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>请求参数</p>\n",
                    "kind": 186
                },
                {
                    "name": "FetchValidatorParams",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | Promise<T> | T",
                    "file": "lib/service/fetcher.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>验证器请求参数</p>\n",
                    "kind": 186
                },
                {
                    "name": "Method",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"get\" | \"GET\" | \"delete\" | \"DELETE\" | \"head\" | \"HEAD\" | \"options\" | \"OPTIONS\" | \"post\" | \"POST\" | \"put\" | \"PUT\" | \"patch\" | \"PATCH\" | \"purge\" | \"PURGE\" | \"link\" | \"LINK\" | \"unlink\" | \"UNLINK\"",
                    "file": "lib/service/fetcher.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ValidatorOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "lib/service/fetcher.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>远程验证器配置</p>\n",
                    "kind": 187
                }
            ],
            "lib/pipe/filter.pipe.ts": [
                {
                    "name": "FilterMatcherFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "lib/pipe/filter.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "lib/directive/fa-icon.directive.ts": [
                {
                    "name": "IconSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"lg\" | \"sm\" | \"1x\" | \"2x\" | \"3x\" | \"4x\" | \"5x\" | \"6x\" | \"7x\" | \"8x\" | \"9x\" | \"10x\"",
                    "file": "lib/directive/fa-icon.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "lib/between-input/between-input.component.ts": [
                {
                    "name": "InputValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | string | number | null> | null",
                    "file": "lib/between-input/between-input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "lib/checkbox/checkbox.component.ts": [
                {
                    "name": "OptionItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<NzxCheckboxOption | \"indeterminate\" | \"ngModelChange\">",
                    "file": "lib/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "lib/util/utils.ts": [
                {
                    "name": "TreeChildren",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "lib/util/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 33,
        "status": "medium",
        "files": [
            {
                "filePath": "lib/between-datetime/between-datetime.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BetweenDatetimeComponent",
                "coveragePercent": 63,
                "coverageCount": "46/73",
                "status": "good"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEndDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEndMonthDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEndWeekDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEndYearDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRealDateTime",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStartMonthDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStartWeekDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStartYearDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-datetime/datetime-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTimeValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/between-input/between-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NzxBetweenInputComponent",
                "coveragePercent": 45,
                "coverageCount": "14/31",
                "status": "medium"
            },
            {
                "filePath": "lib/between-time/between-time.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BetweenTimeComponent",
                "coveragePercent": 18,
                "coverageCount": "13/70",
                "status": "low"
            },
            {
                "filePath": "lib/between/between.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NzxBetweenComponent",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NzxCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "lib/checkbox/checkbox.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NzxCheckboxOption",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "lib/directive/auth.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AuthDirective",
                "coveragePercent": 28,
                "coverageCount": "6/21",
                "status": "medium"
            },
            {
                "filePath": "lib/directive/auth.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthContext",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "lib/directive/auth.directive.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "assertTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/directive/auth.not.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AuthNotDirective",
                "coveragePercent": 34,
                "coverageCount": "9/26",
                "status": "medium"
            },
            {
                "filePath": "lib/directive/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 3,
                "coverageCount": "1/28",
                "status": "low"
            },
            {
                "filePath": "lib/directive/click.once.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOnceDirective",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "lib/directive/directive.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTIVE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/directive/down-file.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DownFileDirective",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "lib/directive/fa-icon.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FaIconDirective",
                "coveragePercent": 4,
                "coverageCount": "1/22",
                "status": "low"
            },
            {
                "filePath": "lib/directive/let.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LetDirective",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "lib/directive/let.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LetContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "lib/directive/named-template.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NamedTemplate",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-custom-server-error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpCustomServerErrorInterceptor",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-default-encoder.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HttpDefaultCodec",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/http-interceptor/http-error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpErrorInterceptor",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-header.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpHeaderInterceptor",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-interceptor.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptors",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/http-interceptor/http-loading.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpLoadingInterceptor",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpLoadingService",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-notify.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpNotifyService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/http-params.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpParamsInterceptor",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "lib/http-interceptor/http-response-parse.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpResponseParseInterceptor",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "lib/http-interceptor/http-url.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpUrlInterceptor",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "lib/http-interceptor/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpError",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "lib/http-interceptor/http.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseModel",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/logout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LogoutService",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "lib/http-interceptor/logout.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogoutType",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "lib/http-interceptor/xhr.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AsyncHttpXhrBackend",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "lib/http-interceptor/xhr.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getResponseUrl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/http-interceptor/xhr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "XSSI_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/layout-page/content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "lib/layout-page/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "lib/layout-page/is-content-empty.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isContentEmpty",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/layout-page/layout-page.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/layout-page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "lib/modal/modal-drag.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalDragDirective",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "lib/modal/modal-drag.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalDragService",
                "coveragePercent": 54,
                "coverageCount": "6/11",
                "status": "good"
            },
            {
                "filePath": "lib/modal/nz-modal-wrap.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NzModalWrapService",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "lib/nzx-antd.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NzxAntdService",
                "coveragePercent": 80,
                "coverageCount": "8/10",
                "status": "very-good"
            },
            {
                "filePath": "lib/nzx-antd.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpErrorBean",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "lib/nzx-antd.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpRequestOptions",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "lib/nzx-antd.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseSetting",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "lib/nzx-antd.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableSetting",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "lib/nzx-antd.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_RESPONSE_SETTING",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/pipe/defaultify.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DefaultifyPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/pipe/filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/pipe/math.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MathPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/pipe/pipe.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/pipe/time-unit.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TimeUnitPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/pipe/to-async.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ToAsyncPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/pipe/trust-resource.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TrustHtmlPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/pipe/trust-resource.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TrustScriptPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/pipe/trust-resource.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TrustStylePipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/pipe/trust-resource.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TrustUrlPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/repeat/repeat.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RepeatComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "lib/service/auth-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "lib/service/download.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DownloadService",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "lib/service/fetcher.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FetcherService",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "lib/service/fetcher.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FetchOptions",
                "coveragePercent": 90,
                "coverageCount": "9/10",
                "status": "very-good"
            },
            {
                "filePath": "lib/service/fetcher.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "synced",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/service/fetcher.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOADING_ENABLED",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/service/fetcher.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SYNCED_ENABLED",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "lib/service/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "lib/service/loading.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadingService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/service/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "lib/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NzxSwitchComponent",
                "coveragePercent": 44,
                "coverageCount": "8/18",
                "status": "medium"
            },
            {
                "filePath": "lib/table/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FETCH_SETTING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/table/header/column-setting/column-setting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColumnSettingComponent",
                "coveragePercent": 65,
                "coverageCount": "13/20",
                "status": "good"
            },
            {
                "filePath": "lib/table/header/table-header/table-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeaderComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "lib/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NzxTableComponent",
                "coveragePercent": 79,
                "coverageCount": "77/97",
                "status": "very-good"
            },
            {
                "filePath": "lib/table/table.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CellEventArg",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FetchSetting",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HeaderEventArg",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IndexAttr",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NzxColumn",
                "coveragePercent": 24,
                "coverageCount": "12/49",
                "status": "low"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageInfo",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowEventArg",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "lib/table/table.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterResult",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "lib/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/upload/upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NzxUploadComponent",
                "coveragePercent": 23,
                "coverageCount": "14/60",
                "status": "low"
            },
            {
                "filePath": "lib/upload/upload.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileValidateError",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "lib/upload/upload.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/util/base-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseControl",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "lib/util/form-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormUtilsClass",
                "coveragePercent": 100,
                "coverageCount": "27/27",
                "status": "very-good"
            },
            {
                "filePath": "lib/util/form-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormUtils",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UtilsClass",
                "coveragePercent": 46,
                "coverageCount": "23/50",
                "status": "medium"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defineProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gOPD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hasOwn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toStr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "lib/util/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Utils",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}